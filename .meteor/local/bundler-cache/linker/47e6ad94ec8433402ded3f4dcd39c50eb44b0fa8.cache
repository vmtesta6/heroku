[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar NpmModuleMongodb = Package['npm-mongo'].NpmModuleMongodb;\nvar NpmModuleMongodbVersion = Package['npm-mongo'].NpmModuleMongodbVersion;\nvar AllowDeny = Package['allow-deny'].AllowDeny;\nvar Random = Package.random.Random;\nvar EJSON = Package.ejson.EJSON;\nvar _ = Package.underscore._;\nvar LocalCollection = Package.minimongo.LocalCollection;\nvar Minimongo = Package.minimongo.Minimongo;\nvar DDP = Package['ddp-client'].DDP;\nvar DDPServer = Package['ddp-server'].DDPServer;\nvar Tracker = Package.tracker.Tracker;\nvar Deps = Package.tracker.Deps;\nvar DiffSequence = Package['diff-sequence'].DiffSequence;\nvar MongoID = Package['mongo-id'].MongoID;\nvar check = Package.check.check;\nvar Match = Package.check.Match;\nvar ECMAScript = Package.ecmascript.ECMAScript;\nvar MaxHeap = Package['binary-heap'].MaxHeap;\nvar MinHeap = Package['binary-heap'].MinHeap;\nvar MinMaxHeap = Package['binary-heap'].MinMaxHeap;\nvar Hook = Package['callback-hook'].Hook;\nvar meteorInstall = Package.modules.meteorInstall;\nvar Buffer = Package.modules.Buffer;\nvar process = Package.modules.process;\nvar Symbol = Package['ecmascript-runtime'].Symbol;\nvar Map = Package['ecmascript-runtime'].Map;\nvar Set = Package['ecmascript-runtime'].Set;\nvar meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nvar Promise = Package.promise.Promise;\n\n/* Package-scope variables */\nvar MongoInternals, MongoTest, MongoConnection, CursorDescription, Cursor, listenAll, forEachTrigger, OPLOG_COLLECTION, idForOp, OplogHandle, ObserveMultiplexer, ObserveHandle, DocFetcher, PollingObserveDriver, OplogObserveDriver, LocalCollectionDriver, Mongo;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"mongo\":{\"mongo_driver.js\":[\"babel-runtime/helpers/typeof\",function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/mongo/mongo_driver.js                                                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _typeof2 = require(\"babel-runtime/helpers/typeof\");                                                                //\n                                                                                                                       //\nvar _typeof3 = _interopRequireDefault(_typeof2);                                                                       //\n                                                                                                                       //\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }                      //\n                                                                                                                       //\n/**                                                                                                                    // 1\n * Provide a synchronous Collection API using fibers, backed by                                                        //\n * MongoDB.  This is only for use on the server, and mostly identical                                                  //\n * to the client API.                                                                                                  //\n *                                                                                                                     //\n * NOTE: the public API methods must be run within a fiber. If you call                                                //\n * these outside of a fiber they will explode!                                                                         //\n */var path = Npm.require('path');                                                                                     //\n                                                                                                                       //\nvar MongoDB = NpmModuleMongodb;                                                                                        // 11\n                                                                                                                       //\nvar Future = Npm.require(path.join('fibers', 'future'));                                                               // 12\n                                                                                                                       //\nMongoInternals = {};                                                                                                   // 14\nMongoTest = {};                                                                                                        // 15\nMongoInternals.NpmModules = {                                                                                          // 17\n  mongodb: {                                                                                                           // 18\n    version: NpmModuleMongodbVersion,                                                                                  // 19\n    module: MongoDB                                                                                                    // 20\n  }                                                                                                                    // 18\n}; // Older version of what is now available via                                                                       // 17\n// MongoInternals.NpmModules.mongodb.module.  It was never documented, but                                             // 25\n// people do use it.                                                                                                   // 26\n// XXX COMPAT WITH 1.0.3.2                                                                                             // 27\n                                                                                                                       //\nMongoInternals.NpmModule = MongoDB; // This is used to add or remove EJSON from the beginning of everything nested     // 28\n// inside an EJSON custom type. It should only be called on pure JSON!                                                 // 31\n                                                                                                                       //\nvar replaceNames = function (filter, thing) {                                                                          // 32\n  if ((typeof thing === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(thing)) === \"object\") {                      // 33\n    if (_.isArray(thing)) {                                                                                            // 34\n      return _.map(thing, _.bind(replaceNames, null, filter));                                                         // 35\n    }                                                                                                                  // 36\n                                                                                                                       //\n    var ret = {};                                                                                                      // 37\n                                                                                                                       //\n    _.each(thing, function (value, key) {                                                                              // 38\n      ret[filter(key)] = replaceNames(filter, value);                                                                  // 39\n    });                                                                                                                // 40\n                                                                                                                       //\n    return ret;                                                                                                        // 41\n  }                                                                                                                    // 42\n                                                                                                                       //\n  return thing;                                                                                                        // 43\n}; // Ensure that EJSON.clone keeps a Timestamp as a Timestamp (instead of just                                        // 44\n// doing a structural clone).                                                                                          // 47\n// XXX how ok is this? what if there are multiple copies of MongoDB loaded?                                            // 48\n                                                                                                                       //\n                                                                                                                       //\nMongoDB.Timestamp.prototype.clone = function () {                                                                      // 49\n  // Timestamps should be immutable.                                                                                   // 50\n  return this;                                                                                                         // 51\n};                                                                                                                     // 52\n                                                                                                                       //\nvar makeMongoLegal = function (name) {                                                                                 // 54\n  return \"EJSON\" + name;                                                                                               // 54\n};                                                                                                                     // 54\n                                                                                                                       //\nvar unmakeMongoLegal = function (name) {                                                                               // 55\n  return name.substr(5);                                                                                               // 55\n};                                                                                                                     // 55\n                                                                                                                       //\nvar replaceMongoAtomWithMeteor = function (document) {                                                                 // 57\n  if (document instanceof MongoDB.Binary) {                                                                            // 58\n    var buffer = document.value(true);                                                                                 // 59\n    return new Uint8Array(buffer);                                                                                     // 60\n  }                                                                                                                    // 61\n                                                                                                                       //\n  if (document instanceof MongoDB.ObjectID) {                                                                          // 62\n    return new Mongo.ObjectID(document.toHexString());                                                                 // 63\n  }                                                                                                                    // 64\n                                                                                                                       //\n  if (document[\"EJSON$type\"] && document[\"EJSON$value\"] && _.size(document) === 2) {                                   // 65\n    return EJSON.fromJSONValue(replaceNames(unmakeMongoLegal, document));                                              // 66\n  }                                                                                                                    // 67\n                                                                                                                       //\n  if (document instanceof MongoDB.Timestamp) {                                                                         // 68\n    // For now, the Meteor representation of a Mongo timestamp type (not a date!                                       // 69\n    // this is a weird internal thing used in the oplog!) is the same as the                                           // 70\n    // Mongo representation. We need to do this explicitly or else we would do a                                       // 71\n    // structural clone and lose the prototype.                                                                        // 72\n    return document;                                                                                                   // 73\n  }                                                                                                                    // 74\n                                                                                                                       //\n  return undefined;                                                                                                    // 75\n};                                                                                                                     // 76\n                                                                                                                       //\nvar replaceMeteorAtomWithMongo = function (document) {                                                                 // 78\n  if (EJSON.isBinary(document)) {                                                                                      // 79\n    // This does more copies than we'd like, but is necessary because                                                  // 80\n    // MongoDB.BSON only looks like it takes a Uint8Array (and doesn't actually                                        // 81\n    // serialize it correctly).                                                                                        // 82\n    return new MongoDB.Binary(new Buffer(document));                                                                   // 83\n  }                                                                                                                    // 84\n                                                                                                                       //\n  if (document instanceof Mongo.ObjectID) {                                                                            // 85\n    return new MongoDB.ObjectID(document.toHexString());                                                               // 86\n  }                                                                                                                    // 87\n                                                                                                                       //\n  if (document instanceof MongoDB.Timestamp) {                                                                         // 88\n    // For now, the Meteor representation of a Mongo timestamp type (not a date!                                       // 89\n    // this is a weird internal thing used in the oplog!) is the same as the                                           // 90\n    // Mongo representation. We need to do this explicitly or else we would do a                                       // 91\n    // structural clone and lose the prototype.                                                                        // 92\n    return document;                                                                                                   // 93\n  }                                                                                                                    // 94\n                                                                                                                       //\n  if (EJSON._isCustomType(document)) {                                                                                 // 95\n    return replaceNames(makeMongoLegal, EJSON.toJSONValue(document));                                                  // 96\n  } // It is not ordinarily possible to stick dollar-sign keys into mongo                                              // 97\n  // so we don't bother checking for things that need escaping at this time.                                           // 99\n                                                                                                                       //\n                                                                                                                       //\n  return undefined;                                                                                                    // 100\n};                                                                                                                     // 101\n                                                                                                                       //\nvar replaceTypes = function (document, atomTransformer) {                                                              // 103\n  if ((typeof document === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(document)) !== 'object' || document === null) return document;\n  var replacedTopLevelAtom = atomTransformer(document);                                                                // 107\n  if (replacedTopLevelAtom !== undefined) return replacedTopLevelAtom;                                                 // 108\n  var ret = document;                                                                                                  // 111\n                                                                                                                       //\n  _.each(document, function (val, key) {                                                                               // 112\n    var valReplaced = replaceTypes(val, atomTransformer);                                                              // 113\n                                                                                                                       //\n    if (val !== valReplaced) {                                                                                         // 114\n      // Lazy clone. Shallow copy.                                                                                     // 115\n      if (ret === document) ret = _.clone(document);                                                                   // 116\n      ret[key] = valReplaced;                                                                                          // 118\n    }                                                                                                                  // 119\n  });                                                                                                                  // 120\n                                                                                                                       //\n  return ret;                                                                                                          // 121\n};                                                                                                                     // 122\n                                                                                                                       //\nMongoConnection = function (url, options) {                                                                            // 125\n  var self = this;                                                                                                     // 126\n  options = options || {};                                                                                             // 127\n  self._observeMultiplexers = {};                                                                                      // 128\n  self._onFailoverHook = new Hook();                                                                                   // 129\n                                                                                                                       //\n  var mongoOptions = _.extend({                                                                                        // 131\n    db: {                                                                                                              // 132\n      safe: true                                                                                                       // 132\n    },                                                                                                                 // 132\n    // http://mongodb.github.io/node-mongodb-native/2.2/api/Server.html                                                // 133\n    server: {                                                                                                          // 134\n      // Reconnect on error.                                                                                           // 135\n      autoReconnect: true,                                                                                             // 136\n      // Try to reconnect forever, instead of stopping after 30 tries (the                                             // 137\n      // default), with each attempt separated by 1000ms.                                                              // 138\n      reconnectTries: Infinity                                                                                         // 139\n    },                                                                                                                 // 134\n    replSet: {}                                                                                                        // 141\n  }, Mongo._connectionOptions); // Disable the native parser by default, unless specifically enabled                   // 131\n  // in the mongo URL.                                                                                                 // 145\n  // - The native driver can cause errors which normally would be                                                      // 146\n  //   thrown, caught, and handled into segfaults that take down the                                                   // 147\n  //   whole app.                                                                                                      // 148\n  // - Binary modules don't yet work when you bundle and move the bundle                                               // 149\n  //   to a different platform (aka deploy)                                                                            // 150\n  // We should revisit this after binary npm module support lands.                                                     // 151\n                                                                                                                       //\n                                                                                                                       //\n  if (!/[\\?&]native_?[pP]arser=/.test(url)) {                                                                          // 152\n    mongoOptions.db.native_parser = false;                                                                             // 153\n  } // Internally the oplog connections specify their own poolSize                                                     // 154\n  // which we don't want to overwrite with any user defined value                                                      // 157\n                                                                                                                       //\n                                                                                                                       //\n  if (_.has(options, 'poolSize')) {                                                                                    // 158\n    // If we just set this for \"server\", replSet will override it. If we just                                          // 159\n    // set it for replSet, it will be ignored if we're not using a replSet.                                            // 160\n    mongoOptions.server.poolSize = options.poolSize;                                                                   // 161\n    mongoOptions.replSet.poolSize = options.poolSize;                                                                  // 162\n  }                                                                                                                    // 163\n                                                                                                                       //\n  self.db = null; // We keep track of the ReplSet's primary, so that we can trigger hooks when                         // 165\n  // it changes.  The Node driver's joined callback seems to fire way too                                              // 167\n  // often, which is why we need to track it ourselves.                                                                // 168\n                                                                                                                       //\n  self._primary = null;                                                                                                // 169\n  self._oplogHandle = null;                                                                                            // 170\n  self._docFetcher = null;                                                                                             // 171\n  var connectFuture = new Future();                                                                                    // 174\n  MongoDB.connect(url, mongoOptions, Meteor.bindEnvironment(function (err, db) {                                       // 175\n    if (err) {                                                                                                         // 180\n      throw err;                                                                                                       // 181\n    } // First, figure out what the current primary is, if any.                                                        // 182\n                                                                                                                       //\n                                                                                                                       //\n    if (db.serverConfig.isMasterDoc) {                                                                                 // 185\n      self._primary = db.serverConfig.isMasterDoc.primary;                                                             // 186\n    }                                                                                                                  // 187\n                                                                                                                       //\n    db.serverConfig.on('joined', Meteor.bindEnvironment(function (kind, doc) {                                         // 189\n      if (kind === 'primary') {                                                                                        // 191\n        if (doc.primary !== self._primary) {                                                                           // 192\n          self._primary = doc.primary;                                                                                 // 193\n                                                                                                                       //\n          self._onFailoverHook.each(function (callback) {                                                              // 194\n            callback();                                                                                                // 195\n            return true;                                                                                               // 196\n          });                                                                                                          // 197\n        }                                                                                                              // 198\n      } else if (doc.me === self._primary) {                                                                           // 199\n        // The thing we thought was primary is now something other than                                                // 200\n        // primary.  Forget that we thought it was primary.  (This means                                               // 201\n        // that if a server stops being primary and then starts being                                                  // 202\n        // primary again without another server becoming primary in the                                                // 203\n        // middle, we'll correctly count it as a failover.)                                                            // 204\n        self._primary = null;                                                                                          // 205\n      }                                                                                                                // 206\n    })); // Allow the constructor to return.                                                                           // 207\n                                                                                                                       //\n    connectFuture['return'](db);                                                                                       // 210\n  }, connectFuture.resolver() // onException                                                                           // 211\n  )); // Wait for the connection to be successful; throws on failure.                                                  // 178\n                                                                                                                       //\n  self.db = connectFuture.wait();                                                                                      // 217\n                                                                                                                       //\n  if (options.oplogUrl && !Package['disable-oplog']) {                                                                 // 219\n    self._oplogHandle = new OplogHandle(options.oplogUrl, self.db.databaseName);                                       // 220\n    self._docFetcher = new DocFetcher(self);                                                                           // 221\n  }                                                                                                                    // 222\n};                                                                                                                     // 223\n                                                                                                                       //\nMongoConnection.prototype.close = function () {                                                                        // 225\n  var self = this;                                                                                                     // 226\n  if (!self.db) throw Error(\"close called before Connection created?\"); // XXX probably untested                       // 228\n                                                                                                                       //\n  var oplogHandle = self._oplogHandle;                                                                                 // 232\n  self._oplogHandle = null;                                                                                            // 233\n  if (oplogHandle) oplogHandle.stop(); // Use Future.wrap so that errors get thrown. This happens to                   // 234\n  // work even outside a fiber since the 'close' method is not                                                         // 238\n  // actually asynchronous.                                                                                            // 239\n                                                                                                                       //\n  Future.wrap(_.bind(self.db.close, self.db))(true).wait();                                                            // 240\n}; // Returns the Mongo Collection object; may yield.                                                                  // 241\n                                                                                                                       //\n                                                                                                                       //\nMongoConnection.prototype.rawCollection = function (collectionName) {                                                  // 244\n  var self = this;                                                                                                     // 245\n  if (!self.db) throw Error(\"rawCollection called before Connection created?\");                                        // 247\n  var future = new Future();                                                                                           // 250\n  self.db.collection(collectionName, future.resolver());                                                               // 251\n  return future.wait();                                                                                                // 252\n};                                                                                                                     // 253\n                                                                                                                       //\nMongoConnection.prototype._createCappedCollection = function (collectionName, byteSize, maxDocuments) {                // 255\n  var self = this;                                                                                                     // 257\n  if (!self.db) throw Error(\"_createCappedCollection called before Connection created?\");                              // 259\n  var future = new Future();                                                                                           // 262\n  self.db.createCollection(collectionName, {                                                                           // 263\n    capped: true,                                                                                                      // 265\n    size: byteSize,                                                                                                    // 265\n    max: maxDocuments                                                                                                  // 265\n  }, future.resolver());                                                                                               // 265\n  future.wait();                                                                                                       // 267\n}; // This should be called synchronously with a write, to create a                                                    // 268\n// transaction on the current write fence, if any. After we can read                                                   // 271\n// the write, and after observers have been notified (or at least,                                                     // 272\n// after the observer notifiers have added themselves to the write                                                     // 273\n// fence), you should call 'committed()' on the object returned.                                                       // 274\n                                                                                                                       //\n                                                                                                                       //\nMongoConnection.prototype._maybeBeginWrite = function () {                                                             // 275\n  var fence = DDPServer._CurrentWriteFence.get();                                                                      // 276\n                                                                                                                       //\n  if (fence) {                                                                                                         // 277\n    return fence.beginWrite();                                                                                         // 278\n  } else {                                                                                                             // 279\n    return {                                                                                                           // 280\n      committed: function () {}                                                                                        // 280\n    };                                                                                                                 // 280\n  }                                                                                                                    // 281\n}; // Internal interface: adds a callback which is called when the Mongo primary                                       // 282\n// changes. Returns a stop handle.                                                                                     // 285\n                                                                                                                       //\n                                                                                                                       //\nMongoConnection.prototype._onFailover = function (callback) {                                                          // 286\n  return this._onFailoverHook.register(callback);                                                                      // 287\n}; //////////// Public API //////////                                                                                  // 288\n// The write methods block until the database has confirmed the write (it may                                          // 293\n// not be replicated or stable on disk, but one server has confirmed it) if no                                         // 294\n// callback is provided. If a callback is provided, then they call the callback                                        // 295\n// when the write is confirmed. They return nothing on success, and raise an                                           // 296\n// exception on failure.                                                                                               // 297\n//                                                                                                                     // 298\n// After making a write (with insert, update, remove), observers are                                                   // 299\n// notified asynchronously. If you want to receive a callback once all                                                 // 300\n// of the observer notifications have landed for your write, do the                                                    // 301\n// writes inside a write fence (set DDPServer._CurrentWriteFence to a new                                              // 302\n// _WriteFence, and then set a callback on the write fence.)                                                           // 303\n//                                                                                                                     // 304\n// Since our execution environment is single-threaded, this is                                                         // 305\n// well-defined -- a write \"has been made\" if it's returned, and an                                                    // 306\n// observer \"has been notified\" if its callback has returned.                                                          // 307\n                                                                                                                       //\n                                                                                                                       //\nvar writeCallback = function (write, refresh, callback) {                                                              // 309\n  return function (err, result) {                                                                                      // 310\n    if (!err) {                                                                                                        // 311\n      // XXX We don't have to run this on error, right?                                                                // 312\n      try {                                                                                                            // 313\n        refresh();                                                                                                     // 314\n      } catch (refreshErr) {                                                                                           // 315\n        if (callback) {                                                                                                // 316\n          callback(refreshErr);                                                                                        // 317\n          return;                                                                                                      // 318\n        } else {                                                                                                       // 319\n          throw refreshErr;                                                                                            // 320\n        }                                                                                                              // 321\n      }                                                                                                                // 322\n    }                                                                                                                  // 323\n                                                                                                                       //\n    write.committed();                                                                                                 // 324\n                                                                                                                       //\n    if (callback) {                                                                                                    // 325\n      callback(err, result);                                                                                           // 326\n    } else if (err) {                                                                                                  // 327\n      throw err;                                                                                                       // 328\n    }                                                                                                                  // 329\n  };                                                                                                                   // 330\n};                                                                                                                     // 331\n                                                                                                                       //\nvar bindEnvironmentForWrite = function (callback) {                                                                    // 333\n  return Meteor.bindEnvironment(callback, \"Mongo write\");                                                              // 334\n};                                                                                                                     // 335\n                                                                                                                       //\nMongoConnection.prototype._insert = function (collection_name, document, callback) {                                   // 337\n  var self = this;                                                                                                     // 339\n                                                                                                                       //\n  var sendError = function (e) {                                                                                       // 341\n    if (callback) return callback(e);                                                                                  // 342\n    throw e;                                                                                                           // 344\n  };                                                                                                                   // 345\n                                                                                                                       //\n  if (collection_name === \"___meteor_failure_test_collection\") {                                                       // 347\n    var e = new Error(\"Failure test\");                                                                                 // 348\n    e.expected = true;                                                                                                 // 349\n    sendError(e);                                                                                                      // 350\n    return;                                                                                                            // 351\n  }                                                                                                                    // 352\n                                                                                                                       //\n  if (!(LocalCollection._isPlainObject(document) && !EJSON._isCustomType(document))) {                                 // 354\n    sendError(new Error(\"Only plain objects may be inserted into MongoDB\"));                                           // 356\n    return;                                                                                                            // 358\n  }                                                                                                                    // 359\n                                                                                                                       //\n  var write = self._maybeBeginWrite();                                                                                 // 361\n                                                                                                                       //\n  var refresh = function () {                                                                                          // 362\n    Meteor.refresh({                                                                                                   // 363\n      collection: collection_name,                                                                                     // 363\n      id: document._id                                                                                                 // 363\n    });                                                                                                                // 363\n  };                                                                                                                   // 364\n                                                                                                                       //\n  callback = bindEnvironmentForWrite(writeCallback(write, refresh, callback));                                         // 365\n                                                                                                                       //\n  try {                                                                                                                // 366\n    var collection = self.rawCollection(collection_name);                                                              // 367\n    collection.insert(replaceTypes(document, replaceMeteorAtomWithMongo), {                                            // 368\n      safe: true                                                                                                       // 369\n    }, callback);                                                                                                      // 369\n  } catch (err) {                                                                                                      // 370\n    write.committed();                                                                                                 // 371\n    throw err;                                                                                                         // 372\n  }                                                                                                                    // 373\n}; // Cause queries that may be affected by the selector to poll in this write                                         // 374\n// fence.                                                                                                              // 377\n                                                                                                                       //\n                                                                                                                       //\nMongoConnection.prototype._refresh = function (collectionName, selector) {                                             // 378\n  var refreshKey = {                                                                                                   // 379\n    collection: collectionName                                                                                         // 379\n  }; // If we know which documents we're removing, don't poll queries that are                                         // 379\n  // specific to other documents. (Note that multiple notifications here should                                        // 381\n  // not cause multiple polls, since all our listener is doing is enqueueing a                                         // 382\n  // poll.)                                                                                                            // 383\n                                                                                                                       //\n  var specificIds = LocalCollection._idsMatchedBySelector(selector);                                                   // 384\n                                                                                                                       //\n  if (specificIds) {                                                                                                   // 385\n    _.each(specificIds, function (id) {                                                                                // 386\n      Meteor.refresh(_.extend({                                                                                        // 387\n        id: id                                                                                                         // 387\n      }, refreshKey));                                                                                                 // 387\n    });                                                                                                                // 388\n  } else {                                                                                                             // 389\n    Meteor.refresh(refreshKey);                                                                                        // 390\n  }                                                                                                                    // 391\n};                                                                                                                     // 392\n                                                                                                                       //\nMongoConnection.prototype._remove = function (collection_name, selector, callback) {                                   // 394\n  var self = this;                                                                                                     // 396\n                                                                                                                       //\n  if (collection_name === \"___meteor_failure_test_collection\") {                                                       // 398\n    var e = new Error(\"Failure test\");                                                                                 // 399\n    e.expected = true;                                                                                                 // 400\n                                                                                                                       //\n    if (callback) {                                                                                                    // 401\n      return callback(e);                                                                                              // 402\n    } else {                                                                                                           // 403\n      throw e;                                                                                                         // 404\n    }                                                                                                                  // 405\n  }                                                                                                                    // 406\n                                                                                                                       //\n  var write = self._maybeBeginWrite();                                                                                 // 408\n                                                                                                                       //\n  var refresh = function () {                                                                                          // 409\n    self._refresh(collection_name, selector);                                                                          // 410\n  };                                                                                                                   // 411\n                                                                                                                       //\n  callback = bindEnvironmentForWrite(writeCallback(write, refresh, callback));                                         // 412\n                                                                                                                       //\n  try {                                                                                                                // 414\n    var collection = self.rawCollection(collection_name);                                                              // 415\n                                                                                                                       //\n    var wrappedCallback = function (err, driverResult) {                                                               // 416\n      callback(err, transformResult(driverResult).numberAffected);                                                     // 417\n    };                                                                                                                 // 418\n                                                                                                                       //\n    collection.remove(replaceTypes(selector, replaceMeteorAtomWithMongo), {                                            // 419\n      safe: true                                                                                                       // 420\n    }, wrappedCallback);                                                                                               // 420\n  } catch (err) {                                                                                                      // 421\n    write.committed();                                                                                                 // 422\n    throw err;                                                                                                         // 423\n  }                                                                                                                    // 424\n};                                                                                                                     // 425\n                                                                                                                       //\nMongoConnection.prototype._dropCollection = function (collectionName, cb) {                                            // 427\n  var self = this;                                                                                                     // 428\n                                                                                                                       //\n  var write = self._maybeBeginWrite();                                                                                 // 430\n                                                                                                                       //\n  var refresh = function () {                                                                                          // 431\n    Meteor.refresh({                                                                                                   // 432\n      collection: collectionName,                                                                                      // 432\n      id: null,                                                                                                        // 432\n      dropCollection: true                                                                                             // 433\n    });                                                                                                                // 432\n  };                                                                                                                   // 434\n                                                                                                                       //\n  cb = bindEnvironmentForWrite(writeCallback(write, refresh, cb));                                                     // 435\n                                                                                                                       //\n  try {                                                                                                                // 437\n    var collection = self.rawCollection(collectionName);                                                               // 438\n    collection.drop(cb);                                                                                               // 439\n  } catch (e) {                                                                                                        // 440\n    write.committed();                                                                                                 // 441\n    throw e;                                                                                                           // 442\n  }                                                                                                                    // 443\n}; // For testing only.  Slightly better than `c.rawDatabase().dropDatabase()`                                         // 444\n// because it lets the test's fence wait for it to be complete.                                                        // 447\n                                                                                                                       //\n                                                                                                                       //\nMongoConnection.prototype._dropDatabase = function (cb) {                                                              // 448\n  var self = this;                                                                                                     // 449\n                                                                                                                       //\n  var write = self._maybeBeginWrite();                                                                                 // 451\n                                                                                                                       //\n  var refresh = function () {                                                                                          // 452\n    Meteor.refresh({                                                                                                   // 453\n      dropDatabase: true                                                                                               // 453\n    });                                                                                                                // 453\n  };                                                                                                                   // 454\n                                                                                                                       //\n  cb = bindEnvironmentForWrite(writeCallback(write, refresh, cb));                                                     // 455\n                                                                                                                       //\n  try {                                                                                                                // 457\n    self.db.dropDatabase(cb);                                                                                          // 458\n  } catch (e) {                                                                                                        // 459\n    write.committed();                                                                                                 // 460\n    throw e;                                                                                                           // 461\n  }                                                                                                                    // 462\n};                                                                                                                     // 463\n                                                                                                                       //\nMongoConnection.prototype._update = function (collection_name, selector, mod, options, callback) {                     // 465\n  var self = this;                                                                                                     // 467\n                                                                                                                       //\n  if (!callback && options instanceof Function) {                                                                      // 469\n    callback = options;                                                                                                // 470\n    options = null;                                                                                                    // 471\n  }                                                                                                                    // 472\n                                                                                                                       //\n  if (collection_name === \"___meteor_failure_test_collection\") {                                                       // 474\n    var e = new Error(\"Failure test\");                                                                                 // 475\n    e.expected = true;                                                                                                 // 476\n                                                                                                                       //\n    if (callback) {                                                                                                    // 477\n      return callback(e);                                                                                              // 478\n    } else {                                                                                                           // 479\n      throw e;                                                                                                         // 480\n    }                                                                                                                  // 481\n  } // explicit safety check. null and undefined can crash the mongo                                                   // 482\n  // driver. Although the node driver and minimongo do 'support'                                                       // 485\n  // non-object modifier in that they don't crash, they are not                                                        // 486\n  // meaningful operations and do not do anything. Defensively throw an                                                // 487\n  // error here.                                                                                                       // 488\n                                                                                                                       //\n                                                                                                                       //\n  if (!mod || (typeof mod === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(mod)) !== 'object') throw new Error(\"Invalid modifier. Modifier must be an object.\");\n                                                                                                                       //\n  if (!(LocalCollection._isPlainObject(mod) && !EJSON._isCustomType(mod))) {                                           // 492\n    throw new Error(\"Only plain objects may be used as replacement\" + \" documents in MongoDB\");                        // 494\n  }                                                                                                                    // 497\n                                                                                                                       //\n  if (!options) options = {};                                                                                          // 499\n                                                                                                                       //\n  var write = self._maybeBeginWrite();                                                                                 // 501\n                                                                                                                       //\n  var refresh = function () {                                                                                          // 502\n    self._refresh(collection_name, selector);                                                                          // 503\n  };                                                                                                                   // 504\n                                                                                                                       //\n  callback = writeCallback(write, refresh, callback);                                                                  // 505\n                                                                                                                       //\n  try {                                                                                                                // 506\n    var collection = self.rawCollection(collection_name);                                                              // 507\n    var mongoOpts = {                                                                                                  // 508\n      safe: true                                                                                                       // 508\n    }; // explictly enumerate options that minimongo supports                                                          // 508\n                                                                                                                       //\n    if (options.upsert) mongoOpts.upsert = true;                                                                       // 510\n    if (options.multi) mongoOpts.multi = true; // Lets you get a more more full result from MongoDB. Use with caution:\n    // might not work with C.upsert (as opposed to C.update({upsert:true}) or                                          // 513\n    // with simulated upsert.                                                                                          // 514\n                                                                                                                       //\n    if (options.fullResult) mongoOpts.fullResult = true;                                                               // 515\n    var mongoSelector = replaceTypes(selector, replaceMeteorAtomWithMongo);                                            // 517\n    var mongoMod = replaceTypes(mod, replaceMeteorAtomWithMongo);                                                      // 518\n    var isModify = isModificationMod(mongoMod);                                                                        // 520\n    var knownId = selector._id || mod._id;                                                                             // 521\n                                                                                                                       //\n    if (options._forbidReplace && !isModify) {                                                                         // 523\n      var err = new Error(\"Invalid modifier. Replacements are forbidden.\");                                            // 524\n                                                                                                                       //\n      if (callback) {                                                                                                  // 525\n        return callback(err);                                                                                          // 526\n      } else {                                                                                                         // 527\n        throw err;                                                                                                     // 528\n      }                                                                                                                // 529\n    }                                                                                                                  // 530\n                                                                                                                       //\n    if (options.upsert && !knownId && options.insertedId) {                                                            // 532\n      // XXX If we know we're using Mongo 2.6 (and this isn't a replacement)                                           // 533\n      //     we should be able to just use $setOnInsert instead of this                                                // 534\n      //     simulated upsert thing. (We can't use $setOnInsert with                                                   // 535\n      //     replacements because there's nowhere to write it, and $setOnInsert                                        // 536\n      //     can't set _id on Mongo 2.4.)                                                                              // 537\n      //                                                                                                               // 538\n      //     Also, in the future we could do a real upsert for the mongo id                                            // 539\n      //     generation case, if the the node mongo driver gives us back the id                                        // 540\n      //     of the upserted doc (which our current version does not).                                                 // 541\n      //                                                                                                               // 542\n      //     For more context, see                                                                                     // 543\n      //     https://github.com/meteor/meteor/issues/2278#issuecomment-64252706                                        // 544\n      simulateUpsertWithInsertedId(collection, mongoSelector, mongoMod, isModify, options, // This callback does not need to be bindEnvironment'ed because\n      // simulateUpsertWithInsertedId() wraps it and then passes it through                                            // 549\n      // bindEnvironmentForWrite.                                                                                      // 550\n      function (error, result) {                                                                                       // 551\n        // If we got here via a upsert() call, then options._returnObject will                                         // 552\n        // be set and we should return the whole object. Otherwise, we should                                          // 553\n        // just return the number of affected docs to match the mongo API.                                             // 554\n        if (result && !options._returnObject) {                                                                        // 555\n          callback(error, result.numberAffected);                                                                      // 556\n        } else {                                                                                                       // 557\n          callback(error, result);                                                                                     // 558\n        }                                                                                                              // 559\n      });                                                                                                              // 560\n    } else {                                                                                                           // 562\n      collection.update(mongoSelector, mongoMod, mongoOpts, bindEnvironmentForWrite(function (err, result) {           // 563\n        if (!err) {                                                                                                    // 566\n          var meteorResult = transformResult(result);                                                                  // 567\n                                                                                                                       //\n          if (meteorResult && options._returnObject) {                                                                 // 568\n            // If this was an upsert() call, and we ended up                                                           // 569\n            // inserting a new doc and we know its id, then                                                            // 570\n            // return that id as well.                                                                                 // 571\n            if (options.upsert && meteorResult.insertedId && knownId) {                                                // 573\n              meteorResult.insertedId = knownId;                                                                       // 574\n            }                                                                                                          // 575\n                                                                                                                       //\n            callback(err, meteorResult);                                                                               // 576\n          } else {                                                                                                     // 577\n            callback(err, meteorResult.numberAffected);                                                                // 578\n          }                                                                                                            // 579\n        } else {                                                                                                       // 580\n          callback(err);                                                                                               // 581\n        }                                                                                                              // 582\n      }));                                                                                                             // 583\n    }                                                                                                                  // 584\n  } catch (e) {                                                                                                        // 585\n    write.committed();                                                                                                 // 586\n    throw e;                                                                                                           // 587\n  }                                                                                                                    // 588\n};                                                                                                                     // 589\n                                                                                                                       //\nvar isModificationMod = function (mod) {                                                                               // 591\n  var isReplace = false;                                                                                               // 592\n  var isModify = false;                                                                                                // 593\n                                                                                                                       //\n  for (var k in meteorBabelHelpers.sanitizeForInObject(mod)) {                                                         // 594\n    if (k.substr(0, 1) === '$') {                                                                                      // 595\n      isModify = true;                                                                                                 // 596\n    } else {                                                                                                           // 597\n      isReplace = true;                                                                                                // 598\n    }                                                                                                                  // 599\n  }                                                                                                                    // 600\n                                                                                                                       //\n  if (isModify && isReplace) {                                                                                         // 601\n    throw new Error(\"Update parameter cannot have both modifier and non-modifier fields.\");                            // 602\n  }                                                                                                                    // 604\n                                                                                                                       //\n  return isModify;                                                                                                     // 605\n};                                                                                                                     // 606\n                                                                                                                       //\nvar transformResult = function (driverResult) {                                                                        // 608\n  var meteorResult = {                                                                                                 // 609\n    numberAffected: 0                                                                                                  // 609\n  };                                                                                                                   // 609\n                                                                                                                       //\n  if (driverResult) {                                                                                                  // 610\n    var mongoResult = driverResult.result; // On updates with upsert:true, the inserted values come as a list of       // 611\n    // upserted values -- even with options.multi, when the upsert does insert,                                        // 614\n    // it only inserts one element.                                                                                    // 615\n                                                                                                                       //\n    if (mongoResult.upserted) {                                                                                        // 616\n      meteorResult.numberAffected += mongoResult.upserted.length;                                                      // 617\n                                                                                                                       //\n      if (mongoResult.upserted.length == 1) {                                                                          // 619\n        meteorResult.insertedId = mongoResult.upserted[0]._id;                                                         // 620\n      }                                                                                                                // 621\n    } else {                                                                                                           // 622\n      meteorResult.numberAffected = mongoResult.n;                                                                     // 623\n    }                                                                                                                  // 624\n  }                                                                                                                    // 625\n                                                                                                                       //\n  return meteorResult;                                                                                                 // 627\n};                                                                                                                     // 628\n                                                                                                                       //\nvar NUM_OPTIMISTIC_TRIES = 3; // exposed for testing                                                                   // 631\n                                                                                                                       //\nMongoConnection._isCannotChangeIdError = function (err) {                                                              // 634\n  // First check for what this error looked like in Mongo 2.4.  Either of these                                        // 635\n  // checks should work, but just to be safe...                                                                        // 636\n  if (err.code === 13596) return true;                                                                                 // 637\n  if (err.errmsg.indexOf(\"cannot change _id of a document\") === 0) return true; // Now look for what it looks like in Mongo 2.6.  We don't use the error code\n  // here, because the error code we observed it producing (16837) appears to be                                       // 643\n  // a far more generic error code based on examining the source.                                                      // 644\n                                                                                                                       //\n  if (err.errmsg.indexOf(\"The _id field cannot be changed\") === 0) return true;                                        // 645\n  return false;                                                                                                        // 648\n};                                                                                                                     // 649\n                                                                                                                       //\nvar simulateUpsertWithInsertedId = function (collection, selector, mod, isModify, options, callback) {                 // 651\n  // STRATEGY:  First try doing a plain update.  If it affected 0 documents,                                           // 653\n  // then without affecting the database, we know we should probably do an                                             // 654\n  // insert.  We then do a *conditional* insert that will fail in the case                                             // 655\n  // of a race condition.  This conditional insert is actually an                                                      // 656\n  // upsert-replace with an _id, which will never successfully update an                                               // 657\n  // existing document.  If this upsert fails with an error saying it                                                  // 658\n  // couldn't change an existing _id, then we know an intervening write has                                            // 659\n  // caused the query to match something.  We go back to step one and repeat.                                          // 660\n  // Like all \"optimistic write\" schemes, we rely on the fact that it's                                                // 661\n  // unlikely our writes will continue to be interfered with under normal                                              // 662\n  // circumstances (though sufficiently heavy contention with writers                                                  // 663\n  // disagreeing on the existence of an object will cause writes to fail                                               // 664\n  // in theory).                                                                                                       // 665\n  var newDoc; // Run this code up front so that it fails fast if someone uses                                          // 667\n  // a Mongo update operator we don't support.                                                                         // 669\n                                                                                                                       //\n  if (isModify) {                                                                                                      // 670\n    // We've already run replaceTypes/replaceMeteorAtomWithMongo on                                                    // 671\n    // selector and mod.  We assume it doesn't matter, as far as                                                       // 672\n    // the behavior of modifiers is concerned, whether `_modify`                                                       // 673\n    // is run on EJSON or on mongo-converted EJSON.                                                                    // 674\n    var selectorDoc = LocalCollection._removeDollarOperators(selector);                                                // 675\n                                                                                                                       //\n    newDoc = selectorDoc; // Convert dotted keys into objects. (Resolves issue #4522).                                 // 677\n                                                                                                                       //\n    _.each(newDoc, function (value, key) {                                                                             // 680\n      var trail = key.split(\".\");                                                                                      // 681\n                                                                                                                       //\n      if (trail.length > 1) {                                                                                          // 683\n        //Key is dotted. Convert it into an object.                                                                    // 684\n        delete newDoc[key];                                                                                            // 685\n        var obj = newDoc,                                                                                              // 687\n            leaf = trail.pop(); // XXX It is not quite certain what should be done if there are clashing               // 687\n        // keys on the trail of the dotted key. For now we will just override it                                       // 691\n        // It wouldn't be a very sane query in the first place, but should look                                        // 692\n        // up what mongo does in this case.                                                                            // 693\n                                                                                                                       //\n        while (key = trail.shift()) {                                                                                  // 695\n          if ((0, _typeof3.default)(obj[key]) !== \"object\") {                                                          // 696\n            obj[key] = {};                                                                                             // 697\n          }                                                                                                            // 698\n                                                                                                                       //\n          obj = obj[key];                                                                                              // 700\n        }                                                                                                              // 701\n                                                                                                                       //\n        obj[leaf] = value;                                                                                             // 703\n      }                                                                                                                // 704\n    });                                                                                                                // 705\n                                                                                                                       //\n    LocalCollection._modify(newDoc, mod, {                                                                             // 707\n      isInsert: true                                                                                                   // 707\n    });                                                                                                                // 707\n  } else {                                                                                                             // 708\n    newDoc = mod;                                                                                                      // 709\n  }                                                                                                                    // 710\n                                                                                                                       //\n  var insertedId = options.insertedId; // must exist                                                                   // 712\n                                                                                                                       //\n  var mongoOptsForUpdate = {                                                                                           // 713\n    safe: true,                                                                                                        // 714\n    multi: options.multi                                                                                               // 715\n  };                                                                                                                   // 713\n  var mongoOptsForInsert = {                                                                                           // 717\n    safe: true,                                                                                                        // 718\n    upsert: true                                                                                                       // 719\n  };                                                                                                                   // 717\n  var tries = NUM_OPTIMISTIC_TRIES;                                                                                    // 722\n                                                                                                                       //\n  var doUpdate = function () {                                                                                         // 724\n    tries--;                                                                                                           // 725\n                                                                                                                       //\n    if (!tries) {                                                                                                      // 726\n      callback(new Error(\"Upsert failed after \" + NUM_OPTIMISTIC_TRIES + \" tries.\"));                                  // 727\n    } else {                                                                                                           // 728\n      collection.update(selector, mod, mongoOptsForUpdate, bindEnvironmentForWrite(function (err, result) {            // 729\n        if (err) {                                                                                                     // 731\n          callback(err);                                                                                               // 732\n        } else if (result && result.result.n != 0) {                                                                   // 733\n          callback(null, {                                                                                             // 734\n            numberAffected: result.result.n                                                                            // 735\n          });                                                                                                          // 734\n        } else {                                                                                                       // 737\n          doConditionalInsert();                                                                                       // 738\n        }                                                                                                              // 739\n      }));                                                                                                             // 740\n    }                                                                                                                  // 741\n  };                                                                                                                   // 742\n                                                                                                                       //\n  var doConditionalInsert = function () {                                                                              // 744\n    var replacementWithId = _.extend(replaceTypes({                                                                    // 745\n      _id: insertedId                                                                                                  // 746\n    }, replaceMeteorAtomWithMongo), newDoc);                                                                           // 746\n                                                                                                                       //\n    collection.update(selector, replacementWithId, mongoOptsForInsert, bindEnvironmentForWrite(function (err, result) {\n      if (err) {                                                                                                       // 750\n        // figure out if this is a                                                                                     // 751\n        // \"cannot change _id of document\" error, and                                                                  // 752\n        // if so, try doUpdate() again, up to 3 times.                                                                 // 753\n        if (MongoConnection._isCannotChangeIdError(err)) {                                                             // 754\n          doUpdate();                                                                                                  // 755\n        } else {                                                                                                       // 756\n          callback(err);                                                                                               // 757\n        }                                                                                                              // 758\n      } else {                                                                                                         // 759\n        callback(null, {                                                                                               // 760\n          numberAffected: result.result.upserted.length,                                                               // 761\n          insertedId: insertedId                                                                                       // 762\n        });                                                                                                            // 760\n      }                                                                                                                // 764\n    }));                                                                                                               // 765\n  };                                                                                                                   // 766\n                                                                                                                       //\n  doUpdate();                                                                                                          // 768\n};                                                                                                                     // 769\n                                                                                                                       //\n_.each([\"insert\", \"update\", \"remove\", \"dropCollection\", \"dropDatabase\"], function (method) {                           // 771\n  MongoConnection.prototype[method] = function () /* arguments */{                                                     // 772\n    var self = this;                                                                                                   // 773\n    return Meteor.wrapAsync(self[\"_\" + method]).apply(self, arguments);                                                // 774\n  };                                                                                                                   // 775\n}); // XXX MongoConnection.upsert() does not return the id of the inserted document                                    // 776\n// unless you set it explicitly in the selector or modifier (as a replacement                                          // 779\n// doc).                                                                                                               // 780\n                                                                                                                       //\n                                                                                                                       //\nMongoConnection.prototype.upsert = function (collectionName, selector, mod, options, callback) {                       // 781\n  var self = this;                                                                                                     // 783\n                                                                                                                       //\n  if (typeof options === \"function\" && !callback) {                                                                    // 784\n    callback = options;                                                                                                // 785\n    options = {};                                                                                                      // 786\n  }                                                                                                                    // 787\n                                                                                                                       //\n  return self.update(collectionName, selector, mod, _.extend({}, options, {                                            // 789\n    upsert: true,                                                                                                      // 791\n    _returnObject: true                                                                                                // 792\n  }), callback);                                                                                                       // 790\n};                                                                                                                     // 794\n                                                                                                                       //\nMongoConnection.prototype.find = function (collectionName, selector, options) {                                        // 796\n  var self = this;                                                                                                     // 797\n  if (arguments.length === 1) selector = {};                                                                           // 799\n  return new Cursor(self, new CursorDescription(collectionName, selector, options));                                   // 802\n};                                                                                                                     // 804\n                                                                                                                       //\nMongoConnection.prototype.findOne = function (collection_name, selector, options) {                                    // 806\n  var self = this;                                                                                                     // 808\n  if (arguments.length === 1) selector = {};                                                                           // 809\n  options = options || {};                                                                                             // 812\n  options.limit = 1;                                                                                                   // 813\n  return self.find(collection_name, selector, options).fetch()[0];                                                     // 814\n}; // We'll actually design an index API later. For now, we just pass through to                                       // 815\n// Mongo's, but make it synchronous.                                                                                   // 818\n                                                                                                                       //\n                                                                                                                       //\nMongoConnection.prototype._ensureIndex = function (collectionName, index, options) {                                   // 819\n  var self = this; // We expect this function to be called at startup, not from within a method,                       // 821\n  // so we don't interact with the write fence.                                                                        // 824\n                                                                                                                       //\n  var collection = self.rawCollection(collectionName);                                                                 // 825\n  var future = new Future();                                                                                           // 826\n  var indexName = collection.ensureIndex(index, options, future.resolver());                                           // 827\n  future.wait();                                                                                                       // 828\n};                                                                                                                     // 829\n                                                                                                                       //\nMongoConnection.prototype._dropIndex = function (collectionName, index) {                                              // 830\n  var self = this; // This function is only used by test code, not within a method, so we don't                        // 831\n  // interact with the write fence.                                                                                    // 834\n                                                                                                                       //\n  var collection = self.rawCollection(collectionName);                                                                 // 835\n  var future = new Future();                                                                                           // 836\n  var indexName = collection.dropIndex(index, future.resolver());                                                      // 837\n  future.wait();                                                                                                       // 838\n}; // CURSORS                                                                                                          // 839\n// There are several classes which relate to cursors:                                                                  // 843\n//                                                                                                                     // 844\n// CursorDescription represents the arguments used to construct a cursor:                                              // 845\n// collectionName, selector, and (find) options.  Because it is used as a key                                          // 846\n// for cursor de-dup, everything in it should either be JSON-stringifiable or                                          // 847\n// not affect observeChanges output (eg, options.transform functions are not                                           // 848\n// stringifiable but do not affect observeChanges).                                                                    // 849\n//                                                                                                                     // 850\n// SynchronousCursor is a wrapper around a MongoDB cursor                                                              // 851\n// which includes fully-synchronous versions of forEach, etc.                                                          // 852\n//                                                                                                                     // 853\n// Cursor is the cursor object returned from find(), which implements the                                              // 854\n// documented Mongo.Collection cursor API.  It wraps a CursorDescription and a                                         // 855\n// SynchronousCursor (lazily: it doesn't contact Mongo until you call a method                                         // 856\n// like fetch or forEach on it).                                                                                       // 857\n//                                                                                                                     // 858\n// ObserveHandle is the \"observe handle\" returned from observeChanges. It has a                                        // 859\n// reference to an ObserveMultiplexer.                                                                                 // 860\n//                                                                                                                     // 861\n// ObserveMultiplexer allows multiple identical ObserveHandles to be driven by a                                       // 862\n// single observe driver.                                                                                              // 863\n//                                                                                                                     // 864\n// There are two \"observe drivers\" which drive ObserveMultiplexers:                                                    // 865\n//   - PollingObserveDriver caches the results of a query and reruns it when                                           // 866\n//     necessary.                                                                                                      // 867\n//   - OplogObserveDriver follows the Mongo operation log to directly observe                                          // 868\n//     database changes.                                                                                               // 869\n// Both implementations follow the same simple interface: when you create them,                                        // 870\n// they start sending observeChanges callbacks (and a ready() invocation) to                                           // 871\n// their ObserveMultiplexer, and you stop them by calling their stop() method.                                         // 872\n                                                                                                                       //\n                                                                                                                       //\nCursorDescription = function (collectionName, selector, options) {                                                     // 874\n  var self = this;                                                                                                     // 875\n  self.collectionName = collectionName;                                                                                // 876\n  self.selector = Mongo.Collection._rewriteSelector(selector);                                                         // 877\n  self.options = options || {};                                                                                        // 878\n};                                                                                                                     // 879\n                                                                                                                       //\nCursor = function (mongo, cursorDescription) {                                                                         // 881\n  var self = this;                                                                                                     // 882\n  self._mongo = mongo;                                                                                                 // 884\n  self._cursorDescription = cursorDescription;                                                                         // 885\n  self._synchronousCursor = null;                                                                                      // 886\n};                                                                                                                     // 887\n                                                                                                                       //\n_.each(['forEach', 'map', 'fetch', 'count'], function (method) {                                                       // 889\n  Cursor.prototype[method] = function () {                                                                             // 890\n    var self = this; // You can only observe a tailable cursor.                                                        // 891\n                                                                                                                       //\n    if (self._cursorDescription.options.tailable) throw new Error(\"Cannot call \" + method + \" on a tailable cursor\");  // 894\n                                                                                                                       //\n    if (!self._synchronousCursor) {                                                                                    // 897\n      self._synchronousCursor = self._mongo._createSynchronousCursor(self._cursorDescription, {                        // 898\n        // Make sure that the \"self\" argument to forEach/map callbacks is the                                          // 900\n        // Cursor, not the SynchronousCursor.                                                                          // 901\n        selfForIteration: self,                                                                                        // 902\n        useTransform: true                                                                                             // 903\n      });                                                                                                              // 899\n    }                                                                                                                  // 905\n                                                                                                                       //\n    return self._synchronousCursor[method].apply(self._synchronousCursor, arguments);                                  // 907\n  };                                                                                                                   // 909\n}); // Since we don't actually have a \"nextObject\" interface, there's really no                                        // 910\n// reason to have a \"rewind\" interface.  All it did was make multiple calls                                            // 913\n// to fetch/map/forEach return nothing the second time.                                                                // 914\n// XXX COMPAT WITH 0.8.1                                                                                               // 915\n                                                                                                                       //\n                                                                                                                       //\nCursor.prototype.rewind = function () {};                                                                              // 916\n                                                                                                                       //\nCursor.prototype.getTransform = function () {                                                                          // 919\n  return this._cursorDescription.options.transform;                                                                    // 920\n}; // When you call Meteor.publish() with a function that returns a Cursor, we need                                    // 921\n// to transmute it into the equivalent subscription.  This is the function that                                        // 924\n// does that.                                                                                                          // 925\n                                                                                                                       //\n                                                                                                                       //\nCursor.prototype._publishCursor = function (sub) {                                                                     // 927\n  var self = this;                                                                                                     // 928\n  var collection = self._cursorDescription.collectionName;                                                             // 929\n  return Mongo.Collection._publishCursor(self, sub, collection);                                                       // 930\n}; // Used to guarantee that publish functions return at most one cursor per                                           // 931\n// collection. Private, because we might later have cursors that include                                               // 934\n// documents from multiple collections somehow.                                                                        // 935\n                                                                                                                       //\n                                                                                                                       //\nCursor.prototype._getCollectionName = function () {                                                                    // 936\n  var self = this;                                                                                                     // 937\n  return self._cursorDescription.collectionName;                                                                       // 938\n};                                                                                                                     // 939\n                                                                                                                       //\nCursor.prototype.observe = function (callbacks) {                                                                      // 941\n  var self = this;                                                                                                     // 942\n  return LocalCollection._observeFromObserveChanges(self, callbacks);                                                  // 943\n};                                                                                                                     // 944\n                                                                                                                       //\nCursor.prototype.observeChanges = function (callbacks) {                                                               // 946\n  var self = this;                                                                                                     // 947\n                                                                                                                       //\n  var ordered = LocalCollection._observeChangesCallbacksAreOrdered(callbacks);                                         // 948\n                                                                                                                       //\n  return self._mongo._observeChanges(self._cursorDescription, ordered, callbacks);                                     // 949\n};                                                                                                                     // 951\n                                                                                                                       //\nMongoConnection.prototype._createSynchronousCursor = function (cursorDescription, options) {                           // 953\n  var self = this;                                                                                                     // 955\n  options = _.pick(options || {}, 'selfForIteration', 'useTransform');                                                 // 956\n  var collection = self.rawCollection(cursorDescription.collectionName);                                               // 958\n  var cursorOptions = cursorDescription.options;                                                                       // 959\n  var mongoOptions = {                                                                                                 // 960\n    sort: cursorOptions.sort,                                                                                          // 961\n    limit: cursorOptions.limit,                                                                                        // 962\n    skip: cursorOptions.skip                                                                                           // 963\n  }; // Do we want a tailable cursor (which only works on capped collections)?                                         // 960\n                                                                                                                       //\n  if (cursorOptions.tailable) {                                                                                        // 967\n    // We want a tailable cursor...                                                                                    // 968\n    mongoOptions.tailable = true; // ... and for the server to wait a bit if any getMore has no data (rather           // 969\n    // than making us put the relevant sleeps in the client)...                                                        // 971\n                                                                                                                       //\n    mongoOptions.awaitdata = true; // ... and to keep querying the server indefinitely rather than just 5 times        // 972\n    // if there's no more data.                                                                                        // 974\n                                                                                                                       //\n    mongoOptions.numberOfRetries = -1; // And if this is on the oplog collection and the cursor specifies a 'ts',      // 975\n    // then set the undocumented oplog replay flag, which does a special scan to                                       // 977\n    // find the first document (instead of creating an index on ts). This is a                                         // 978\n    // very hard-coded Mongo flag which only works on the oplog collection and                                         // 979\n    // only works with the ts field.                                                                                   // 980\n                                                                                                                       //\n    if (cursorDescription.collectionName === OPLOG_COLLECTION && cursorDescription.selector.ts) {                      // 981\n      mongoOptions.oplogReplay = true;                                                                                 // 983\n    }                                                                                                                  // 984\n  }                                                                                                                    // 985\n                                                                                                                       //\n  var dbCursor = collection.find(replaceTypes(cursorDescription.selector, replaceMeteorAtomWithMongo), cursorOptions.fields, mongoOptions);\n  return new SynchronousCursor(dbCursor, cursorDescription, options);                                                  // 991\n};                                                                                                                     // 992\n                                                                                                                       //\nvar SynchronousCursor = function (dbCursor, cursorDescription, options) {                                              // 994\n  var self = this;                                                                                                     // 995\n  options = _.pick(options || {}, 'selfForIteration', 'useTransform');                                                 // 996\n  self._dbCursor = dbCursor;                                                                                           // 998\n  self._cursorDescription = cursorDescription; // The \"self\" argument passed to forEach/map callbacks. If we're wrapped\n  // inside a user-visible Cursor, we want to provide the outer cursor!                                                // 1001\n                                                                                                                       //\n  self._selfForIteration = options.selfForIteration || self;                                                           // 1002\n                                                                                                                       //\n  if (options.useTransform && cursorDescription.options.transform) {                                                   // 1003\n    self._transform = LocalCollection.wrapTransform(cursorDescription.options.transform);                              // 1004\n  } else {                                                                                                             // 1006\n    self._transform = null;                                                                                            // 1007\n  } // Need to specify that the callback is the first argument to nextObject,                                          // 1008\n  // since otherwise when we try to call it with no args the driver will                                               // 1011\n  // interpret \"undefined\" first arg as an options hash and crash.                                                     // 1012\n                                                                                                                       //\n                                                                                                                       //\n  self._synchronousNextObject = Future.wrap(dbCursor.nextObject.bind(dbCursor), 0);                                    // 1013\n  self._synchronousCount = Future.wrap(dbCursor.count.bind(dbCursor));                                                 // 1015\n  self._visitedIds = new LocalCollection._IdMap();                                                                     // 1016\n};                                                                                                                     // 1017\n                                                                                                                       //\n_.extend(SynchronousCursor.prototype, {                                                                                // 1019\n  _nextObject: function () {                                                                                           // 1020\n    var self = this;                                                                                                   // 1021\n                                                                                                                       //\n    while (true) {                                                                                                     // 1023\n      var doc = self._synchronousNextObject().wait();                                                                  // 1024\n                                                                                                                       //\n      if (!doc) return null;                                                                                           // 1026\n      doc = replaceTypes(doc, replaceMongoAtomWithMeteor);                                                             // 1027\n                                                                                                                       //\n      if (!self._cursorDescription.options.tailable && _.has(doc, '_id')) {                                            // 1029\n        // Did Mongo give us duplicate documents in the same cursor? If so,                                            // 1030\n        // ignore this one. (Do this before the transform, since transform might                                       // 1031\n        // return some unrelated value.) We don't do this for tailable cursors,                                        // 1032\n        // because we want to maintain O(1) memory usage. And if there isn't _id                                       // 1033\n        // for some reason (maybe it's the oplog), then we don't do this either.                                       // 1034\n        // (Be careful to do this for falsey but existing _id, though.)                                                // 1035\n        if (self._visitedIds.has(doc._id)) continue;                                                                   // 1036\n                                                                                                                       //\n        self._visitedIds.set(doc._id, true);                                                                           // 1037\n      }                                                                                                                // 1038\n                                                                                                                       //\n      if (self._transform) doc = self._transform(doc);                                                                 // 1040\n      return doc;                                                                                                      // 1043\n    }                                                                                                                  // 1044\n  },                                                                                                                   // 1045\n  forEach: function (callback, thisArg) {                                                                              // 1047\n    var self = this; // Get back to the beginning.                                                                     // 1048\n                                                                                                                       //\n    self._rewind(); // We implement the loop ourself instead of using self._dbCursor.each,                             // 1051\n    // because \"each\" will call its callback outside of a fiber which makes it                                         // 1054\n    // much more complex to make this function synchronous.                                                            // 1055\n                                                                                                                       //\n                                                                                                                       //\n    var index = 0;                                                                                                     // 1056\n                                                                                                                       //\n    while (true) {                                                                                                     // 1057\n      var doc = self._nextObject();                                                                                    // 1058\n                                                                                                                       //\n      if (!doc) return;                                                                                                // 1059\n      callback.call(thisArg, doc, index++, self._selfForIteration);                                                    // 1060\n    }                                                                                                                  // 1061\n  },                                                                                                                   // 1062\n  // XXX Allow overlapping callback executions if callback yields.                                                     // 1064\n  map: function (callback, thisArg) {                                                                                  // 1065\n    var self = this;                                                                                                   // 1066\n    var res = [];                                                                                                      // 1067\n    self.forEach(function (doc, index) {                                                                               // 1068\n      res.push(callback.call(thisArg, doc, index, self._selfForIteration));                                            // 1069\n    });                                                                                                                // 1070\n    return res;                                                                                                        // 1071\n  },                                                                                                                   // 1072\n  _rewind: function () {                                                                                               // 1074\n    var self = this; // known to be synchronous                                                                        // 1075\n                                                                                                                       //\n    self._dbCursor.rewind();                                                                                           // 1078\n                                                                                                                       //\n    self._visitedIds = new LocalCollection._IdMap();                                                                   // 1080\n  },                                                                                                                   // 1081\n  // Mostly usable for tailable cursors.                                                                               // 1083\n  close: function () {                                                                                                 // 1084\n    var self = this;                                                                                                   // 1085\n                                                                                                                       //\n    self._dbCursor.close();                                                                                            // 1087\n  },                                                                                                                   // 1088\n  fetch: function () {                                                                                                 // 1090\n    var self = this;                                                                                                   // 1091\n    return self.map(_.identity);                                                                                       // 1092\n  },                                                                                                                   // 1093\n  count: function () {                                                                                                 // 1095\n    var applySkipLimit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;                    // 1095\n    var self = this;                                                                                                   // 1096\n    return self._synchronousCount(applySkipLimit).wait();                                                              // 1097\n  },                                                                                                                   // 1098\n  // This method is NOT wrapped in Cursor.                                                                             // 1100\n  getRawObjects: function (ordered) {                                                                                  // 1101\n    var self = this;                                                                                                   // 1102\n                                                                                                                       //\n    if (ordered) {                                                                                                     // 1103\n      return self.fetch();                                                                                             // 1104\n    } else {                                                                                                           // 1105\n      var results = new LocalCollection._IdMap();                                                                      // 1106\n      self.forEach(function (doc) {                                                                                    // 1107\n        results.set(doc._id, doc);                                                                                     // 1108\n      });                                                                                                              // 1109\n      return results;                                                                                                  // 1110\n    }                                                                                                                  // 1111\n  }                                                                                                                    // 1112\n});                                                                                                                    // 1019\n                                                                                                                       //\nMongoConnection.prototype.tail = function (cursorDescription, docCallback) {                                           // 1115\n  var self = this;                                                                                                     // 1116\n  if (!cursorDescription.options.tailable) throw new Error(\"Can only tail a tailable cursor\");                         // 1117\n                                                                                                                       //\n  var cursor = self._createSynchronousCursor(cursorDescription);                                                       // 1120\n                                                                                                                       //\n  var stopped = false;                                                                                                 // 1122\n  var lastTS;                                                                                                          // 1123\n                                                                                                                       //\n  var loop = function () {                                                                                             // 1124\n    var doc = null;                                                                                                    // 1125\n                                                                                                                       //\n    while (true) {                                                                                                     // 1126\n      if (stopped) return;                                                                                             // 1127\n                                                                                                                       //\n      try {                                                                                                            // 1129\n        doc = cursor._nextObject();                                                                                    // 1130\n      } catch (err) {                                                                                                  // 1131\n        // There's no good way to figure out if this was actually an error                                             // 1132\n        // from Mongo. Ah well. But either way, we need to retry the cursor                                            // 1133\n        // (unless the failure was because the observe got stopped).                                                   // 1134\n        doc = null;                                                                                                    // 1135\n      } // Since cursor._nextObject can yield, we need to check again to see if                                        // 1136\n      // we've been stopped before calling the callback.                                                               // 1138\n                                                                                                                       //\n                                                                                                                       //\n      if (stopped) return;                                                                                             // 1139\n                                                                                                                       //\n      if (doc) {                                                                                                       // 1141\n        // If a tailable cursor contains a \"ts\" field, use it to recreate the                                          // 1142\n        // cursor on error. (\"ts\" is a standard that Mongo uses internally for                                         // 1143\n        // the oplog, and there's a special flag that lets you do binary search                                        // 1144\n        // on it instead of needing to use an index.)                                                                  // 1145\n        lastTS = doc.ts;                                                                                               // 1146\n        docCallback(doc);                                                                                              // 1147\n      } else {                                                                                                         // 1148\n        var newSelector = _.clone(cursorDescription.selector);                                                         // 1149\n                                                                                                                       //\n        if (lastTS) {                                                                                                  // 1150\n          newSelector.ts = {                                                                                           // 1151\n            $gt: lastTS                                                                                                // 1151\n          };                                                                                                           // 1151\n        }                                                                                                              // 1152\n                                                                                                                       //\n        cursor = self._createSynchronousCursor(new CursorDescription(cursorDescription.collectionName, newSelector, cursorDescription.options)); // Mongo failover takes many seconds.  Retry in a bit.  (Without this\n        // setTimeout, we peg the CPU at 100% and never notice the actual                                              // 1158\n        // failover.                                                                                                   // 1159\n                                                                                                                       //\n        Meteor.setTimeout(loop, 100);                                                                                  // 1160\n        break;                                                                                                         // 1161\n      }                                                                                                                // 1162\n    }                                                                                                                  // 1163\n  };                                                                                                                   // 1164\n                                                                                                                       //\n  Meteor.defer(loop);                                                                                                  // 1166\n  return {                                                                                                             // 1168\n    stop: function () {                                                                                                // 1169\n      stopped = true;                                                                                                  // 1170\n      cursor.close();                                                                                                  // 1171\n    }                                                                                                                  // 1172\n  };                                                                                                                   // 1168\n};                                                                                                                     // 1174\n                                                                                                                       //\nMongoConnection.prototype._observeChanges = function (cursorDescription, ordered, callbacks) {                         // 1176\n  var self = this;                                                                                                     // 1178\n                                                                                                                       //\n  if (cursorDescription.options.tailable) {                                                                            // 1180\n    return self._observeChangesTailable(cursorDescription, ordered, callbacks);                                        // 1181\n  } // You may not filter out _id when observing changes, because the id is a core                                     // 1182\n  // part of the observeChanges API.                                                                                   // 1185\n                                                                                                                       //\n                                                                                                                       //\n  if (cursorDescription.options.fields && (cursorDescription.options.fields._id === 0 || cursorDescription.options.fields._id === false)) {\n    throw Error(\"You may not observe a cursor with {fields: {_id: 0}}\");                                               // 1189\n  }                                                                                                                    // 1190\n                                                                                                                       //\n  var observeKey = JSON.stringify(_.extend({                                                                           // 1192\n    ordered: ordered                                                                                                   // 1193\n  }, cursorDescription));                                                                                              // 1193\n  var multiplexer, observeDriver;                                                                                      // 1195\n  var firstHandle = false; // Find a matching ObserveMultiplexer, or create a new one. This next block is              // 1196\n  // guaranteed to not yield (and it doesn't call anything that can observe a                                          // 1199\n  // new query), so no other calls to this function can interleave with it.                                            // 1200\n                                                                                                                       //\n  Meteor._noYieldsAllowed(function () {                                                                                // 1201\n    if (_.has(self._observeMultiplexers, observeKey)) {                                                                // 1202\n      multiplexer = self._observeMultiplexers[observeKey];                                                             // 1203\n    } else {                                                                                                           // 1204\n      firstHandle = true; // Create a new ObserveMultiplexer.                                                          // 1205\n                                                                                                                       //\n      multiplexer = new ObserveMultiplexer({                                                                           // 1207\n        ordered: ordered,                                                                                              // 1208\n        onStop: function () {                                                                                          // 1209\n          delete self._observeMultiplexers[observeKey];                                                                // 1210\n          observeDriver.stop();                                                                                        // 1211\n        }                                                                                                              // 1212\n      });                                                                                                              // 1207\n      self._observeMultiplexers[observeKey] = multiplexer;                                                             // 1214\n    }                                                                                                                  // 1215\n  });                                                                                                                  // 1216\n                                                                                                                       //\n  var observeHandle = new ObserveHandle(multiplexer, callbacks);                                                       // 1218\n                                                                                                                       //\n  if (firstHandle) {                                                                                                   // 1220\n    var matcher, sorter;                                                                                               // 1221\n                                                                                                                       //\n    var canUseOplog = _.all([function () {                                                                             // 1222\n      // At a bare minimum, using the oplog requires us to have an oplog, to                                           // 1224\n      // want unordered callbacks, and to not want a callback on the polls                                             // 1225\n      // that won't happen.                                                                                            // 1226\n      return self._oplogHandle && !ordered && !callbacks._testOnlyPollCallback;                                        // 1227\n    }, function () {                                                                                                   // 1229\n      // We need to be able to compile the selector. Fall back to polling for                                          // 1230\n      // some newfangled $selector that minimongo doesn't support yet.                                                 // 1231\n      try {                                                                                                            // 1232\n        matcher = new Minimongo.Matcher(cursorDescription.selector);                                                   // 1233\n        return true;                                                                                                   // 1234\n      } catch (e) {                                                                                                    // 1235\n        // XXX make all compilation errors MinimongoError or something                                                 // 1236\n        //     so that this doesn't ignore unrelated exceptions                                                        // 1237\n        return false;                                                                                                  // 1238\n      }                                                                                                                // 1239\n    }, function () {                                                                                                   // 1240\n      // ... and the selector itself needs to support oplog.                                                           // 1241\n      return OplogObserveDriver.cursorSupported(cursorDescription, matcher);                                           // 1242\n    }, function () {                                                                                                   // 1243\n      // And we need to be able to compile the sort, if any.  eg, can't be                                             // 1244\n      // {$natural: 1}.                                                                                                // 1245\n      if (!cursorDescription.options.sort) return true;                                                                // 1246\n                                                                                                                       //\n      try {                                                                                                            // 1248\n        sorter = new Minimongo.Sorter(cursorDescription.options.sort, {                                                // 1249\n          matcher: matcher                                                                                             // 1250\n        });                                                                                                            // 1250\n        return true;                                                                                                   // 1251\n      } catch (e) {                                                                                                    // 1252\n        // XXX make all compilation errors MinimongoError or something                                                 // 1253\n        //     so that this doesn't ignore unrelated exceptions                                                        // 1254\n        return false;                                                                                                  // 1255\n      }                                                                                                                // 1256\n    }], function (f) {                                                                                                 // 1257\n      return f();                                                                                                      // 1257\n    }); // invoke each function                                                                                        // 1257\n                                                                                                                       //\n                                                                                                                       //\n    var driverClass = canUseOplog ? OplogObserveDriver : PollingObserveDriver;                                         // 1259\n    observeDriver = new driverClass({                                                                                  // 1260\n      cursorDescription: cursorDescription,                                                                            // 1261\n      mongoHandle: self,                                                                                               // 1262\n      multiplexer: multiplexer,                                                                                        // 1263\n      ordered: ordered,                                                                                                // 1264\n      matcher: matcher,                                                                                                // 1265\n      // ignored by polling                                                                                            // 1265\n      sorter: sorter,                                                                                                  // 1266\n      // ignored by polling                                                                                            // 1266\n      _testOnlyPollCallback: callbacks._testOnlyPollCallback                                                           // 1267\n    }); // This field is only set for use in tests.                                                                    // 1260\n                                                                                                                       //\n    multiplexer._observeDriver = observeDriver;                                                                        // 1271\n  } // Blocks until the initial adds have been sent.                                                                   // 1272\n                                                                                                                       //\n                                                                                                                       //\n  multiplexer.addHandleAndSendInitialAdds(observeHandle);                                                              // 1275\n  return observeHandle;                                                                                                // 1277\n}; // Listen for the invalidation messages that will trigger us to poll the                                            // 1278\n// database for changes. If this selector specifies specific IDs, specify them                                         // 1281\n// here, so that updates to different specific IDs don't cause us to poll.                                             // 1282\n// listenCallback is the same kind of (notification, complete) callback passed                                         // 1283\n// to InvalidationCrossbar.listen.                                                                                     // 1284\n                                                                                                                       //\n                                                                                                                       //\nlistenAll = function (cursorDescription, listenCallback) {                                                             // 1286\n  var listeners = [];                                                                                                  // 1287\n  forEachTrigger(cursorDescription, function (trigger) {                                                               // 1288\n    listeners.push(DDPServer._InvalidationCrossbar.listen(trigger, listenCallback));                                   // 1289\n  });                                                                                                                  // 1291\n  return {                                                                                                             // 1293\n    stop: function () {                                                                                                // 1294\n      _.each(listeners, function (listener) {                                                                          // 1295\n        listener.stop();                                                                                               // 1296\n      });                                                                                                              // 1297\n    }                                                                                                                  // 1298\n  };                                                                                                                   // 1293\n};                                                                                                                     // 1300\n                                                                                                                       //\nforEachTrigger = function (cursorDescription, triggerCallback) {                                                       // 1302\n  var key = {                                                                                                          // 1303\n    collection: cursorDescription.collectionName                                                                       // 1303\n  };                                                                                                                   // 1303\n                                                                                                                       //\n  var specificIds = LocalCollection._idsMatchedBySelector(cursorDescription.selector);                                 // 1304\n                                                                                                                       //\n  if (specificIds) {                                                                                                   // 1306\n    _.each(specificIds, function (id) {                                                                                // 1307\n      triggerCallback(_.extend({                                                                                       // 1308\n        id: id                                                                                                         // 1308\n      }, key));                                                                                                        // 1308\n    });                                                                                                                // 1309\n                                                                                                                       //\n    triggerCallback(_.extend({                                                                                         // 1310\n      dropCollection: true,                                                                                            // 1310\n      id: null                                                                                                         // 1310\n    }, key));                                                                                                          // 1310\n  } else {                                                                                                             // 1311\n    triggerCallback(key);                                                                                              // 1312\n  } // Everyone cares about the database being dropped.                                                                // 1313\n                                                                                                                       //\n                                                                                                                       //\n  triggerCallback({                                                                                                    // 1315\n    dropDatabase: true                                                                                                 // 1315\n  });                                                                                                                  // 1315\n}; // observeChanges for tailable cursors on capped collections.                                                       // 1316\n//                                                                                                                     // 1319\n// Some differences from normal cursors:                                                                               // 1320\n//   - Will never produce anything other than 'added' or 'addedBefore'. If you                                         // 1321\n//     do update a document that has already been produced, this will not notice                                       // 1322\n//     it.                                                                                                             // 1323\n//   - If you disconnect and reconnect from Mongo, it will essentially restart                                         // 1324\n//     the query, which will lead to duplicate results. This is pretty bad,                                            // 1325\n//     but if you include a field called 'ts' which is inserted as                                                     // 1326\n//     new MongoInternals.MongoTimestamp(0, 0) (which is initialized to the                                            // 1327\n//     current Mongo-style timestamp), we'll be able to find the place to                                              // 1328\n//     restart properly. (This field is specifically understood by Mongo with an                                       // 1329\n//     optimization which allows it to find the right place to start without                                           // 1330\n//     an index on ts. It's how the oplog works.)                                                                      // 1331\n//   - No callbacks are triggered synchronously with the call (there's no                                              // 1332\n//     differentiation between \"initial data\" and \"later changes\"; everything                                          // 1333\n//     that matches the query gets sent asynchronously).                                                               // 1334\n//   - De-duplication is not implemented.                                                                              // 1335\n//   - Does not yet interact with the write fence. Probably, this should work by                                       // 1336\n//     ignoring removes (which don't work on capped collections) and updates                                           // 1337\n//     (which don't affect tailable cursors), and just keeping track of the ID                                         // 1338\n//     of the inserted object, and closing the write fence once you get to that                                        // 1339\n//     ID (or timestamp?).  This doesn't work well if the document doesn't match                                       // 1340\n//     the query, though.  On the other hand, the write fence can close                                                // 1341\n//     immediately if it does not match the query. So if we trust minimongo                                            // 1342\n//     enough to accurately evaluate the query against the write fence, we                                             // 1343\n//     should be able to do this...  Of course, minimongo doesn't even support                                         // 1344\n//     Mongo Timestamps yet.                                                                                           // 1345\n                                                                                                                       //\n                                                                                                                       //\nMongoConnection.prototype._observeChangesTailable = function (cursorDescription, ordered, callbacks) {                 // 1346\n  var self = this; // Tailable cursors only ever call added/addedBefore callbacks, so it's an                          // 1348\n  // error if you didn't provide them.                                                                                 // 1351\n                                                                                                                       //\n  if (ordered && !callbacks.addedBefore || !ordered && !callbacks.added) {                                             // 1352\n    throw new Error(\"Can't observe an \" + (ordered ? \"ordered\" : \"unordered\") + \" tailable cursor without a \" + (ordered ? \"addedBefore\" : \"added\") + \" callback\");\n  }                                                                                                                    // 1357\n                                                                                                                       //\n  return self.tail(cursorDescription, function (doc) {                                                                 // 1359\n    var id = doc._id;                                                                                                  // 1360\n    delete doc._id; // The ts is an implementation detail. Hide it.                                                    // 1361\n                                                                                                                       //\n    delete doc.ts;                                                                                                     // 1363\n                                                                                                                       //\n    if (ordered) {                                                                                                     // 1364\n      callbacks.addedBefore(id, doc, null);                                                                            // 1365\n    } else {                                                                                                           // 1366\n      callbacks.added(id, doc);                                                                                        // 1367\n    }                                                                                                                  // 1368\n  });                                                                                                                  // 1369\n}; // XXX We probably need to find a better way to expose this. Right now                                              // 1370\n// it's only used by tests, but in fact you need it in normal                                                          // 1373\n// operation to interact with capped collections.                                                                      // 1374\n                                                                                                                       //\n                                                                                                                       //\nMongoInternals.MongoTimestamp = MongoDB.Timestamp;                                                                     // 1375\nMongoInternals.Connection = MongoConnection;                                                                           // 1377\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"oplog_tailing.js\":function(require){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/mongo/oplog_tailing.js                                                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar Future = Npm.require('fibers/future');                                                                             // 1\n                                                                                                                       //\nOPLOG_COLLECTION = 'oplog.rs';                                                                                         // 3\nvar TOO_FAR_BEHIND = process.env.METEOR_OPLOG_TOO_FAR_BEHIND || 2000;                                                  // 5\n                                                                                                                       //\nvar showTS = function (ts) {                                                                                           // 7\n  return \"Timestamp(\" + ts.getHighBits() + \", \" + ts.getLowBits() + \")\";                                               // 8\n};                                                                                                                     // 9\n                                                                                                                       //\nidForOp = function (op) {                                                                                              // 11\n  if (op.op === 'd') return op.o._id;else if (op.op === 'i') return op.o._id;else if (op.op === 'u') return op.o2._id;else if (op.op === 'c') throw Error(\"Operator 'c' doesn't supply an object with id: \" + EJSON.stringify(op));else throw Error(\"Unknown op: \" + EJSON.stringify(op));\n};                                                                                                                     // 23\n                                                                                                                       //\nOplogHandle = function (oplogUrl, dbName) {                                                                            // 25\n  var self = this;                                                                                                     // 26\n  self._oplogUrl = oplogUrl;                                                                                           // 27\n  self._dbName = dbName;                                                                                               // 28\n  self._oplogLastEntryConnection = null;                                                                               // 30\n  self._oplogTailConnection = null;                                                                                    // 31\n  self._stopped = false;                                                                                               // 32\n  self._tailHandle = null;                                                                                             // 33\n  self._readyFuture = new Future();                                                                                    // 34\n  self._crossbar = new DDPServer._Crossbar({                                                                           // 35\n    factPackage: \"mongo-livedata\",                                                                                     // 36\n    factName: \"oplog-watchers\"                                                                                         // 36\n  });                                                                                                                  // 35\n  self._baseOplogSelector = {                                                                                          // 38\n    ns: new RegExp('^' + Meteor._escapeRegExp(self._dbName) + '\\\\.'),                                                  // 39\n    $or: [{                                                                                                            // 40\n      op: {                                                                                                            // 41\n        $in: ['i', 'u', 'd']                                                                                           // 41\n      }                                                                                                                // 41\n    }, // drop collection                                                                                              // 41\n    {                                                                                                                  // 43\n      op: 'c',                                                                                                         // 43\n      'o.drop': {                                                                                                      // 43\n        $exists: true                                                                                                  // 43\n      }                                                                                                                // 43\n    }, {                                                                                                               // 43\n      op: 'c',                                                                                                         // 44\n      'o.dropDatabase': 1                                                                                              // 44\n    }]                                                                                                                 // 44\n  }; // Data structures to support waitUntilCaughtUp(). Each oplog entry has a                                         // 38\n  // MongoTimestamp object on it (which is not the same as a Date --- it's a                                           // 49\n  // combination of time and an incrementing counter; see                                                              // 50\n  // http://docs.mongodb.org/manual/reference/bson-types/#timestamps).                                                 // 51\n  //                                                                                                                   // 52\n  // _catchingUpFutures is an array of {ts: MongoTimestamp, future: Future}                                            // 53\n  // objects, sorted by ascending timestamp. _lastProcessedTS is the                                                   // 54\n  // MongoTimestamp of the last oplog entry we've processed.                                                           // 55\n  //                                                                                                                   // 56\n  // Each time we call waitUntilCaughtUp, we take a peek at the final oplog                                            // 57\n  // entry in the db.  If we've already processed it (ie, it is not greater than                                       // 58\n  // _lastProcessedTS), waitUntilCaughtUp immediately returns. Otherwise,                                              // 59\n  // waitUntilCaughtUp makes a new Future and inserts it along with the final                                          // 60\n  // timestamp entry that it read, into _catchingUpFutures. waitUntilCaughtUp                                          // 61\n  // then waits on that future, which is resolved once _lastProcessedTS is                                             // 62\n  // incremented to be past its timestamp by the worker fiber.                                                         // 63\n  //                                                                                                                   // 64\n  // XXX use a priority queue or something else that's faster than an array                                            // 65\n                                                                                                                       //\n  self._catchingUpFutures = [];                                                                                        // 66\n  self._lastProcessedTS = null;                                                                                        // 67\n  self._onSkippedEntriesHook = new Hook({                                                                              // 69\n    debugPrintExceptions: \"onSkippedEntries callback\"                                                                  // 70\n  });                                                                                                                  // 69\n  self._entryQueue = new Meteor._DoubleEndedQueue();                                                                   // 73\n  self._workerActive = false;                                                                                          // 74\n                                                                                                                       //\n  self._startTailing();                                                                                                // 76\n};                                                                                                                     // 77\n                                                                                                                       //\n_.extend(OplogHandle.prototype, {                                                                                      // 79\n  stop: function () {                                                                                                  // 80\n    var self = this;                                                                                                   // 81\n    if (self._stopped) return;                                                                                         // 82\n    self._stopped = true;                                                                                              // 84\n    if (self._tailHandle) self._tailHandle.stop(); // XXX should close connections too                                 // 85\n  },                                                                                                                   // 88\n  onOplogEntry: function (trigger, callback) {                                                                         // 89\n    var self = this;                                                                                                   // 90\n    if (self._stopped) throw new Error(\"Called onOplogEntry on stopped handle!\"); // Calling onOplogEntry requires us to wait for the tailing to be ready.\n                                                                                                                       //\n    self._readyFuture.wait();                                                                                          // 95\n                                                                                                                       //\n    var originalCallback = callback;                                                                                   // 97\n    callback = Meteor.bindEnvironment(function (notification) {                                                        // 98\n      // XXX can we avoid this clone by making oplog.js careful?                                                       // 99\n      originalCallback(EJSON.clone(notification));                                                                     // 100\n    }, function (err) {                                                                                                // 101\n      Meteor._debug(\"Error in oplog callback\", err.stack);                                                             // 102\n    });                                                                                                                // 103\n                                                                                                                       //\n    var listenHandle = self._crossbar.listen(trigger, callback);                                                       // 104\n                                                                                                                       //\n    return {                                                                                                           // 105\n      stop: function () {                                                                                              // 106\n        listenHandle.stop();                                                                                           // 107\n      }                                                                                                                // 108\n    };                                                                                                                 // 105\n  },                                                                                                                   // 110\n  // Register a callback to be invoked any time we skip oplog entries (eg,                                             // 111\n  // because we are too far behind).                                                                                   // 112\n  onSkippedEntries: function (callback) {                                                                              // 113\n    var self = this;                                                                                                   // 114\n    if (self._stopped) throw new Error(\"Called onSkippedEntries on stopped handle!\");                                  // 115\n    return self._onSkippedEntriesHook.register(callback);                                                              // 117\n  },                                                                                                                   // 118\n  // Calls `callback` once the oplog has been processed up to a point that is                                          // 119\n  // roughly \"now\": specifically, once we've processed all ops that are                                                // 120\n  // currently visible.                                                                                                // 121\n  // XXX become convinced that this is actually safe even if oplogConnection                                           // 122\n  // is some kind of pool                                                                                              // 123\n  waitUntilCaughtUp: function () {                                                                                     // 124\n    var self = this;                                                                                                   // 125\n    if (self._stopped) throw new Error(\"Called waitUntilCaughtUp on stopped handle!\"); // Calling waitUntilCaughtUp requries us to wait for the oplog connection to\n    // be ready.                                                                                                       // 130\n                                                                                                                       //\n    self._readyFuture.wait();                                                                                          // 131\n                                                                                                                       //\n    var lastEntry;                                                                                                     // 132\n                                                                                                                       //\n    while (!self._stopped) {                                                                                           // 134\n      // We need to make the selector at least as restrictive as the actual                                            // 135\n      // tailing selector (ie, we need to specify the DB name) or else we might                                        // 136\n      // find a TS that won't show up in the actual tail stream.                                                       // 137\n      try {                                                                                                            // 138\n        lastEntry = self._oplogLastEntryConnection.findOne(OPLOG_COLLECTION, self._baseOplogSelector, {                // 139\n          fields: {                                                                                                    // 141\n            ts: 1                                                                                                      // 141\n          },                                                                                                           // 141\n          sort: {                                                                                                      // 141\n            $natural: -1                                                                                               // 141\n          }                                                                                                            // 141\n        });                                                                                                            // 141\n        break;                                                                                                         // 142\n      } catch (e) {                                                                                                    // 143\n        // During failover (eg) if we get an exception we should log and retry                                         // 144\n        // instead of crashing.                                                                                        // 145\n        Meteor._debug(\"Got exception while reading last entry: \" + e);                                                 // 146\n                                                                                                                       //\n        Meteor._sleepForMs(100);                                                                                       // 147\n      }                                                                                                                // 148\n    }                                                                                                                  // 149\n                                                                                                                       //\n    if (self._stopped) return;                                                                                         // 151\n                                                                                                                       //\n    if (!lastEntry) {                                                                                                  // 154\n      // Really, nothing in the oplog? Well, we've processed everything.                                               // 155\n      return;                                                                                                          // 156\n    }                                                                                                                  // 157\n                                                                                                                       //\n    var ts = lastEntry.ts;                                                                                             // 159\n    if (!ts) throw Error(\"oplog entry without ts: \" + EJSON.stringify(lastEntry));                                     // 160\n                                                                                                                       //\n    if (self._lastProcessedTS && ts.lessThanOrEqual(self._lastProcessedTS)) {                                          // 163\n      // We've already caught up to here.                                                                              // 164\n      return;                                                                                                          // 165\n    } // Insert the future into our list. Almost always, this will be at the end,                                      // 166\n    // but it's conceivable that if we fail over from one primary to another,                                          // 170\n    // the oplog entries we see will go backwards.                                                                     // 171\n                                                                                                                       //\n                                                                                                                       //\n    var insertAfter = self._catchingUpFutures.length;                                                                  // 172\n                                                                                                                       //\n    while (insertAfter - 1 > 0 && self._catchingUpFutures[insertAfter - 1].ts.greaterThan(ts)) {                       // 173\n      insertAfter--;                                                                                                   // 174\n    }                                                                                                                  // 175\n                                                                                                                       //\n    var f = new Future();                                                                                              // 176\n                                                                                                                       //\n    self._catchingUpFutures.splice(insertAfter, 0, {                                                                   // 177\n      ts: ts,                                                                                                          // 177\n      future: f                                                                                                        // 177\n    });                                                                                                                // 177\n                                                                                                                       //\n    f.wait();                                                                                                          // 178\n  },                                                                                                                   // 179\n  _startTailing: function () {                                                                                         // 180\n    var self = this; // First, make sure that we're talking to the local database.                                     // 181\n                                                                                                                       //\n    var mongodbUri = Npm.require('mongodb-uri');                                                                       // 183\n                                                                                                                       //\n    if (mongodbUri.parse(self._oplogUrl).database !== 'local') {                                                       // 184\n      throw Error(\"$MONGO_OPLOG_URL must be set to the 'local' database of \" + \"a Mongo replica set\");                 // 185\n    } // We make two separate connections to Mongo. The Node Mongo driver                                              // 187\n    // implements a naive round-robin connection pool: each \"connection\" is a                                          // 190\n    // pool of several (5 by default) TCP connections, and each request is                                             // 191\n    // rotated through the pools. Tailable cursor queries block on the server                                          // 192\n    // until there is some data to return (or until a few seconds have                                                 // 193\n    // passed). So if the connection pool used for tailing cursors is the same                                         // 194\n    // pool used for other queries, the other queries will be delayed by seconds                                       // 195\n    // 1/5 of the time.                                                                                                // 196\n    //                                                                                                                 // 197\n    // The tail connection will only ever be running a single tail command, so                                         // 198\n    // it only needs to make one underlying TCP connection.                                                            // 199\n                                                                                                                       //\n                                                                                                                       //\n    self._oplogTailConnection = new MongoConnection(self._oplogUrl, {                                                  // 200\n      poolSize: 1                                                                                                      // 201\n    }); // XXX better docs, but: it's to get monotonic results                                                         // 201\n    // XXX is it safe to say \"if there's an in flight query, just use its                                              // 203\n    //     results\"? I don't think so but should consider that                                                         // 204\n                                                                                                                       //\n    self._oplogLastEntryConnection = new MongoConnection(self._oplogUrl, {                                             // 205\n      poolSize: 1                                                                                                      // 206\n    }); // Now, make sure that there actually is a repl set here. If not, oplog                                        // 206\n    // tailing won't ever find anything!                                                                               // 209\n    // More on the isMasterDoc                                                                                         // 210\n    // https://docs.mongodb.com/manual/reference/command/isMaster/                                                     // 211\n                                                                                                                       //\n    var f = new Future();                                                                                              // 212\n                                                                                                                       //\n    self._oplogLastEntryConnection.db.admin().command({                                                                // 213\n      ismaster: 1                                                                                                      // 214\n    }, f.resolver());                                                                                                  // 214\n                                                                                                                       //\n    var isMasterDoc = f.wait();                                                                                        // 215\n                                                                                                                       //\n    if (!(isMasterDoc && isMasterDoc.setName)) {                                                                       // 217\n      throw Error(\"$MONGO_OPLOG_URL must be set to the 'local' database of \" + \"a Mongo replica set\");                 // 218\n    } // Find the last oplog entry.                                                                                    // 220\n                                                                                                                       //\n                                                                                                                       //\n    var lastOplogEntry = self._oplogLastEntryConnection.findOne(OPLOG_COLLECTION, {}, {                                // 223\n      sort: {                                                                                                          // 224\n        $natural: -1                                                                                                   // 224\n      },                                                                                                               // 224\n      fields: {                                                                                                        // 224\n        ts: 1                                                                                                          // 224\n      }                                                                                                                // 224\n    });                                                                                                                // 224\n                                                                                                                       //\n    var oplogSelector = _.clone(self._baseOplogSelector);                                                              // 226\n                                                                                                                       //\n    if (lastOplogEntry) {                                                                                              // 227\n      // Start after the last entry that currently exists.                                                             // 228\n      oplogSelector.ts = {                                                                                             // 229\n        $gt: lastOplogEntry.ts                                                                                         // 229\n      }; // If there are any calls to callWhenProcessedLatest before any other                                         // 229\n      // oplog entries show up, allow callWhenProcessedLatest to call its                                              // 231\n      // callback immediately.                                                                                         // 232\n                                                                                                                       //\n      self._lastProcessedTS = lastOplogEntry.ts;                                                                       // 233\n    }                                                                                                                  // 234\n                                                                                                                       //\n    var cursorDescription = new CursorDescription(OPLOG_COLLECTION, oplogSelector, {                                   // 236\n      tailable: true                                                                                                   // 237\n    });                                                                                                                // 237\n    self._tailHandle = self._oplogTailConnection.tail(cursorDescription, function (doc) {                              // 239\n      self._entryQueue.push(doc);                                                                                      // 241\n                                                                                                                       //\n      self._maybeStartWorker();                                                                                        // 242\n    });                                                                                                                // 243\n                                                                                                                       //\n    self._readyFuture.return();                                                                                        // 245\n  },                                                                                                                   // 246\n  _maybeStartWorker: function () {                                                                                     // 248\n    var self = this;                                                                                                   // 249\n    if (self._workerActive) return;                                                                                    // 250\n    self._workerActive = true;                                                                                         // 252\n    Meteor.defer(function () {                                                                                         // 253\n      try {                                                                                                            // 254\n        while (!self._stopped && !self._entryQueue.isEmpty()) {                                                        // 255\n          // Are we too far behind? Just tell our observers that they need to                                          // 256\n          // repoll, and drop our queue.                                                                               // 257\n          if (self._entryQueue.length > TOO_FAR_BEHIND) {                                                              // 258\n            var lastEntry = self._entryQueue.pop();                                                                    // 259\n                                                                                                                       //\n            self._entryQueue.clear();                                                                                  // 260\n                                                                                                                       //\n            self._onSkippedEntriesHook.each(function (callback) {                                                      // 262\n              callback();                                                                                              // 263\n              return true;                                                                                             // 264\n            }); // Free any waitUntilCaughtUp() calls that were waiting for us to                                      // 265\n            // pass something that we just skipped.                                                                    // 268\n                                                                                                                       //\n                                                                                                                       //\n            self._setLastProcessedTS(lastEntry.ts);                                                                    // 269\n                                                                                                                       //\n            continue;                                                                                                  // 270\n          }                                                                                                            // 271\n                                                                                                                       //\n          var doc = self._entryQueue.shift();                                                                          // 273\n                                                                                                                       //\n          if (!(doc.ns && doc.ns.length > self._dbName.length + 1 && doc.ns.substr(0, self._dbName.length + 1) === self._dbName + '.')) {\n            throw new Error(\"Unexpected ns\");                                                                          // 278\n          }                                                                                                            // 279\n                                                                                                                       //\n          var trigger = {                                                                                              // 281\n            collection: doc.ns.substr(self._dbName.length + 1),                                                        // 281\n            dropCollection: false,                                                                                     // 282\n            dropDatabase: false,                                                                                       // 283\n            op: doc                                                                                                    // 284\n          }; // Is it a special command and the collection name is hidden somewhere                                    // 281\n          // in operator?                                                                                              // 287\n                                                                                                                       //\n          if (trigger.collection === \"$cmd\") {                                                                         // 288\n            if (doc.o.dropDatabase) {                                                                                  // 289\n              delete trigger.collection;                                                                               // 290\n              trigger.dropDatabase = true;                                                                             // 291\n            } else if (_.has(doc.o, 'drop')) {                                                                         // 292\n              trigger.collection = doc.o.drop;                                                                         // 293\n              trigger.dropCollection = true;                                                                           // 294\n              trigger.id = null;                                                                                       // 295\n            } else {                                                                                                   // 296\n              throw Error(\"Unknown command \" + JSON.stringify(doc));                                                   // 297\n            }                                                                                                          // 298\n          } else {                                                                                                     // 299\n            // All other ops have an id.                                                                               // 300\n            trigger.id = idForOp(doc);                                                                                 // 301\n          }                                                                                                            // 302\n                                                                                                                       //\n          self._crossbar.fire(trigger); // Now that we've processed this operation, process pending                    // 304\n          // sequencers.                                                                                               // 307\n                                                                                                                       //\n                                                                                                                       //\n          if (!doc.ts) throw Error(\"oplog entry without ts: \" + EJSON.stringify(doc));                                 // 308\n                                                                                                                       //\n          self._setLastProcessedTS(doc.ts);                                                                            // 310\n        }                                                                                                              // 311\n      } finally {                                                                                                      // 312\n        self._workerActive = false;                                                                                    // 313\n      }                                                                                                                // 314\n    });                                                                                                                // 315\n  },                                                                                                                   // 316\n  _setLastProcessedTS: function (ts) {                                                                                 // 317\n    var self = this;                                                                                                   // 318\n    self._lastProcessedTS = ts;                                                                                        // 319\n                                                                                                                       //\n    while (!_.isEmpty(self._catchingUpFutures) && self._catchingUpFutures[0].ts.lessThanOrEqual(self._lastProcessedTS)) {\n      var sequencer = self._catchingUpFutures.shift();                                                                 // 321\n                                                                                                                       //\n      sequencer.future.return();                                                                                       // 322\n    }                                                                                                                  // 323\n  },                                                                                                                   // 324\n  //Methods used on tests to dinamically change TOO_FAR_BEHIND                                                         // 326\n  _defineTooFarBehind: function (value) {                                                                              // 327\n    TOO_FAR_BEHIND = value;                                                                                            // 328\n  },                                                                                                                   // 329\n  _resetTooFarBehind: function () {                                                                                    // 330\n    TOO_FAR_BEHIND = process.env.METEOR_OPLOG_TOO_FAR_BEHIND || 2000;                                                  // 331\n  }                                                                                                                    // 332\n});                                                                                                                    // 79\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"observe_multiplex.js\":function(require){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/mongo/observe_multiplex.js                                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar Future = Npm.require('fibers/future');                                                                             // 1\n                                                                                                                       //\nObserveMultiplexer = function (options) {                                                                              // 3\n  var self = this;                                                                                                     // 4\n  if (!options || !_.has(options, 'ordered')) throw Error(\"must specified ordered\");                                   // 6\n  Package.facts && Package.facts.Facts.incrementServerFact(\"mongo-livedata\", \"observe-multiplexers\", 1);               // 9\n  self._ordered = options.ordered;                                                                                     // 12\n                                                                                                                       //\n  self._onStop = options.onStop || function () {};                                                                     // 13\n                                                                                                                       //\n  self._queue = new Meteor._SynchronousQueue();                                                                        // 14\n  self._handles = {};                                                                                                  // 15\n  self._readyFuture = new Future();                                                                                    // 16\n  self._cache = new LocalCollection._CachingChangeObserver({                                                           // 17\n    ordered: options.ordered                                                                                           // 18\n  }); // Number of addHandleAndSendInitialAdds tasks scheduled but not yet                                             // 17\n  // running. removeHandle uses this to know if it's time to call the onStop                                           // 20\n  // callback.                                                                                                         // 21\n                                                                                                                       //\n  self._addHandleTasksScheduledButNotPerformed = 0;                                                                    // 22\n                                                                                                                       //\n  _.each(self.callbackNames(), function (callbackName) {                                                               // 24\n    self[callbackName] = function () /* ... */{                                                                        // 25\n      self._applyCallback(callbackName, _.toArray(arguments));                                                         // 26\n    };                                                                                                                 // 27\n  });                                                                                                                  // 28\n};                                                                                                                     // 29\n                                                                                                                       //\n_.extend(ObserveMultiplexer.prototype, {                                                                               // 31\n  addHandleAndSendInitialAdds: function (handle) {                                                                     // 32\n    var self = this; // Check this before calling runTask (even though runTask does the same                           // 33\n    // check) so that we don't leak an ObserveMultiplexer on error by                                                  // 36\n    // incrementing _addHandleTasksScheduledButNotPerformed and never                                                  // 37\n    // decrementing it.                                                                                                // 38\n                                                                                                                       //\n    if (!self._queue.safeToRunTask()) throw new Error(\"Can't call observeChanges from an observe callback on the same query\");\n    ++self._addHandleTasksScheduledButNotPerformed;                                                                    // 41\n    Package.facts && Package.facts.Facts.incrementServerFact(\"mongo-livedata\", \"observe-handles\", 1);                  // 43\n                                                                                                                       //\n    self._queue.runTask(function () {                                                                                  // 46\n      self._handles[handle._id] = handle; // Send out whatever adds we have so far (whether or not we the              // 47\n      // multiplexer is ready).                                                                                        // 49\n                                                                                                                       //\n      self._sendAdds(handle);                                                                                          // 50\n                                                                                                                       //\n      --self._addHandleTasksScheduledButNotPerformed;                                                                  // 51\n    }); // *outside* the task, since otherwise we'd deadlock                                                           // 52\n                                                                                                                       //\n                                                                                                                       //\n    self._readyFuture.wait();                                                                                          // 54\n  },                                                                                                                   // 55\n  // Remove an observe handle. If it was the last observe handle, call the                                             // 57\n  // onStop callback; you cannot add any more observe handles after this.                                              // 58\n  //                                                                                                                   // 59\n  // This is not synchronized with polls and handle additions: this means that                                         // 60\n  // you can safely call it from within an observe callback, but it also means                                         // 61\n  // that we have to be careful when we iterate over _handles.                                                         // 62\n  removeHandle: function (id) {                                                                                        // 63\n    var self = this; // This should not be possible: you can only call removeHandle by having                          // 64\n    // access to the ObserveHandle, which isn't returned to user code until the                                        // 67\n    // multiplex is ready.                                                                                             // 68\n                                                                                                                       //\n    if (!self._ready()) throw new Error(\"Can't remove handles until the multiplex is ready\");                          // 69\n    delete self._handles[id];                                                                                          // 72\n    Package.facts && Package.facts.Facts.incrementServerFact(\"mongo-livedata\", \"observe-handles\", -1);                 // 74\n                                                                                                                       //\n    if (_.isEmpty(self._handles) && self._addHandleTasksScheduledButNotPerformed === 0) {                              // 77\n      self._stop();                                                                                                    // 79\n    }                                                                                                                  // 80\n  },                                                                                                                   // 81\n  _stop: function (options) {                                                                                          // 82\n    var self = this;                                                                                                   // 83\n    options = options || {}; // It shouldn't be possible for us to stop when all our handles still                     // 84\n    // haven't been returned from observeChanges!                                                                      // 87\n                                                                                                                       //\n    if (!self._ready() && !options.fromQueryError) throw Error(\"surprising _stop: not ready\"); // Call stop callback (which kills the underlying process which sends us\n    // callbacks and removes us from the connection's dictionary).                                                     // 92\n                                                                                                                       //\n    self._onStop();                                                                                                    // 93\n                                                                                                                       //\n    Package.facts && Package.facts.Facts.incrementServerFact(\"mongo-livedata\", \"observe-multiplexers\", -1); // Cause future addHandleAndSendInitialAdds calls to throw (but the onStop\n    // callback should make our connection forget about us).                                                           // 98\n                                                                                                                       //\n    self._handles = null;                                                                                              // 99\n  },                                                                                                                   // 100\n  // Allows all addHandleAndSendInitialAdds calls to return, once all preceding                                        // 102\n  // adds have been processed. Does not block.                                                                         // 103\n  ready: function () {                                                                                                 // 104\n    var self = this;                                                                                                   // 105\n                                                                                                                       //\n    self._queue.queueTask(function () {                                                                                // 106\n      if (self._ready()) throw Error(\"can't make ObserveMultiplex ready twice!\");                                      // 107\n                                                                                                                       //\n      self._readyFuture.return();                                                                                      // 109\n    });                                                                                                                // 110\n  },                                                                                                                   // 111\n  // If trying to execute the query results in an error, call this. This is                                            // 113\n  // intended for permanent errors, not transient network errors that could be                                         // 114\n  // fixed. It should only be called before ready(), because if you called ready                                       // 115\n  // that meant that you managed to run the query once. It will stop this                                              // 116\n  // ObserveMultiplex and cause addHandleAndSendInitialAdds calls (and thus                                            // 117\n  // observeChanges calls) to throw the error.                                                                         // 118\n  queryError: function (err) {                                                                                         // 119\n    var self = this;                                                                                                   // 120\n                                                                                                                       //\n    self._queue.runTask(function () {                                                                                  // 121\n      if (self._ready()) throw Error(\"can't claim query has an error after it worked!\");                               // 122\n                                                                                                                       //\n      self._stop({                                                                                                     // 124\n        fromQueryError: true                                                                                           // 124\n      });                                                                                                              // 124\n                                                                                                                       //\n      self._readyFuture.throw(err);                                                                                    // 125\n    });                                                                                                                // 126\n  },                                                                                                                   // 127\n  // Calls \"cb\" once the effects of all \"ready\", \"addHandleAndSendInitialAdds\"                                         // 129\n  // and observe callbacks which came before this call have been propagated to                                         // 130\n  // all handles. \"ready\" must have already been called on this multiplexer.                                           // 131\n  onFlush: function (cb) {                                                                                             // 132\n    var self = this;                                                                                                   // 133\n                                                                                                                       //\n    self._queue.queueTask(function () {                                                                                // 134\n      if (!self._ready()) throw Error(\"only call onFlush on a multiplexer that will be ready\");                        // 135\n      cb();                                                                                                            // 137\n    });                                                                                                                // 138\n  },                                                                                                                   // 139\n  callbackNames: function () {                                                                                         // 140\n    var self = this;                                                                                                   // 141\n    if (self._ordered) return [\"addedBefore\", \"changed\", \"movedBefore\", \"removed\"];else return [\"added\", \"changed\", \"removed\"];\n  },                                                                                                                   // 146\n  _ready: function () {                                                                                                // 147\n    return this._readyFuture.isResolved();                                                                             // 148\n  },                                                                                                                   // 149\n  _applyCallback: function (callbackName, args) {                                                                      // 150\n    var self = this;                                                                                                   // 151\n                                                                                                                       //\n    self._queue.queueTask(function () {                                                                                // 152\n      // If we stopped in the meantime, do nothing.                                                                    // 153\n      if (!self._handles) return; // First, apply the change to the cache.                                             // 154\n      // XXX We could make applyChange callbacks promise not to hang on to any                                         // 158\n      // state from their arguments (assuming that their supplied callbacks                                            // 159\n      // don't) and skip this clone. Currently 'changed' hangs on to state                                             // 160\n      // though.                                                                                                       // 161\n                                                                                                                       //\n      self._cache.applyChange[callbackName].apply(null, EJSON.clone(args)); // If we haven't finished the initial adds, then we should only be getting\n      // adds.                                                                                                         // 165\n                                                                                                                       //\n                                                                                                                       //\n      if (!self._ready() && callbackName !== 'added' && callbackName !== 'addedBefore') {                              // 166\n        throw new Error(\"Got \" + callbackName + \" during initial adds\");                                               // 168\n      } // Now multiplex the callbacks out to all observe handles. It's OK if                                          // 169\n      // these calls yield; since we're inside a task, no other use of our queue                                       // 172\n      // can continue until these are done. (But we do have to be careful to not                                       // 173\n      // use a handle that got removed, because removeHandle does not use the                                          // 174\n      // queue; thus, we iterate over an array of keys that we control.)                                               // 175\n                                                                                                                       //\n                                                                                                                       //\n      _.each(_.keys(self._handles), function (handleId) {                                                              // 176\n        var handle = self._handles && self._handles[handleId];                                                         // 177\n        if (!handle) return;                                                                                           // 178\n        var callback = handle['_' + callbackName]; // clone arguments so that callbacks can mutate their arguments     // 180\n                                                                                                                       //\n        callback && callback.apply(null, EJSON.clone(args));                                                           // 182\n      });                                                                                                              // 183\n    });                                                                                                                // 184\n  },                                                                                                                   // 185\n  // Sends initial adds to a handle. It should only be called from within a task                                       // 187\n  // (the task that is processing the addHandleAndSendInitialAdds call). It                                            // 188\n  // synchronously invokes the handle's added or addedBefore; there's no need to                                       // 189\n  // flush the queue afterwards to ensure that the callbacks get out.                                                  // 190\n  _sendAdds: function (handle) {                                                                                       // 191\n    var self = this;                                                                                                   // 192\n    if (self._queue.safeToRunTask()) throw Error(\"_sendAdds may only be called from within a task!\");                  // 193\n    var add = self._ordered ? handle._addedBefore : handle._added;                                                     // 195\n    if (!add) return; // note: docs may be an _IdMap or an OrderedDict                                                 // 196\n                                                                                                                       //\n    self._cache.docs.forEach(function (doc, id) {                                                                      // 199\n      if (!_.has(self._handles, handle._id)) throw Error(\"handle got removed before sending initial adds!\");           // 200\n      var fields = EJSON.clone(doc);                                                                                   // 202\n      delete fields._id;                                                                                               // 203\n      if (self._ordered) add(id, fields, null); // we're going in order, so add at end                                 // 204\n      else add(id, fields);                                                                                            // 204\n    });                                                                                                                // 208\n  }                                                                                                                    // 209\n});                                                                                                                    // 31\n                                                                                                                       //\nvar nextObserveHandleId = 1;                                                                                           // 213\n                                                                                                                       //\nObserveHandle = function (multiplexer, callbacks) {                                                                    // 214\n  var self = this; // The end user is only supposed to call stop().  The other fields are                              // 215\n  // accessible to the multiplexer, though.                                                                            // 217\n                                                                                                                       //\n  self._multiplexer = multiplexer;                                                                                     // 218\n                                                                                                                       //\n  _.each(multiplexer.callbackNames(), function (name) {                                                                // 219\n    if (callbacks[name]) {                                                                                             // 220\n      self['_' + name] = callbacks[name];                                                                              // 221\n    } else if (name === \"addedBefore\" && callbacks.added) {                                                            // 222\n      // Special case: if you specify \"added\" and \"movedBefore\", you get an                                            // 223\n      // ordered observe where for some reason you don't get ordering data on                                          // 224\n      // the adds.  I dunno, we wrote tests for it, there must have been a                                             // 225\n      // reason.                                                                                                       // 226\n      self._addedBefore = function (id, fields, before) {                                                              // 227\n        callbacks.added(id, fields);                                                                                   // 228\n      };                                                                                                               // 229\n    }                                                                                                                  // 230\n  });                                                                                                                  // 231\n                                                                                                                       //\n  self._stopped = false;                                                                                               // 232\n  self._id = nextObserveHandleId++;                                                                                    // 233\n};                                                                                                                     // 234\n                                                                                                                       //\nObserveHandle.prototype.stop = function () {                                                                           // 235\n  var self = this;                                                                                                     // 236\n  if (self._stopped) return;                                                                                           // 237\n  self._stopped = true;                                                                                                // 239\n                                                                                                                       //\n  self._multiplexer.removeHandle(self._id);                                                                            // 240\n};                                                                                                                     // 241\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"doc_fetcher.js\":function(require){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/mongo/doc_fetcher.js                                                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar Fiber = Npm.require('fibers');                                                                                     // 1\n                                                                                                                       //\nvar Future = Npm.require('fibers/future');                                                                             // 2\n                                                                                                                       //\nDocFetcher = function (mongoConnection) {                                                                              // 4\n  var self = this;                                                                                                     // 5\n  self._mongoConnection = mongoConnection; // Map from cache key -> [callback]                                         // 6\n                                                                                                                       //\n  self._callbacksForCacheKey = {};                                                                                     // 8\n};                                                                                                                     // 9\n                                                                                                                       //\n_.extend(DocFetcher.prototype, {                                                                                       // 11\n  // Fetches document \"id\" from collectionName, returning it or null if not                                            // 12\n  // found.                                                                                                            // 13\n  //                                                                                                                   // 14\n  // If you make multiple calls to fetch() with the same cacheKey (a string),                                          // 15\n  // DocFetcher may assume that they all return the same document. (It does                                            // 16\n  // not check to see if collectionName/id match.)                                                                     // 17\n  //                                                                                                                   // 18\n  // You may assume that callback is never called synchronously (and in fact                                           // 19\n  // OplogObserveDriver does so).                                                                                      // 20\n  fetch: function (collectionName, id, cacheKey, callback) {                                                           // 21\n    var self = this;                                                                                                   // 22\n    check(collectionName, String); // id is some sort of scalar                                                        // 24\n                                                                                                                       //\n    check(cacheKey, String); // If there's already an in-progress fetch for this cache key, yield until                // 26\n    // it's done and return whatever it returns.                                                                       // 29\n                                                                                                                       //\n    if (_.has(self._callbacksForCacheKey, cacheKey)) {                                                                 // 30\n      self._callbacksForCacheKey[cacheKey].push(callback);                                                             // 31\n                                                                                                                       //\n      return;                                                                                                          // 32\n    }                                                                                                                  // 33\n                                                                                                                       //\n    var callbacks = self._callbacksForCacheKey[cacheKey] = [callback];                                                 // 35\n    Fiber(function () {                                                                                                // 37\n      try {                                                                                                            // 38\n        var doc = self._mongoConnection.findOne(collectionName, {                                                      // 39\n          _id: id                                                                                                      // 40\n        }) || null; // Return doc to all relevant callbacks. Note that this array can                                  // 40\n        // continue to grow during callback excecution.                                                                // 42\n                                                                                                                       //\n        while (!_.isEmpty(callbacks)) {                                                                                // 43\n          // Clone the document so that the various calls to fetch don't return                                        // 44\n          // objects that are intertwingled with each other. Clone before                                              // 45\n          // popping the future, so that if clone throws, the error gets passed                                        // 46\n          // to the next callback.                                                                                     // 47\n          var clonedDoc = EJSON.clone(doc);                                                                            // 48\n          callbacks.pop()(null, clonedDoc);                                                                            // 49\n        }                                                                                                              // 50\n      } catch (e) {                                                                                                    // 51\n        while (!_.isEmpty(callbacks)) {                                                                                // 52\n          callbacks.pop()(e);                                                                                          // 53\n        }                                                                                                              // 54\n      } finally {                                                                                                      // 55\n        // XXX consider keeping the doc around for a period of time before                                             // 56\n        // removing from the cache                                                                                     // 57\n        delete self._callbacksForCacheKey[cacheKey];                                                                   // 58\n      }                                                                                                                // 59\n    }).run();                                                                                                          // 60\n  }                                                                                                                    // 61\n});                                                                                                                    // 11\n                                                                                                                       //\nMongoTest.DocFetcher = DocFetcher;                                                                                     // 64\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"polling_observe_driver.js\":function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/mongo/polling_observe_driver.js                                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nPollingObserveDriver = function (options) {                                                                            // 1\n  var self = this;                                                                                                     // 2\n  self._cursorDescription = options.cursorDescription;                                                                 // 4\n  self._mongoHandle = options.mongoHandle;                                                                             // 5\n  self._ordered = options.ordered;                                                                                     // 6\n  self._multiplexer = options.multiplexer;                                                                             // 7\n  self._stopCallbacks = [];                                                                                            // 8\n  self._stopped = false;                                                                                               // 9\n  self._synchronousCursor = self._mongoHandle._createSynchronousCursor(self._cursorDescription); // previous results snapshot.  on each poll cycle, diffs against\n  // results drives the callbacks.                                                                                     // 15\n                                                                                                                       //\n  self._results = null; // The number of _pollMongo calls that have been added to self._taskQueue but                  // 16\n  // have not started running. Used to make sure we never schedule more than one                                       // 19\n  // _pollMongo (other than possibly the one that is currently running). It's                                          // 20\n  // also used by _suspendPolling to pretend there's a poll scheduled. Usually,                                        // 21\n  // it's either 0 (for \"no polls scheduled other than maybe one currently                                             // 22\n  // running\") or 1 (for \"a poll scheduled that isn't running yet\"), but it can                                        // 23\n  // also be 2 if incremented by _suspendPolling.                                                                      // 24\n                                                                                                                       //\n  self._pollsScheduledButNotStarted = 0;                                                                               // 25\n  self._pendingWrites = []; // people to notify when polling completes                                                 // 26\n  // Make sure to create a separately throttled function for each                                                      // 28\n  // PollingObserveDriver object.                                                                                      // 29\n                                                                                                                       //\n  self._ensurePollIsScheduled = _.throttle(self._unthrottledEnsurePollIsScheduled, self._cursorDescription.options.pollingThrottleMs || 50 /* ms */); // XXX figure out if we still need a queue\n                                                                                                                       //\n  self._taskQueue = new Meteor._SynchronousQueue();                                                                    // 35\n  var listenersHandle = listenAll(self._cursorDescription, function (notification) {                                   // 37\n    // When someone does a transaction that might affect us, schedule a poll                                           // 39\n    // of the database. If that transaction happens inside of a write fence,                                           // 40\n    // block the fence until we've polled and notified observers.                                                      // 41\n    var fence = DDPServer._CurrentWriteFence.get();                                                                    // 42\n                                                                                                                       //\n    if (fence) self._pendingWrites.push(fence.beginWrite()); // Ensure a poll is scheduled... but if we already know that one is,\n    // don't hit the throttled _ensurePollIsScheduled function (which might                                            // 46\n    // lead to us calling it unnecessarily in <pollingThrottleMs> ms).                                                 // 47\n                                                                                                                       //\n    if (self._pollsScheduledButNotStarted === 0) self._ensurePollIsScheduled();                                        // 48\n  });                                                                                                                  // 50\n                                                                                                                       //\n  self._stopCallbacks.push(function () {                                                                               // 52\n    listenersHandle.stop();                                                                                            // 52\n  }); // every once and a while, poll even if we don't think we're dirty, for                                          // 52\n  // eventual consistency with database writes from outside the Meteor                                                 // 55\n  // universe.                                                                                                         // 56\n  //                                                                                                                   // 57\n  // For testing, there's an undocumented callback argument to observeChanges                                          // 58\n  // which disables time-based polling and gets called at the beginning of each                                        // 59\n  // poll.                                                                                                             // 60\n                                                                                                                       //\n                                                                                                                       //\n  if (options._testOnlyPollCallback) {                                                                                 // 61\n    self._testOnlyPollCallback = options._testOnlyPollCallback;                                                        // 62\n  } else {                                                                                                             // 63\n    var pollingInterval = self._cursorDescription.options.pollingIntervalMs || self._cursorDescription.options._pollingInterval || // COMPAT with 1.2\n    10 * 1000;                                                                                                         // 67\n    var intervalHandle = Meteor.setInterval(_.bind(self._ensurePollIsScheduled, self), pollingInterval);               // 68\n                                                                                                                       //\n    self._stopCallbacks.push(function () {                                                                             // 70\n      Meteor.clearInterval(intervalHandle);                                                                            // 71\n    });                                                                                                                // 72\n  } // Make sure we actually poll soon!                                                                                // 73\n                                                                                                                       //\n                                                                                                                       //\n  self._unthrottledEnsurePollIsScheduled();                                                                            // 76\n                                                                                                                       //\n  Package.facts && Package.facts.Facts.incrementServerFact(\"mongo-livedata\", \"observe-drivers-polling\", 1);            // 78\n};                                                                                                                     // 80\n                                                                                                                       //\n_.extend(PollingObserveDriver.prototype, {                                                                             // 82\n  // This is always called through _.throttle (except once at startup).                                                // 83\n  _unthrottledEnsurePollIsScheduled: function () {                                                                     // 84\n    var self = this;                                                                                                   // 85\n    if (self._pollsScheduledButNotStarted > 0) return;                                                                 // 86\n    ++self._pollsScheduledButNotStarted;                                                                               // 88\n                                                                                                                       //\n    self._taskQueue.queueTask(function () {                                                                            // 89\n      self._pollMongo();                                                                                               // 90\n    });                                                                                                                // 91\n  },                                                                                                                   // 92\n  // test-only interface for controlling polling.                                                                      // 94\n  //                                                                                                                   // 95\n  // _suspendPolling blocks until any currently running and scheduled polls are                                        // 96\n  // done, and prevents any further polls from being scheduled. (new                                                   // 97\n  // ObserveHandles can be added and receive their initial added callbacks,                                            // 98\n  // though.)                                                                                                          // 99\n  //                                                                                                                   // 100\n  // _resumePolling immediately polls, and allows further polls to occur.                                              // 101\n  _suspendPolling: function () {                                                                                       // 102\n    var self = this; // Pretend that there's another poll scheduled (which will prevent                                // 103\n    // _ensurePollIsScheduled from queueing any more polls).                                                           // 105\n                                                                                                                       //\n    ++self._pollsScheduledButNotStarted; // Now block until all currently running or scheduled polls are done.         // 106\n                                                                                                                       //\n    self._taskQueue.runTask(function () {}); // Confirm that there is only one \"poll\" (the fake one we're pretending to\n    // have) scheduled.                                                                                                // 111\n                                                                                                                       //\n                                                                                                                       //\n    if (self._pollsScheduledButNotStarted !== 1) throw new Error(\"_pollsScheduledButNotStarted is \" + self._pollsScheduledButNotStarted);\n  },                                                                                                                   // 115\n  _resumePolling: function () {                                                                                        // 116\n    var self = this; // We should be in the same state as in the end of _suspendPolling.                               // 117\n                                                                                                                       //\n    if (self._pollsScheduledButNotStarted !== 1) throw new Error(\"_pollsScheduledButNotStarted is \" + self._pollsScheduledButNotStarted); // Run a poll synchronously (which will counteract the\n    // ++_pollsScheduledButNotStarted from _suspendPolling).                                                           // 123\n                                                                                                                       //\n    self._taskQueue.runTask(function () {                                                                              // 124\n      self._pollMongo();                                                                                               // 125\n    });                                                                                                                // 126\n  },                                                                                                                   // 127\n  _pollMongo: function () {                                                                                            // 129\n    var self = this;                                                                                                   // 130\n    --self._pollsScheduledButNotStarted;                                                                               // 131\n    if (self._stopped) return;                                                                                         // 133\n    var first = false;                                                                                                 // 136\n    var newResults;                                                                                                    // 137\n    var oldResults = self._results;                                                                                    // 138\n                                                                                                                       //\n    if (!oldResults) {                                                                                                 // 139\n      first = true; // XXX maybe use OrderedDict instead?                                                              // 140\n                                                                                                                       //\n      oldResults = self._ordered ? [] : new LocalCollection._IdMap();                                                  // 142\n    }                                                                                                                  // 143\n                                                                                                                       //\n    self._testOnlyPollCallback && self._testOnlyPollCallback(); // Save the list of pending writes which this round will commit.\n                                                                                                                       //\n    var writesForCycle = self._pendingWrites;                                                                          // 148\n    self._pendingWrites = []; // Get the new query results. (This yields.)                                             // 149\n                                                                                                                       //\n    try {                                                                                                              // 152\n      newResults = self._synchronousCursor.getRawObjects(self._ordered);                                               // 153\n    } catch (e) {                                                                                                      // 154\n      if (first && typeof e.code === 'number') {                                                                       // 155\n        // This is an error document sent to us by mongod, not a connection                                            // 156\n        // error generated by the client. And we've never seen this query work                                         // 157\n        // successfully. Probably it's a bad selector or something, so we should                                       // 158\n        // NOT retry. Instead, we should halt the observe (which ends up calling                                       // 159\n        // `stop` on us).                                                                                              // 160\n        self._multiplexer.queryError(new Error(\"Exception while polling query \" + JSON.stringify(self._cursorDescription) + \": \" + e.message));\n                                                                                                                       //\n        return;                                                                                                        // 165\n      } // getRawObjects can throw if we're having trouble talking to the                                              // 166\n      // database.  That's fine --- we will repoll later anyway. But we should                                         // 169\n      // make sure not to lose track of this cycle's writes.                                                           // 170\n      // (It also can throw if there's just something invalid about this query;                                        // 171\n      // unfortunately the ObserveDriver API doesn't provide a good way to                                             // 172\n      // \"cancel\" the observe from the inside in this case.                                                            // 173\n                                                                                                                       //\n                                                                                                                       //\n      Array.prototype.push.apply(self._pendingWrites, writesForCycle);                                                 // 174\n                                                                                                                       //\n      Meteor._debug(\"Exception while polling query \" + JSON.stringify(self._cursorDescription) + \": \" + e.stack);      // 175\n                                                                                                                       //\n      return;                                                                                                          // 177\n    } // Run diffs.                                                                                                    // 178\n                                                                                                                       //\n                                                                                                                       //\n    if (!self._stopped) {                                                                                              // 181\n      LocalCollection._diffQueryChanges(self._ordered, oldResults, newResults, self._multiplexer);                     // 182\n    } // Signals the multiplexer to allow all observeChanges calls that share this                                     // 184\n    // multiplexer to return. (This happens asynchronously, via the                                                    // 187\n    // multiplexer's queue.)                                                                                           // 188\n                                                                                                                       //\n                                                                                                                       //\n    if (first) self._multiplexer.ready(); // Replace self._results atomically.  (This assignment is what makes `first`\n    // stay through on the next cycle, so we've waited until after we've                                               // 193\n    // committed to ready-ing the multiplexer.)                                                                        // 194\n                                                                                                                       //\n    self._results = newResults; // Once the ObserveMultiplexer has processed everything we've done in this             // 195\n    // round, mark all the writes which existed before this call as                                                    // 198\n    // commmitted. (If new writes have shown up in the meantime, there'll                                              // 199\n    // already be another _pollMongo task scheduled.)                                                                  // 200\n                                                                                                                       //\n    self._multiplexer.onFlush(function () {                                                                            // 201\n      _.each(writesForCycle, function (w) {                                                                            // 202\n        w.committed();                                                                                                 // 203\n      });                                                                                                              // 204\n    });                                                                                                                // 205\n  },                                                                                                                   // 206\n  stop: function () {                                                                                                  // 208\n    var self = this;                                                                                                   // 209\n    self._stopped = true;                                                                                              // 210\n                                                                                                                       //\n    _.each(self._stopCallbacks, function (c) {                                                                         // 211\n      c();                                                                                                             // 211\n    }); // Release any write fences that are waiting on us.                                                            // 211\n                                                                                                                       //\n                                                                                                                       //\n    _.each(self._pendingWrites, function (w) {                                                                         // 213\n      w.committed();                                                                                                   // 214\n    });                                                                                                                // 215\n                                                                                                                       //\n    Package.facts && Package.facts.Facts.incrementServerFact(\"mongo-livedata\", \"observe-drivers-polling\", -1);         // 216\n  }                                                                                                                    // 218\n});                                                                                                                    // 82\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"oplog_observe_driver.js\":function(require){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/mongo/oplog_observe_driver.js                                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar Future = Npm.require('fibers/future');                                                                             // 1\n                                                                                                                       //\nvar PHASE = {                                                                                                          // 3\n  QUERYING: \"QUERYING\",                                                                                                // 4\n  FETCHING: \"FETCHING\",                                                                                                // 5\n  STEADY: \"STEADY\"                                                                                                     // 6\n}; // Exception thrown by _needToPollQuery which unrolls the stack up to the                                           // 3\n// enclosing call to finishIfNeedToPollQuery.                                                                          // 10\n                                                                                                                       //\nvar SwitchedToQuery = function () {};                                                                                  // 11\n                                                                                                                       //\nvar finishIfNeedToPollQuery = function (f) {                                                                           // 12\n  return function () {                                                                                                 // 13\n    try {                                                                                                              // 14\n      f.apply(this, arguments);                                                                                        // 15\n    } catch (e) {                                                                                                      // 16\n      if (!(e instanceof SwitchedToQuery)) throw e;                                                                    // 17\n    }                                                                                                                  // 19\n  };                                                                                                                   // 20\n};                                                                                                                     // 21\n                                                                                                                       //\nvar currentId = 0; // OplogObserveDriver is an alternative to PollingObserveDriver which follows                       // 23\n// the Mongo operation log instead of just re-polling the query. It obeys the                                          // 26\n// same simple interface: constructing it starts sending observeChanges                                                // 27\n// callbacks (and a ready() invocation) to the ObserveMultiplexer, and you stop                                        // 28\n// it by calling the stop() method.                                                                                    // 29\n                                                                                                                       //\nOplogObserveDriver = function (options) {                                                                              // 30\n  var self = this;                                                                                                     // 31\n  self._usesOplog = true; // tests look at this                                                                        // 32\n                                                                                                                       //\n  self._id = currentId;                                                                                                // 34\n  currentId++;                                                                                                         // 35\n  self._cursorDescription = options.cursorDescription;                                                                 // 37\n  self._mongoHandle = options.mongoHandle;                                                                             // 38\n  self._multiplexer = options.multiplexer;                                                                             // 39\n                                                                                                                       //\n  if (options.ordered) {                                                                                               // 41\n    throw Error(\"OplogObserveDriver only supports unordered observeChanges\");                                          // 42\n  }                                                                                                                    // 43\n                                                                                                                       //\n  var sorter = options.sorter; // We don't support $near and other geo-queries so it's OK to initialize the            // 45\n  // comparator only once in the constructor.                                                                          // 47\n                                                                                                                       //\n  var comparator = sorter && sorter.getComparator();                                                                   // 48\n                                                                                                                       //\n  if (options.cursorDescription.options.limit) {                                                                       // 50\n    // There are several properties ordered driver implements:                                                         // 51\n    // - _limit is a positive number                                                                                   // 52\n    // - _comparator is a function-comparator by which the query is ordered                                            // 53\n    // - _unpublishedBuffer is non-null Min/Max Heap,                                                                  // 54\n    //                      the empty buffer in STEADY phase implies that the                                          // 55\n    //                      everything that matches the queries selector fits                                          // 56\n    //                      into published set.                                                                        // 57\n    // - _published - Min Heap (also implements IdMap methods)                                                         // 58\n    var heapOptions = {                                                                                                // 60\n      IdMap: LocalCollection._IdMap                                                                                    // 60\n    };                                                                                                                 // 60\n    self._limit = self._cursorDescription.options.limit;                                                               // 61\n    self._comparator = comparator;                                                                                     // 62\n    self._sorter = sorter;                                                                                             // 63\n    self._unpublishedBuffer = new MinMaxHeap(comparator, heapOptions); // We need something that can find Max value in addition to IdMap interface\n                                                                                                                       //\n    self._published = new MaxHeap(comparator, heapOptions);                                                            // 66\n  } else {                                                                                                             // 67\n    self._limit = 0;                                                                                                   // 68\n    self._comparator = null;                                                                                           // 69\n    self._sorter = null;                                                                                               // 70\n    self._unpublishedBuffer = null;                                                                                    // 71\n    self._published = new LocalCollection._IdMap();                                                                    // 72\n  } // Indicates if it is safe to insert a new document at the end of the buffer                                       // 73\n  // for this query. i.e. it is known that there are no documents matching the                                         // 76\n  // selector those are not in published or buffer.                                                                    // 77\n                                                                                                                       //\n                                                                                                                       //\n  self._safeAppendToBuffer = false;                                                                                    // 78\n  self._stopped = false;                                                                                               // 80\n  self._stopHandles = [];                                                                                              // 81\n  Package.facts && Package.facts.Facts.incrementServerFact(\"mongo-livedata\", \"observe-drivers-oplog\", 1);              // 83\n                                                                                                                       //\n  self._registerPhaseChange(PHASE.QUERYING);                                                                           // 86\n                                                                                                                       //\n  self._matcher = options.matcher;                                                                                     // 88\n  var projection = self._cursorDescription.options.fields || {};                                                       // 89\n  self._projectionFn = LocalCollection._compileProjection(projection); // Projection function, result of combining important fields for selector and\n  // existing fields projection                                                                                        // 92\n                                                                                                                       //\n  self._sharedProjection = self._matcher.combineIntoProjection(projection);                                            // 93\n  if (sorter) self._sharedProjection = sorter.combineIntoProjection(self._sharedProjection);                           // 94\n  self._sharedProjectionFn = LocalCollection._compileProjection(self._sharedProjection);                               // 96\n  self._needToFetch = new LocalCollection._IdMap();                                                                    // 99\n  self._currentlyFetching = null;                                                                                      // 100\n  self._fetchGeneration = 0;                                                                                           // 101\n  self._requeryWhenDoneThisQuery = false;                                                                              // 103\n  self._writesToCommitWhenWeReachSteady = []; // If the oplog handle tells us that it skipped some entries (because it got\n  // behind, say), re-poll.                                                                                            // 107\n                                                                                                                       //\n  self._stopHandles.push(self._mongoHandle._oplogHandle.onSkippedEntries(finishIfNeedToPollQuery(function () {         // 108\n    self._needToPollQuery();                                                                                           // 110\n  })));                                                                                                                // 111\n                                                                                                                       //\n  forEachTrigger(self._cursorDescription, function (trigger) {                                                         // 114\n    self._stopHandles.push(self._mongoHandle._oplogHandle.onOplogEntry(trigger, function (notification) {              // 115\n      Meteor._noYieldsAllowed(finishIfNeedToPollQuery(function () {                                                    // 117\n        var op = notification.op;                                                                                      // 118\n                                                                                                                       //\n        if (notification.dropCollection || notification.dropDatabase) {                                                // 119\n          // Note: this call is not allowed to block on anything (especially                                           // 120\n          // on waiting for oplog entries to catch up) because that will block                                         // 121\n          // onOplogEntry!                                                                                             // 122\n          self._needToPollQuery();                                                                                     // 123\n        } else {                                                                                                       // 124\n          // All other operators should be handled depending on phase                                                  // 125\n          if (self._phase === PHASE.QUERYING) {                                                                        // 126\n            self._handleOplogEntryQuerying(op);                                                                        // 127\n          } else {                                                                                                     // 128\n            self._handleOplogEntrySteadyOrFetching(op);                                                                // 129\n          }                                                                                                            // 130\n        }                                                                                                              // 131\n      }));                                                                                                             // 132\n    }));                                                                                                               // 133\n  }); // XXX ordering w.r.t. everything else?                                                                          // 135\n                                                                                                                       //\n  self._stopHandles.push(listenAll(self._cursorDescription, function (notification) {                                  // 138\n    // If we're not in a pre-fire write fence, we don't have to do anything.                                           // 140\n    var fence = DDPServer._CurrentWriteFence.get();                                                                    // 141\n                                                                                                                       //\n    if (!fence || fence.fired) return;                                                                                 // 142\n                                                                                                                       //\n    if (fence._oplogObserveDrivers) {                                                                                  // 145\n      fence._oplogObserveDrivers[self._id] = self;                                                                     // 146\n      return;                                                                                                          // 147\n    }                                                                                                                  // 148\n                                                                                                                       //\n    fence._oplogObserveDrivers = {};                                                                                   // 150\n    fence._oplogObserveDrivers[self._id] = self;                                                                       // 151\n    fence.onBeforeFire(function () {                                                                                   // 153\n      var drivers = fence._oplogObserveDrivers;                                                                        // 154\n      delete fence._oplogObserveDrivers; // This fence cannot fire until we've caught up to \"this point\" in the        // 155\n      // oplog, and all observers made it back to the steady state.                                                    // 158\n                                                                                                                       //\n      self._mongoHandle._oplogHandle.waitUntilCaughtUp();                                                              // 159\n                                                                                                                       //\n      _.each(drivers, function (driver) {                                                                              // 161\n        if (driver._stopped) return;                                                                                   // 162\n        var write = fence.beginWrite();                                                                                // 165\n                                                                                                                       //\n        if (driver._phase === PHASE.STEADY) {                                                                          // 166\n          // Make sure that all of the callbacks have made it through the                                              // 167\n          // multiplexer and been delivered to ObserveHandles before committing                                        // 168\n          // writes.                                                                                                   // 169\n          driver._multiplexer.onFlush(function () {                                                                    // 170\n            write.committed();                                                                                         // 171\n          });                                                                                                          // 172\n        } else {                                                                                                       // 173\n          driver._writesToCommitWhenWeReachSteady.push(write);                                                         // 174\n        }                                                                                                              // 175\n      });                                                                                                              // 176\n    });                                                                                                                // 177\n  })); // When Mongo fails over, we need to repoll the query, in case we processed an                                  // 178\n  // oplog entry that got rolled back.                                                                                 // 182\n                                                                                                                       //\n                                                                                                                       //\n  self._stopHandles.push(self._mongoHandle._onFailover(finishIfNeedToPollQuery(function () {                           // 183\n    self._needToPollQuery();                                                                                           // 185\n  }))); // Give _observeChanges a chance to add the new ObserveHandle to our                                           // 186\n  // multiplexer, so that the added calls get streamed.                                                                // 189\n                                                                                                                       //\n                                                                                                                       //\n  Meteor.defer(finishIfNeedToPollQuery(function () {                                                                   // 190\n    self._runInitialQuery();                                                                                           // 191\n  }));                                                                                                                 // 192\n};                                                                                                                     // 193\n                                                                                                                       //\n_.extend(OplogObserveDriver.prototype, {                                                                               // 195\n  _addPublished: function (id, doc) {                                                                                  // 196\n    var self = this;                                                                                                   // 197\n                                                                                                                       //\n    Meteor._noYieldsAllowed(function () {                                                                              // 198\n      var fields = _.clone(doc);                                                                                       // 199\n                                                                                                                       //\n      delete fields._id;                                                                                               // 200\n                                                                                                                       //\n      self._published.set(id, self._sharedProjectionFn(doc));                                                          // 201\n                                                                                                                       //\n      self._multiplexer.added(id, self._projectionFn(fields)); // After adding this document, the published set might be overflowed\n      // (exceeding capacity specified by limit). If so, push the maximum                                              // 205\n      // element to the buffer, we might want to save it in memory to reduce the                                       // 206\n      // amount of Mongo lookups in the future.                                                                        // 207\n                                                                                                                       //\n                                                                                                                       //\n      if (self._limit && self._published.size() > self._limit) {                                                       // 208\n        // XXX in theory the size of published is no more than limit+1                                                 // 209\n        if (self._published.size() !== self._limit + 1) {                                                              // 210\n          throw new Error(\"After adding to published, \" + (self._published.size() - self._limit) + \" documents are overflowing the set\");\n        }                                                                                                              // 214\n                                                                                                                       //\n        var overflowingDocId = self._published.maxElementId();                                                         // 216\n                                                                                                                       //\n        var overflowingDoc = self._published.get(overflowingDocId);                                                    // 217\n                                                                                                                       //\n        if (EJSON.equals(overflowingDocId, id)) {                                                                      // 219\n          throw new Error(\"The document just added is overflowing the published set\");                                 // 220\n        }                                                                                                              // 221\n                                                                                                                       //\n        self._published.remove(overflowingDocId);                                                                      // 223\n                                                                                                                       //\n        self._multiplexer.removed(overflowingDocId);                                                                   // 224\n                                                                                                                       //\n        self._addBuffered(overflowingDocId, overflowingDoc);                                                           // 225\n      }                                                                                                                // 226\n    });                                                                                                                // 227\n  },                                                                                                                   // 228\n  _removePublished: function (id) {                                                                                    // 229\n    var self = this;                                                                                                   // 230\n                                                                                                                       //\n    Meteor._noYieldsAllowed(function () {                                                                              // 231\n      self._published.remove(id);                                                                                      // 232\n                                                                                                                       //\n      self._multiplexer.removed(id);                                                                                   // 233\n                                                                                                                       //\n      if (!self._limit || self._published.size() === self._limit) return;                                              // 234\n      if (self._published.size() > self._limit) throw Error(\"self._published got too big\"); // OK, we are publishing less than the limit. Maybe we should look in the\n      // buffer to find the next element past what we were publishing before.                                          // 241\n                                                                                                                       //\n      if (!self._unpublishedBuffer.empty()) {                                                                          // 243\n        // There's something in the buffer; move the first thing in it to                                              // 244\n        // _published.                                                                                                 // 245\n        var newDocId = self._unpublishedBuffer.minElementId();                                                         // 246\n                                                                                                                       //\n        var newDoc = self._unpublishedBuffer.get(newDocId);                                                            // 247\n                                                                                                                       //\n        self._removeBuffered(newDocId);                                                                                // 248\n                                                                                                                       //\n        self._addPublished(newDocId, newDoc);                                                                          // 249\n                                                                                                                       //\n        return;                                                                                                        // 250\n      } // There's nothing in the buffer.  This could mean one of a few things.                                        // 251\n      // (a) We could be in the middle of re-running the query (specifically, we                                       // 255\n      // could be in _publishNewResults). In that case, _unpublishedBuffer is                                          // 256\n      // empty because we clear it at the beginning of _publishNewResults. In                                          // 257\n      // this case, our caller already knows the entire answer to the query and                                        // 258\n      // we don't need to do anything fancy here.  Just return.                                                        // 259\n                                                                                                                       //\n                                                                                                                       //\n      if (self._phase === PHASE.QUERYING) return; // (b) We're pretty confident that the union of _published and       // 260\n      // _unpublishedBuffer contain all documents that match selector. Because                                         // 264\n      // _unpublishedBuffer is empty, that means we're confident that _published                                       // 265\n      // contains all documents that match selector. So we have nothing to do.                                         // 266\n                                                                                                                       //\n      if (self._safeAppendToBuffer) return; // (c) Maybe there are other documents out there that should be in our     // 267\n      // buffer. But in that case, when we emptied _unpublishedBuffer in                                               // 271\n      // _removeBuffered, we should have called _needToPollQuery, which will                                           // 272\n      // either put something in _unpublishedBuffer or set _safeAppendToBuffer                                         // 273\n      // (or both), and it will put us in QUERYING for that whole time. So in                                          // 274\n      // fact, we shouldn't be able to get here.                                                                       // 275\n                                                                                                                       //\n      throw new Error(\"Buffer inexplicably empty\");                                                                    // 277\n    });                                                                                                                // 278\n  },                                                                                                                   // 279\n  _changePublished: function (id, oldDoc, newDoc) {                                                                    // 280\n    var self = this;                                                                                                   // 281\n                                                                                                                       //\n    Meteor._noYieldsAllowed(function () {                                                                              // 282\n      self._published.set(id, self._sharedProjectionFn(newDoc));                                                       // 283\n                                                                                                                       //\n      var projectedNew = self._projectionFn(newDoc);                                                                   // 284\n                                                                                                                       //\n      var projectedOld = self._projectionFn(oldDoc);                                                                   // 285\n                                                                                                                       //\n      var changed = DiffSequence.makeChangedFields(projectedNew, projectedOld);                                        // 286\n      if (!_.isEmpty(changed)) self._multiplexer.changed(id, changed);                                                 // 288\n    });                                                                                                                // 290\n  },                                                                                                                   // 291\n  _addBuffered: function (id, doc) {                                                                                   // 292\n    var self = this;                                                                                                   // 293\n                                                                                                                       //\n    Meteor._noYieldsAllowed(function () {                                                                              // 294\n      self._unpublishedBuffer.set(id, self._sharedProjectionFn(doc)); // If something is overflowing the buffer, we just remove it from cache\n                                                                                                                       //\n                                                                                                                       //\n      if (self._unpublishedBuffer.size() > self._limit) {                                                              // 298\n        var maxBufferedId = self._unpublishedBuffer.maxElementId();                                                    // 299\n                                                                                                                       //\n        self._unpublishedBuffer.remove(maxBufferedId); // Since something matching is removed from cache (both published set and\n        // buffer), set flag to false                                                                                  // 304\n                                                                                                                       //\n                                                                                                                       //\n        self._safeAppendToBuffer = false;                                                                              // 305\n      }                                                                                                                // 306\n    });                                                                                                                // 307\n  },                                                                                                                   // 308\n  // Is called either to remove the doc completely from matching set or to move                                        // 309\n  // it to the published set later.                                                                                    // 310\n  _removeBuffered: function (id) {                                                                                     // 311\n    var self = this;                                                                                                   // 312\n                                                                                                                       //\n    Meteor._noYieldsAllowed(function () {                                                                              // 313\n      self._unpublishedBuffer.remove(id); // To keep the contract \"buffer is never empty in STEADY phase unless the    // 314\n      // everything matching fits into published\" true, we poll everything as                                          // 316\n      // soon as we see the buffer becoming empty.                                                                     // 317\n                                                                                                                       //\n                                                                                                                       //\n      if (!self._unpublishedBuffer.size() && !self._safeAppendToBuffer) self._needToPollQuery();                       // 318\n    });                                                                                                                // 320\n  },                                                                                                                   // 321\n  // Called when a document has joined the \"Matching\" results set.                                                     // 322\n  // Takes responsibility of keeping _unpublishedBuffer in sync with _published                                        // 323\n  // and the effect of limit enforced.                                                                                 // 324\n  _addMatching: function (doc) {                                                                                       // 325\n    var self = this;                                                                                                   // 326\n                                                                                                                       //\n    Meteor._noYieldsAllowed(function () {                                                                              // 327\n      var id = doc._id;                                                                                                // 328\n      if (self._published.has(id)) throw Error(\"tried to add something already published \" + id);                      // 329\n      if (self._limit && self._unpublishedBuffer.has(id)) throw Error(\"tried to add something already existed in buffer \" + id);\n      var limit = self._limit;                                                                                         // 334\n      var comparator = self._comparator;                                                                               // 335\n      var maxPublished = limit && self._published.size() > 0 ? self._published.get(self._published.maxElementId()) : null;\n      var maxBuffered = limit && self._unpublishedBuffer.size() > 0 ? self._unpublishedBuffer.get(self._unpublishedBuffer.maxElementId()) : null; // The query is unlimited or didn't publish enough documents yet or the\n      // new document would fit into published set pushing the maximum element                                         // 342\n      // out, then we need to publish the doc.                                                                         // 343\n                                                                                                                       //\n      var toPublish = !limit || self._published.size() < limit || comparator(doc, maxPublished) < 0; // Otherwise we might need to buffer it (only in case of limited query).\n      // Buffering is allowed if the buffer is not filled up yet and all                                               // 348\n      // matching docs are either in the published set or in the buffer.                                               // 349\n                                                                                                                       //\n      var canAppendToBuffer = !toPublish && self._safeAppendToBuffer && self._unpublishedBuffer.size() < limit; // Or if it is small enough to be safely inserted to the middle or the\n      // beginning of the buffer.                                                                                      // 354\n                                                                                                                       //\n      var canInsertIntoBuffer = !toPublish && maxBuffered && comparator(doc, maxBuffered) <= 0;                        // 355\n      var toBuffer = canAppendToBuffer || canInsertIntoBuffer;                                                         // 358\n                                                                                                                       //\n      if (toPublish) {                                                                                                 // 360\n        self._addPublished(id, doc);                                                                                   // 361\n      } else if (toBuffer) {                                                                                           // 362\n        self._addBuffered(id, doc);                                                                                    // 363\n      } else {                                                                                                         // 364\n        // dropping it and not saving to the cache                                                                     // 365\n        self._safeAppendToBuffer = false;                                                                              // 366\n      }                                                                                                                // 367\n    });                                                                                                                // 368\n  },                                                                                                                   // 369\n  // Called when a document leaves the \"Matching\" results set.                                                         // 370\n  // Takes responsibility of keeping _unpublishedBuffer in sync with _published                                        // 371\n  // and the effect of limit enforced.                                                                                 // 372\n  _removeMatching: function (id) {                                                                                     // 373\n    var self = this;                                                                                                   // 374\n                                                                                                                       //\n    Meteor._noYieldsAllowed(function () {                                                                              // 375\n      if (!self._published.has(id) && !self._limit) throw Error(\"tried to remove something matching but not cached \" + id);\n                                                                                                                       //\n      if (self._published.has(id)) {                                                                                   // 379\n        self._removePublished(id);                                                                                     // 380\n      } else if (self._unpublishedBuffer.has(id)) {                                                                    // 381\n        self._removeBuffered(id);                                                                                      // 382\n      }                                                                                                                // 383\n    });                                                                                                                // 384\n  },                                                                                                                   // 385\n  _handleDoc: function (id, newDoc) {                                                                                  // 386\n    var self = this;                                                                                                   // 387\n                                                                                                                       //\n    Meteor._noYieldsAllowed(function () {                                                                              // 388\n      var matchesNow = newDoc && self._matcher.documentMatches(newDoc).result;                                         // 389\n                                                                                                                       //\n      var publishedBefore = self._published.has(id);                                                                   // 391\n                                                                                                                       //\n      var bufferedBefore = self._limit && self._unpublishedBuffer.has(id);                                             // 392\n                                                                                                                       //\n      var cachedBefore = publishedBefore || bufferedBefore;                                                            // 393\n                                                                                                                       //\n      if (matchesNow && !cachedBefore) {                                                                               // 395\n        self._addMatching(newDoc);                                                                                     // 396\n      } else if (cachedBefore && !matchesNow) {                                                                        // 397\n        self._removeMatching(id);                                                                                      // 398\n      } else if (cachedBefore && matchesNow) {                                                                         // 399\n        var oldDoc = self._published.get(id);                                                                          // 400\n                                                                                                                       //\n        var comparator = self._comparator;                                                                             // 401\n                                                                                                                       //\n        var minBuffered = self._limit && self._unpublishedBuffer.size() && self._unpublishedBuffer.get(self._unpublishedBuffer.minElementId());\n                                                                                                                       //\n        var maxBuffered;                                                                                               // 404\n                                                                                                                       //\n        if (publishedBefore) {                                                                                         // 406\n          // Unlimited case where the document stays in published once it                                              // 407\n          // matches or the case when we don't have enough matching docs to                                            // 408\n          // publish or the changed but matching doc will stay in published                                            // 409\n          // anyways.                                                                                                  // 410\n          //                                                                                                           // 411\n          // XXX: We rely on the emptiness of buffer. Be sure to maintain the                                          // 412\n          // fact that buffer can't be empty if there are matching documents not                                       // 413\n          // published. Notably, we don't want to schedule repoll and continue                                         // 414\n          // relying on this property.                                                                                 // 415\n          var staysInPublished = !self._limit || self._unpublishedBuffer.size() === 0 || comparator(newDoc, minBuffered) <= 0;\n                                                                                                                       //\n          if (staysInPublished) {                                                                                      // 420\n            self._changePublished(id, oldDoc, newDoc);                                                                 // 421\n          } else {                                                                                                     // 422\n            // after the change doc doesn't stay in the published, remove it                                           // 423\n            self._removePublished(id); // but it can move into buffered now, check it                                  // 424\n                                                                                                                       //\n                                                                                                                       //\n            maxBuffered = self._unpublishedBuffer.get(self._unpublishedBuffer.maxElementId());                         // 426\n            var toBuffer = self._safeAppendToBuffer || maxBuffered && comparator(newDoc, maxBuffered) <= 0;            // 429\n                                                                                                                       //\n            if (toBuffer) {                                                                                            // 432\n              self._addBuffered(id, newDoc);                                                                           // 433\n            } else {                                                                                                   // 434\n              // Throw away from both published set and buffer                                                         // 435\n              self._safeAppendToBuffer = false;                                                                        // 436\n            }                                                                                                          // 437\n          }                                                                                                            // 438\n        } else if (bufferedBefore) {                                                                                   // 439\n          oldDoc = self._unpublishedBuffer.get(id); // remove the old version manually instead of using _removeBuffered so\n          // we don't trigger the querying immediately.  if we end this block                                          // 442\n          // with the buffer empty, we will need to trigger the query poll                                             // 443\n          // manually too.                                                                                             // 444\n                                                                                                                       //\n          self._unpublishedBuffer.remove(id);                                                                          // 445\n                                                                                                                       //\n          var maxPublished = self._published.get(self._published.maxElementId());                                      // 447\n                                                                                                                       //\n          maxBuffered = self._unpublishedBuffer.size() && self._unpublishedBuffer.get(self._unpublishedBuffer.maxElementId()); // the buffered doc was updated, it could move to published\n                                                                                                                       //\n          var toPublish = comparator(newDoc, maxPublished) < 0; // or stays in buffer even after the change            // 454\n                                                                                                                       //\n          var staysInBuffer = !toPublish && self._safeAppendToBuffer || !toPublish && maxBuffered && comparator(newDoc, maxBuffered) <= 0;\n                                                                                                                       //\n          if (toPublish) {                                                                                             // 461\n            self._addPublished(id, newDoc);                                                                            // 462\n          } else if (staysInBuffer) {                                                                                  // 463\n            // stays in buffer but changes                                                                             // 464\n            self._unpublishedBuffer.set(id, newDoc);                                                                   // 465\n          } else {                                                                                                     // 466\n            // Throw away from both published set and buffer                                                           // 467\n            self._safeAppendToBuffer = false; // Normally this check would have been done in _removeBuffered but       // 468\n            // we didn't use it, so we need to do it ourself now.                                                      // 470\n                                                                                                                       //\n            if (!self._unpublishedBuffer.size()) {                                                                     // 471\n              self._needToPollQuery();                                                                                 // 472\n            }                                                                                                          // 473\n          }                                                                                                            // 474\n        } else {                                                                                                       // 475\n          throw new Error(\"cachedBefore implies either of publishedBefore or bufferedBefore is true.\");                // 476\n        }                                                                                                              // 477\n      }                                                                                                                // 478\n    });                                                                                                                // 479\n  },                                                                                                                   // 480\n  _fetchModifiedDocuments: function () {                                                                               // 481\n    var self = this;                                                                                                   // 482\n                                                                                                                       //\n    Meteor._noYieldsAllowed(function () {                                                                              // 483\n      self._registerPhaseChange(PHASE.FETCHING); // Defer, because nothing called from the oplog entry handler may yield,\n      // but fetch() yields.                                                                                           // 486\n                                                                                                                       //\n                                                                                                                       //\n      Meteor.defer(finishIfNeedToPollQuery(function () {                                                               // 487\n        while (!self._stopped && !self._needToFetch.empty()) {                                                         // 488\n          if (self._phase === PHASE.QUERYING) {                                                                        // 489\n            // While fetching, we decided to go into QUERYING mode, and then we                                        // 490\n            // saw another oplog entry, so _needToFetch is not empty. But we                                           // 491\n            // shouldn't fetch these documents until AFTER the query is done.                                          // 492\n            break;                                                                                                     // 493\n          } // Being in steady phase here would be surprising.                                                         // 494\n                                                                                                                       //\n                                                                                                                       //\n          if (self._phase !== PHASE.FETCHING) throw new Error(\"phase in fetchModifiedDocuments: \" + self._phase);      // 497\n          self._currentlyFetching = self._needToFetch;                                                                 // 500\n          var thisGeneration = ++self._fetchGeneration;                                                                // 501\n          self._needToFetch = new LocalCollection._IdMap();                                                            // 502\n          var waiting = 0;                                                                                             // 503\n          var fut = new Future(); // This loop is safe, because _currentlyFetching will not be updated                 // 504\n          // during this loop (in fact, it is never mutated).                                                          // 506\n                                                                                                                       //\n          self._currentlyFetching.forEach(function (cacheKey, id) {                                                    // 507\n            waiting++;                                                                                                 // 508\n                                                                                                                       //\n            self._mongoHandle._docFetcher.fetch(self._cursorDescription.collectionName, id, cacheKey, finishIfNeedToPollQuery(function (err, doc) {\n              try {                                                                                                    // 512\n                if (err) {                                                                                             // 513\n                  Meteor._debug(\"Got exception while fetching documents: \" + err); // If we get an error from the fetcher (eg, trouble\n                  // connecting to Mongo), let's just abandon the fetch phase                                          // 517\n                  // altogether and fall back to polling. It's not like we're                                          // 518\n                  // getting live updates anyway.                                                                      // 519\n                                                                                                                       //\n                                                                                                                       //\n                  if (self._phase !== PHASE.QUERYING) {                                                                // 520\n                    self._needToPollQuery();                                                                           // 521\n                  }                                                                                                    // 522\n                } else if (!self._stopped && self._phase === PHASE.FETCHING && self._fetchGeneration === thisGeneration) {\n                  // We re-check the generation in case we've had an explicit                                          // 525\n                  // _pollQuery call (eg, in another fiber) which should                                               // 526\n                  // effectively cancel this round of fetches.  (_pollQuery                                            // 527\n                  // increments the generation.)                                                                       // 528\n                  self._handleDoc(id, doc);                                                                            // 529\n                }                                                                                                      // 530\n              } finally {                                                                                              // 531\n                waiting--; // Because fetch() never calls its callback synchronously,                                  // 532\n                // this is safe (ie, we won't call fut.return() before the                                             // 534\n                // forEach is done).                                                                                   // 535\n                                                                                                                       //\n                if (waiting === 0) fut.return();                                                                       // 536\n              }                                                                                                        // 538\n            }));                                                                                                       // 539\n          });                                                                                                          // 540\n                                                                                                                       //\n          fut.wait(); // Exit now if we've had a _pollQuery call (here or in another fiber).                           // 541\n                                                                                                                       //\n          if (self._phase === PHASE.QUERYING) return;                                                                  // 543\n          self._currentlyFetching = null;                                                                              // 545\n        } // We're done fetching, so we can be steady, unless we've had a                                              // 546\n        // _pollQuery call (here or in another fiber).                                                                 // 548\n                                                                                                                       //\n                                                                                                                       //\n        if (self._phase !== PHASE.QUERYING) self._beSteady();                                                          // 549\n      }));                                                                                                             // 551\n    });                                                                                                                // 552\n  },                                                                                                                   // 553\n  _beSteady: function () {                                                                                             // 554\n    var self = this;                                                                                                   // 555\n                                                                                                                       //\n    Meteor._noYieldsAllowed(function () {                                                                              // 556\n      self._registerPhaseChange(PHASE.STEADY);                                                                         // 557\n                                                                                                                       //\n      var writes = self._writesToCommitWhenWeReachSteady;                                                              // 558\n      self._writesToCommitWhenWeReachSteady = [];                                                                      // 559\n                                                                                                                       //\n      self._multiplexer.onFlush(function () {                                                                          // 560\n        _.each(writes, function (w) {                                                                                  // 561\n          w.committed();                                                                                               // 562\n        });                                                                                                            // 563\n      });                                                                                                              // 564\n    });                                                                                                                // 565\n  },                                                                                                                   // 566\n  _handleOplogEntryQuerying: function (op) {                                                                           // 567\n    var self = this;                                                                                                   // 568\n                                                                                                                       //\n    Meteor._noYieldsAllowed(function () {                                                                              // 569\n      self._needToFetch.set(idForOp(op), op.ts.toString());                                                            // 570\n    });                                                                                                                // 571\n  },                                                                                                                   // 572\n  _handleOplogEntrySteadyOrFetching: function (op) {                                                                   // 573\n    var self = this;                                                                                                   // 574\n                                                                                                                       //\n    Meteor._noYieldsAllowed(function () {                                                                              // 575\n      var id = idForOp(op); // If we're already fetching this one, or about to, we can't optimize;                     // 576\n      // make sure that we fetch it again if necessary.                                                                // 578\n                                                                                                                       //\n      if (self._phase === PHASE.FETCHING && (self._currentlyFetching && self._currentlyFetching.has(id) || self._needToFetch.has(id))) {\n        self._needToFetch.set(id, op.ts.toString());                                                                   // 582\n                                                                                                                       //\n        return;                                                                                                        // 583\n      }                                                                                                                // 584\n                                                                                                                       //\n      if (op.op === 'd') {                                                                                             // 586\n        if (self._published.has(id) || self._limit && self._unpublishedBuffer.has(id)) self._removeMatching(id);       // 587\n      } else if (op.op === 'i') {                                                                                      // 590\n        if (self._published.has(id)) throw new Error(\"insert found for already-existing ID in published\");             // 591\n        if (self._unpublishedBuffer && self._unpublishedBuffer.has(id)) throw new Error(\"insert found for already-existing ID in buffer\"); // XXX what if selector yields?  for now it can't but later it could\n        // have $where                                                                                                 // 597\n                                                                                                                       //\n        if (self._matcher.documentMatches(op.o).result) self._addMatching(op.o);                                       // 598\n      } else if (op.op === 'u') {                                                                                      // 600\n        // Is this a modifier ($set/$unset, which may require us to poll the                                           // 601\n        // database to figure out if the whole document matches the selector) or                                       // 602\n        // a replacement (in which case we can just directly re-evaluate the                                           // 603\n        // selector)?                                                                                                  // 604\n        var isReplace = !_.has(op.o, '$set') && !_.has(op.o, '$unset'); // If this modifier modifies something inside an EJSON custom type (ie,\n        // anything with EJSON$), then we can't try to use                                                             // 607\n        // LocalCollection._modify, since that just mutates the EJSON encoding,                                        // 608\n        // not the actual object.                                                                                      // 609\n                                                                                                                       //\n        var canDirectlyModifyDoc = !isReplace && modifierCanBeDirectlyApplied(op.o);                                   // 610\n                                                                                                                       //\n        var publishedBefore = self._published.has(id);                                                                 // 613\n                                                                                                                       //\n        var bufferedBefore = self._limit && self._unpublishedBuffer.has(id);                                           // 614\n                                                                                                                       //\n        if (isReplace) {                                                                                               // 616\n          self._handleDoc(id, _.extend({                                                                               // 617\n            _id: id                                                                                                    // 617\n          }, op.o));                                                                                                   // 617\n        } else if ((publishedBefore || bufferedBefore) && canDirectlyModifyDoc) {                                      // 618\n          // Oh great, we actually know what the document is, so we can apply                                          // 620\n          // this directly.                                                                                            // 621\n          var newDoc = self._published.has(id) ? self._published.get(id) : self._unpublishedBuffer.get(id);            // 622\n          newDoc = EJSON.clone(newDoc);                                                                                // 624\n          newDoc._id = id;                                                                                             // 626\n                                                                                                                       //\n          try {                                                                                                        // 627\n            LocalCollection._modify(newDoc, op.o);                                                                     // 628\n          } catch (e) {                                                                                                // 629\n            if (e.name !== \"MinimongoError\") throw e; // We didn't understand the modifier.  Re-fetch.                 // 630\n                                                                                                                       //\n            self._needToFetch.set(id, op.ts.toString());                                                               // 633\n                                                                                                                       //\n            if (self._phase === PHASE.STEADY) {                                                                        // 634\n              self._fetchModifiedDocuments();                                                                          // 635\n            }                                                                                                          // 636\n                                                                                                                       //\n            return;                                                                                                    // 637\n          }                                                                                                            // 638\n                                                                                                                       //\n          self._handleDoc(id, self._sharedProjectionFn(newDoc));                                                       // 639\n        } else if (!canDirectlyModifyDoc || self._matcher.canBecomeTrueByModifier(op.o) || self._sorter && self._sorter.affectedByModifier(op.o)) {\n          self._needToFetch.set(id, op.ts.toString());                                                                 // 643\n                                                                                                                       //\n          if (self._phase === PHASE.STEADY) self._fetchModifiedDocuments();                                            // 644\n        }                                                                                                              // 646\n      } else {                                                                                                         // 647\n        throw Error(\"XXX SURPRISING OPERATION: \" + op);                                                                // 648\n      }                                                                                                                // 649\n    });                                                                                                                // 650\n  },                                                                                                                   // 651\n  // Yields!                                                                                                           // 652\n  _runInitialQuery: function () {                                                                                      // 653\n    var self = this;                                                                                                   // 654\n    if (self._stopped) throw new Error(\"oplog stopped surprisingly early\");                                            // 655\n                                                                                                                       //\n    self._runQuery({                                                                                                   // 658\n      initial: true                                                                                                    // 658\n    }); // yields                                                                                                      // 658\n                                                                                                                       //\n                                                                                                                       //\n    if (self._stopped) return; // can happen on queryError                                                             // 660\n    // Allow observeChanges calls to return. (After this, it's possible for                                            // 663\n    // stop() to be called.)                                                                                           // 664\n                                                                                                                       //\n    self._multiplexer.ready();                                                                                         // 665\n                                                                                                                       //\n    self._doneQuerying(); // yields                                                                                    // 667\n                                                                                                                       //\n  },                                                                                                                   // 668\n  // In various circumstances, we may just want to stop processing the oplog and                                       // 670\n  // re-run the initial query, just as if we were a PollingObserveDriver.                                              // 671\n  //                                                                                                                   // 672\n  // This function may not block, because it is called from an oplog entry                                             // 673\n  // handler.                                                                                                          // 674\n  //                                                                                                                   // 675\n  // XXX We should call this when we detect that we've been in FETCHING for \"too                                       // 676\n  // long\".                                                                                                            // 677\n  //                                                                                                                   // 678\n  // XXX We should call this when we detect Mongo failover (since that might                                           // 679\n  // mean that some of the oplog entries we have processed have been rolled                                            // 680\n  // back). The Node Mongo driver is in the middle of a bunch of huge                                                  // 681\n  // refactorings, including the way that it notifies you when primary                                                 // 682\n  // changes. Will put off implementing this until driver 1.4 is out.                                                  // 683\n  _pollQuery: function () {                                                                                            // 684\n    var self = this;                                                                                                   // 685\n                                                                                                                       //\n    Meteor._noYieldsAllowed(function () {                                                                              // 686\n      if (self._stopped) return; // Yay, we get to forget about all the things we thought we had to fetch.             // 687\n                                                                                                                       //\n      self._needToFetch = new LocalCollection._IdMap();                                                                // 691\n      self._currentlyFetching = null;                                                                                  // 692\n      ++self._fetchGeneration; // ignore any in-flight fetches                                                         // 693\n                                                                                                                       //\n      self._registerPhaseChange(PHASE.QUERYING); // Defer so that we don't yield.  We don't need finishIfNeedToPollQuery\n      // here because SwitchedToQuery is not thrown in QUERYING mode.                                                  // 697\n                                                                                                                       //\n                                                                                                                       //\n      Meteor.defer(function () {                                                                                       // 698\n        self._runQuery();                                                                                              // 699\n                                                                                                                       //\n        self._doneQuerying();                                                                                          // 700\n      });                                                                                                              // 701\n    });                                                                                                                // 702\n  },                                                                                                                   // 703\n  // Yields!                                                                                                           // 705\n  _runQuery: function (options) {                                                                                      // 706\n    var self = this;                                                                                                   // 707\n    options = options || {};                                                                                           // 708\n    var newResults, newBuffer; // This while loop is just to retry failures.                                           // 709\n                                                                                                                       //\n    while (true) {                                                                                                     // 712\n      // If we've been stopped, we don't have to run anything any more.                                                // 713\n      if (self._stopped) return;                                                                                       // 714\n      newResults = new LocalCollection._IdMap();                                                                       // 717\n      newBuffer = new LocalCollection._IdMap(); // Query 2x documents as the half excluded from the original query will go\n      // into unpublished buffer to reduce additional Mongo lookups in cases                                           // 721\n      // when documents are removed from the published set and need a                                                  // 722\n      // replacement.                                                                                                  // 723\n      // XXX needs more thought on non-zero skip                                                                       // 724\n      // XXX 2 is a \"magic number\" meaning there is an extra chunk of docs for                                         // 725\n      // buffer if such is needed.                                                                                     // 726\n                                                                                                                       //\n      var cursor = self._cursorForQuery({                                                                              // 727\n        limit: self._limit * 2                                                                                         // 727\n      });                                                                                                              // 727\n                                                                                                                       //\n      try {                                                                                                            // 728\n        cursor.forEach(function (doc, i) {                                                                             // 729\n          // yields                                                                                                    // 729\n          if (!self._limit || i < self._limit) {                                                                       // 730\n            newResults.set(doc._id, doc);                                                                              // 731\n          } else {                                                                                                     // 732\n            newBuffer.set(doc._id, doc);                                                                               // 733\n          }                                                                                                            // 734\n        });                                                                                                            // 735\n        break;                                                                                                         // 736\n      } catch (e) {                                                                                                    // 737\n        if (options.initial && typeof e.code === 'number') {                                                           // 738\n          // This is an error document sent to us by mongod, not a connection                                          // 739\n          // error generated by the client. And we've never seen this query work                                       // 740\n          // successfully. Probably it's a bad selector or something, so we                                            // 741\n          // should NOT retry. Instead, we should halt the observe (which ends                                         // 742\n          // up calling `stop` on us).                                                                                 // 743\n          self._multiplexer.queryError(e);                                                                             // 744\n                                                                                                                       //\n          return;                                                                                                      // 745\n        } // During failover (eg) if we get an exception we should log and retry                                       // 746\n        // instead of crashing.                                                                                        // 749\n                                                                                                                       //\n                                                                                                                       //\n        Meteor._debug(\"Got exception while polling query: \" + e);                                                      // 750\n                                                                                                                       //\n        Meteor._sleepForMs(100);                                                                                       // 751\n      }                                                                                                                // 752\n    }                                                                                                                  // 753\n                                                                                                                       //\n    if (self._stopped) return;                                                                                         // 755\n                                                                                                                       //\n    self._publishNewResults(newResults, newBuffer);                                                                    // 758\n  },                                                                                                                   // 759\n  // Transitions to QUERYING and runs another query, or (if already in QUERYING)                                       // 761\n  // ensures that we will query again later.                                                                           // 762\n  //                                                                                                                   // 763\n  // This function may not block, because it is called from an oplog entry                                             // 764\n  // handler. However, if we were not already in the QUERYING phase, it throws                                         // 765\n  // an exception that is caught by the closest surrounding                                                            // 766\n  // finishIfNeedToPollQuery call; this ensures that we don't continue running                                         // 767\n  // close that was designed for another phase inside PHASE.QUERYING.                                                  // 768\n  //                                                                                                                   // 769\n  // (It's also necessary whenever logic in this file yields to check that other                                       // 770\n  // phases haven't put us into QUERYING mode, though; eg,                                                             // 771\n  // _fetchModifiedDocuments does this.)                                                                               // 772\n  _needToPollQuery: function () {                                                                                      // 773\n    var self = this;                                                                                                   // 774\n                                                                                                                       //\n    Meteor._noYieldsAllowed(function () {                                                                              // 775\n      if (self._stopped) return; // If we're not already in the middle of a query, we can query now                    // 776\n      // (possibly pausing FETCHING).                                                                                  // 780\n                                                                                                                       //\n      if (self._phase !== PHASE.QUERYING) {                                                                            // 781\n        self._pollQuery();                                                                                             // 782\n                                                                                                                       //\n        throw new SwitchedToQuery();                                                                                   // 783\n      } // We're currently in QUERYING. Set a flag to ensure that we run another                                       // 784\n      // query when we're done.                                                                                        // 787\n                                                                                                                       //\n                                                                                                                       //\n      self._requeryWhenDoneThisQuery = true;                                                                           // 788\n    });                                                                                                                // 789\n  },                                                                                                                   // 790\n  // Yields!                                                                                                           // 792\n  _doneQuerying: function () {                                                                                         // 793\n    var self = this;                                                                                                   // 794\n    if (self._stopped) return;                                                                                         // 796\n                                                                                                                       //\n    self._mongoHandle._oplogHandle.waitUntilCaughtUp(); // yields                                                      // 798\n                                                                                                                       //\n                                                                                                                       //\n    if (self._stopped) return;                                                                                         // 799\n    if (self._phase !== PHASE.QUERYING) throw Error(\"Phase unexpectedly \" + self._phase);                              // 801\n                                                                                                                       //\n    Meteor._noYieldsAllowed(function () {                                                                              // 804\n      if (self._requeryWhenDoneThisQuery) {                                                                            // 805\n        self._requeryWhenDoneThisQuery = false;                                                                        // 806\n                                                                                                                       //\n        self._pollQuery();                                                                                             // 807\n      } else if (self._needToFetch.empty()) {                                                                          // 808\n        self._beSteady();                                                                                              // 809\n      } else {                                                                                                         // 810\n        self._fetchModifiedDocuments();                                                                                // 811\n      }                                                                                                                // 812\n    });                                                                                                                // 813\n  },                                                                                                                   // 814\n  _cursorForQuery: function (optionsOverwrite) {                                                                       // 816\n    var self = this;                                                                                                   // 817\n    return Meteor._noYieldsAllowed(function () {                                                                       // 818\n      // The query we run is almost the same as the cursor we are observing,                                           // 819\n      // with a few changes. We need to read all the fields that are relevant to                                       // 820\n      // the selector, not just the fields we are going to publish (that's the                                         // 821\n      // \"shared\" projection). And we don't want to apply any transform in the                                         // 822\n      // cursor, because observeChanges shouldn't use the transform.                                                   // 823\n      var options = _.clone(self._cursorDescription.options); // Allow the caller to modify the options. Useful to specify different\n      // skip and limit values.                                                                                        // 827\n                                                                                                                       //\n                                                                                                                       //\n      _.extend(options, optionsOverwrite);                                                                             // 828\n                                                                                                                       //\n      options.fields = self._sharedProjection;                                                                         // 830\n      delete options.transform; // We are NOT deep cloning fields or selector here, which should be OK.                // 831\n                                                                                                                       //\n      var description = new CursorDescription(self._cursorDescription.collectionName, self._cursorDescription.selector, options);\n      return new Cursor(self._mongoHandle, description);                                                               // 837\n    });                                                                                                                // 838\n  },                                                                                                                   // 839\n  // Replace self._published with newResults (both are IdMaps), invoking observe                                       // 842\n  // callbacks on the multiplexer.                                                                                     // 843\n  // Replace self._unpublishedBuffer with newBuffer.                                                                   // 844\n  //                                                                                                                   // 845\n  // XXX This is very similar to LocalCollection._diffQueryUnorderedChanges. We                                        // 846\n  // should really: (a) Unify IdMap and OrderedDict into Unordered/OrderedDict                                         // 847\n  // (b) Rewrite diff.js to use these classes instead of arrays and objects.                                           // 848\n  _publishNewResults: function (newResults, newBuffer) {                                                               // 849\n    var self = this;                                                                                                   // 850\n                                                                                                                       //\n    Meteor._noYieldsAllowed(function () {                                                                              // 851\n      // If the query is limited and there is a buffer, shut down so it doesn't                                        // 853\n      // stay in a way.                                                                                                // 854\n      if (self._limit) {                                                                                               // 855\n        self._unpublishedBuffer.clear();                                                                               // 856\n      } // First remove anything that's gone. Be careful not to modify                                                 // 857\n      // self._published while iterating over it.                                                                      // 860\n                                                                                                                       //\n                                                                                                                       //\n      var idsToRemove = [];                                                                                            // 861\n                                                                                                                       //\n      self._published.forEach(function (doc, id) {                                                                     // 862\n        if (!newResults.has(id)) idsToRemove.push(id);                                                                 // 863\n      });                                                                                                              // 865\n                                                                                                                       //\n      _.each(idsToRemove, function (id) {                                                                              // 866\n        self._removePublished(id);                                                                                     // 867\n      }); // Now do adds and changes.                                                                                  // 868\n      // If self has a buffer and limit, the new fetched result will be                                                // 871\n      // limited correctly as the query has sort specifier.                                                            // 872\n                                                                                                                       //\n                                                                                                                       //\n      newResults.forEach(function (doc, id) {                                                                          // 873\n        self._handleDoc(id, doc);                                                                                      // 874\n      }); // Sanity-check that everything we tried to put into _published ended up                                     // 875\n      // there.                                                                                                        // 878\n      // XXX if this is slow, remove it later                                                                          // 879\n                                                                                                                       //\n      if (self._published.size() !== newResults.size()) {                                                              // 880\n        throw Error(\"The Mongo server and the Meteor query disagree on how \" + \"many documents match your query. Maybe it is hitting a Mongo \" + \"edge case? The query is: \" + EJSON.stringify(self._cursorDescription.selector));\n      }                                                                                                                // 886\n                                                                                                                       //\n      self._published.forEach(function (doc, id) {                                                                     // 887\n        if (!newResults.has(id)) throw Error(\"_published has a doc that newResults doesn't; \" + id);                   // 888\n      }); // Finally, replace the buffer                                                                               // 890\n                                                                                                                       //\n                                                                                                                       //\n      newBuffer.forEach(function (doc, id) {                                                                           // 893\n        self._addBuffered(id, doc);                                                                                    // 894\n      });                                                                                                              // 895\n      self._safeAppendToBuffer = newBuffer.size() < self._limit;                                                       // 897\n    });                                                                                                                // 898\n  },                                                                                                                   // 899\n  // This stop function is invoked from the onStop of the ObserveMultiplexer, so                                       // 901\n  // it shouldn't actually be possible to call it until the multiplexer is                                             // 902\n  // ready.                                                                                                            // 903\n  //                                                                                                                   // 904\n  // It's important to check self._stopped after every call in this file that                                          // 905\n  // can yield!                                                                                                        // 906\n  stop: function () {                                                                                                  // 907\n    var self = this;                                                                                                   // 908\n    if (self._stopped) return;                                                                                         // 909\n    self._stopped = true;                                                                                              // 911\n                                                                                                                       //\n    _.each(self._stopHandles, function (handle) {                                                                      // 912\n      handle.stop();                                                                                                   // 913\n    }); // Note: we *don't* use multiplexer.onFlush here because this stop                                             // 914\n    // callback is actually invoked by the multiplexer itself when it has                                              // 917\n    // determined that there are no handles left. So nothing is actually going                                         // 918\n    // to get flushed (and it's probably not valid to call methods on the                                              // 919\n    // dying multiplexer).                                                                                             // 920\n                                                                                                                       //\n                                                                                                                       //\n    _.each(self._writesToCommitWhenWeReachSteady, function (w) {                                                       // 921\n      w.committed(); // maybe yields?                                                                                  // 922\n    });                                                                                                                // 923\n                                                                                                                       //\n    self._writesToCommitWhenWeReachSteady = null; // Proactively drop references to potentially big things.            // 924\n                                                                                                                       //\n    self._published = null;                                                                                            // 927\n    self._unpublishedBuffer = null;                                                                                    // 928\n    self._needToFetch = null;                                                                                          // 929\n    self._currentlyFetching = null;                                                                                    // 930\n    self._oplogEntryHandle = null;                                                                                     // 931\n    self._listenersHandle = null;                                                                                      // 932\n    Package.facts && Package.facts.Facts.incrementServerFact(\"mongo-livedata\", \"observe-drivers-oplog\", -1);           // 934\n  },                                                                                                                   // 936\n  _registerPhaseChange: function (phase) {                                                                             // 938\n    var self = this;                                                                                                   // 939\n                                                                                                                       //\n    Meteor._noYieldsAllowed(function () {                                                                              // 940\n      var now = new Date();                                                                                            // 941\n                                                                                                                       //\n      if (self._phase) {                                                                                               // 943\n        var timeDiff = now - self._phaseStartTime;                                                                     // 944\n        Package.facts && Package.facts.Facts.incrementServerFact(\"mongo-livedata\", \"time-spent-in-\" + self._phase + \"-phase\", timeDiff);\n      }                                                                                                                // 947\n                                                                                                                       //\n      self._phase = phase;                                                                                             // 949\n      self._phaseStartTime = now;                                                                                      // 950\n    });                                                                                                                // 951\n  }                                                                                                                    // 952\n}); // Does our oplog tailing code support this cursor? For now, we are being very                                     // 195\n// conservative and allowing only simple queries with simple options.                                                  // 956\n// (This is a \"static method\".)                                                                                        // 957\n                                                                                                                       //\n                                                                                                                       //\nOplogObserveDriver.cursorSupported = function (cursorDescription, matcher) {                                           // 958\n  // First, check the options.                                                                                         // 959\n  var options = cursorDescription.options; // Did the user say no explicitly?                                          // 960\n  // underscored version of the option is COMPAT with 1.2                                                              // 963\n                                                                                                                       //\n  if (options.disableOplog || options._disableOplog) return false; // skip is not supported: to support it we would need to keep track of all\n  // \"skipped\" documents or at least their ids.                                                                        // 968\n  // limit w/o a sort specifier is not supported: current implementation needs a                                       // 969\n  // deterministic way to order documents.                                                                             // 970\n                                                                                                                       //\n  if (options.skip || options.limit && !options.sort) return false; // If a fields projection option is given check if it is supported by\n  // minimongo (some operators are not supported).                                                                     // 974\n                                                                                                                       //\n  if (options.fields) {                                                                                                // 975\n    try {                                                                                                              // 976\n      LocalCollection._checkSupportedProjection(options.fields);                                                       // 977\n    } catch (e) {                                                                                                      // 978\n      if (e.name === \"MinimongoError\") {                                                                               // 979\n        return false;                                                                                                  // 980\n      } else {                                                                                                         // 981\n        throw e;                                                                                                       // 982\n      }                                                                                                                // 983\n    }                                                                                                                  // 984\n  } // We don't allow the following selectors:                                                                         // 985\n  //   - $where (not confident that we provide the same JS environment                                                 // 988\n  //             as Mongo, and can yield!)                                                                             // 989\n  //   - $near (has \"interesting\" properties in MongoDB, like the possibility                                          // 990\n  //            of returning an ID multiple times, though even polling maybe                                           // 991\n  //            have a bug there)                                                                                      // 992\n  //           XXX: once we support it, we would need to think more on how we                                          // 993\n  //           initialize the comparators when we create the driver.                                                   // 994\n                                                                                                                       //\n                                                                                                                       //\n  return !matcher.hasWhere() && !matcher.hasGeoQuery();                                                                // 995\n};                                                                                                                     // 996\n                                                                                                                       //\nvar modifierCanBeDirectlyApplied = function (modifier) {                                                               // 998\n  return _.all(modifier, function (fields, operation) {                                                                // 999\n    return _.all(fields, function (value, field) {                                                                     // 1000\n      return !/EJSON\\$/.test(field);                                                                                   // 1001\n    });                                                                                                                // 1002\n  });                                                                                                                  // 1003\n};                                                                                                                     // 1004\n                                                                                                                       //\nMongoInternals.OplogObserveDriver = OplogObserveDriver;                                                                // 1006\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"local_collection_driver.js\":function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/mongo/local_collection_driver.js                                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nLocalCollectionDriver = function () {                                                                                  // 1\n  var self = this;                                                                                                     // 2\n  self.noConnCollections = {};                                                                                         // 3\n};                                                                                                                     // 4\n                                                                                                                       //\nvar ensureCollection = function (name, collections) {                                                                  // 6\n  if (!(name in collections)) collections[name] = new LocalCollection(name);                                           // 7\n  return collections[name];                                                                                            // 9\n};                                                                                                                     // 10\n                                                                                                                       //\n_.extend(LocalCollectionDriver.prototype, {                                                                            // 12\n  open: function (name, conn) {                                                                                        // 13\n    var self = this;                                                                                                   // 14\n    if (!name) return new LocalCollection();                                                                           // 15\n                                                                                                                       //\n    if (!conn) {                                                                                                       // 17\n      return ensureCollection(name, self.noConnCollections);                                                           // 18\n    }                                                                                                                  // 19\n                                                                                                                       //\n    if (!conn._mongo_livedata_collections) conn._mongo_livedata_collections = {}; // XXX is there a way to keep track of a connection's collections without\n    // dangling it off the connection object?                                                                          // 23\n                                                                                                                       //\n    return ensureCollection(name, conn._mongo_livedata_collections);                                                   // 24\n  }                                                                                                                    // 25\n}); // singleton                                                                                                       // 12\n                                                                                                                       //\n                                                                                                                       //\nLocalCollectionDriver = new LocalCollectionDriver();                                                                   // 29\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"remote_collection_driver.js\":function(require){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/mongo/remote_collection_driver.js                                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nMongoInternals.RemoteCollectionDriver = function (mongo_url, options) {                                                // 1\n  var self = this;                                                                                                     // 3\n  self.mongo = new MongoConnection(mongo_url, options);                                                                // 4\n};                                                                                                                     // 5\n                                                                                                                       //\n_.extend(MongoInternals.RemoteCollectionDriver.prototype, {                                                            // 7\n  open: function (name) {                                                                                              // 8\n    var self = this;                                                                                                   // 9\n    var ret = {};                                                                                                      // 10\n                                                                                                                       //\n    _.each(['find', 'findOne', 'insert', 'update', 'upsert', 'remove', '_ensureIndex', '_dropIndex', '_createCappedCollection', 'dropCollection', 'rawCollection'], function (m) {\n      ret[m] = _.bind(self.mongo[m], self.mongo, name);                                                                // 16\n    });                                                                                                                // 17\n                                                                                                                       //\n    return ret;                                                                                                        // 18\n  }                                                                                                                    // 19\n}); // Create the singleton RemoteCollectionDriver only on demand, so we                                               // 7\n// only require Mongo configuration if it's actually used (eg, not if                                                  // 24\n// you're only trying to receive data from a remote DDP server.)                                                       // 25\n                                                                                                                       //\n                                                                                                                       //\nMongoInternals.defaultRemoteCollectionDriver = _.once(function () {                                                    // 26\n  var connectionOptions = {};                                                                                          // 27\n  var mongoUrl = process.env.MONGO_URL;                                                                                // 29\n                                                                                                                       //\n  if (process.env.MONGO_OPLOG_URL) {                                                                                   // 31\n    connectionOptions.oplogUrl = process.env.MONGO_OPLOG_URL;                                                          // 32\n  }                                                                                                                    // 33\n                                                                                                                       //\n  if (!mongoUrl) throw new Error(\"MONGO_URL must be set in environment\");                                              // 35\n  return new MongoInternals.RemoteCollectionDriver(mongoUrl, connectionOptions);                                       // 38\n});                                                                                                                    // 39\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"collection.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/mongo/collection.js                                                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// options.connection, if given, is a LivedataClient or LivedataServer                                                 // 1\n// XXX presently there is no way to destroy/clean up a Collection                                                      // 2\n/**                                                                                                                    // 4\n * @summary Namespace for MongoDB-related items                                                                        //\n * @namespace                                                                                                          //\n */Mongo = {}; /**                                                                                                     //\n                * @summary Constructor for a Collection                                                                //\n                * @locus Anywhere                                                                                      //\n                * @instancename collection                                                                             //\n                * @class                                                                                               //\n                * @param {String} name The name of the collection.  If null, creates an unmanaged (unsynchronized) local collection.\n                * @param {Object} [options]                                                                            //\n                * @param {Object} options.connection The server connection that will manage this collection. Uses the default connection if not specified.  Pass the return value of calling [`DDP.connect`](#ddp_connect) to specify a different server. Pass `null` to specify no connection. Unmanaged (`name` is null) collections cannot specify a connection.\n                * @param {String} options.idGeneration The method of generating the `_id` fields of new documents in this collection.  Possible values:\n                                                                                                                       //\n                - **`'STRING'`**: random strings                                                                       //\n                - **`'MONGO'`**:  random [`Mongo.ObjectID`](#mongo_object_id) values                                   //\n                                                                                                                       //\n               The default id generation technique is `'STRING'`.                                                      //\n                * @param {Function} options.transform An optional transformation function. Documents will be passed through this function before being returned from `fetch` or `findOne`, and before being passed to callbacks of `observe`, `map`, `forEach`, `allow`, and `deny`. Transforms are *not* applied for the callbacks of `observeChanges` or to cursors returned from publish functions.\n                * @param {Boolean} options.defineMutationMethods Set to `false` to skip setting up the mutation methods that enable insert/update/remove from client code. Default `true`.\n                */                                                                                                     //\n                                                                                                                       //\nMongo.Collection = function (name, options) {                                                                          // 27\n  var self = this;                                                                                                     // 28\n  if (!(self instanceof Mongo.Collection)) throw new Error('use \"new\" to construct a Mongo.Collection');               // 29\n                                                                                                                       //\n  if (!name && name !== null) {                                                                                        // 32\n    Meteor._debug(\"Warning: creating anonymous collection. It will not be \" + \"saved or synchronized over the network. (Pass null for \" + \"the collection name to turn off this warning.)\");\n                                                                                                                       //\n    name = null;                                                                                                       // 36\n  }                                                                                                                    // 37\n                                                                                                                       //\n  if (name !== null && typeof name !== \"string\") {                                                                     // 39\n    throw new Error(\"First argument to new Mongo.Collection must be a string or null\");                                // 40\n  }                                                                                                                    // 42\n                                                                                                                       //\n  if (options && options.methods) {                                                                                    // 44\n    // Backwards compatibility hack with original signature (which passed                                              // 45\n    // \"connection\" directly instead of in options. (Connections must have a \"methods\"                                 // 46\n    // method.)                                                                                                        // 47\n    // XXX remove before 1.0                                                                                           // 48\n    options = {                                                                                                        // 49\n      connection: options                                                                                              // 49\n    };                                                                                                                 // 49\n  } // Backwards compatibility: \"connection\" used to be called \"manager\".                                              // 50\n                                                                                                                       //\n                                                                                                                       //\n  if (options && options.manager && !options.connection) {                                                             // 52\n    options.connection = options.manager;                                                                              // 53\n  }                                                                                                                    // 54\n                                                                                                                       //\n  options = _.extend({                                                                                                 // 55\n    connection: undefined,                                                                                             // 56\n    idGeneration: 'STRING',                                                                                            // 57\n    transform: null,                                                                                                   // 58\n    _driver: undefined,                                                                                                // 59\n    _preventAutopublish: false                                                                                         // 60\n  }, options);                                                                                                         // 55\n                                                                                                                       //\n  switch (options.idGeneration) {                                                                                      // 63\n    case 'MONGO':                                                                                                      // 64\n      self._makeNewID = function () {                                                                                  // 65\n        var src = name ? DDP.randomStream('/collection/' + name) : Random.insecure;                                    // 66\n        return new Mongo.ObjectID(src.hexString(24));                                                                  // 67\n      };                                                                                                               // 68\n                                                                                                                       //\n      break;                                                                                                           // 69\n                                                                                                                       //\n    case 'STRING':                                                                                                     // 70\n    default:                                                                                                           // 71\n      self._makeNewID = function () {                                                                                  // 72\n        var src = name ? DDP.randomStream('/collection/' + name) : Random.insecure;                                    // 73\n        return src.id();                                                                                               // 74\n      };                                                                                                               // 75\n                                                                                                                       //\n      break;                                                                                                           // 76\n  }                                                                                                                    // 63\n                                                                                                                       //\n  self._transform = LocalCollection.wrapTransform(options.transform);                                                  // 79\n  if (!name || options.connection === null) // note: nameless collections never have a connection                      // 81\n    self._connection = null;else if (options.connection) self._connection = options.connection;else if (Meteor.isClient) self._connection = Meteor.connection;else self._connection = Meteor.server;\n                                                                                                                       //\n  if (!options._driver) {                                                                                              // 91\n    // XXX This check assumes that webapp is loaded so that Meteor.server !==                                          // 92\n    // null. We should fully support the case of \"want to use a Mongo-backed                                           // 93\n    // collection from Node code without webapp\", but we don't yet.                                                    // 94\n    // #MeteorServerNull                                                                                               // 95\n    if (name && self._connection === Meteor.server && typeof MongoInternals !== \"undefined\" && MongoInternals.defaultRemoteCollectionDriver) {\n      options._driver = MongoInternals.defaultRemoteCollectionDriver();                                                // 99\n    } else {                                                                                                           // 100\n      options._driver = LocalCollectionDriver;                                                                         // 101\n    }                                                                                                                  // 102\n  }                                                                                                                    // 103\n                                                                                                                       //\n  self._collection = options._driver.open(name, self._connection);                                                     // 105\n  self._name = name;                                                                                                   // 106\n  self._driver = options._driver;                                                                                      // 107\n                                                                                                                       //\n  if (self._connection && self._connection.registerStore) {                                                            // 109\n    // OK, we're going to be a slave, replicating some remote                                                          // 110\n    // database, except possibly with some temporary divergence while                                                  // 111\n    // we have unacknowledged RPC's.                                                                                   // 112\n    var ok = self._connection.registerStore(name, {                                                                    // 113\n      // Called at the beginning of a batch of updates. batchSize is the number                                        // 114\n      // of update calls to expect.                                                                                    // 115\n      //                                                                                                               // 116\n      // XXX This interface is pretty janky. reset probably ought to go back to                                        // 117\n      // being its own function, and callers shouldn't have to calculate                                               // 118\n      // batchSize. The optimization of not calling pause/remove should be                                             // 119\n      // delayed until later: the first call to update() should buffer its                                             // 120\n      // message, and then we can either directly apply it at endUpdate time if                                        // 121\n      // it was the only update, or do pauseObservers/apply/apply at the next                                          // 122\n      // update() if there's another one.                                                                              // 123\n      beginUpdate: function (batchSize, reset) {                                                                       // 124\n        // pause observers so users don't see flicker when updating several                                            // 125\n        // objects at once (including the post-reconnect reset-and-reapply                                             // 126\n        // stage), and so that a re-sorting of a query can take advantage of the                                       // 127\n        // full _diffQuery moved calculation instead of applying change one at a                                       // 128\n        // time.                                                                                                       // 129\n        if (batchSize > 1 || reset) self._collection.pauseObservers();                                                 // 130\n        if (reset) self._collection.remove({});                                                                        // 133\n      },                                                                                                               // 135\n      // Apply an update.                                                                                              // 137\n      // XXX better specify this interface (not in terms of a wire message)?                                           // 138\n      update: function (msg) {                                                                                         // 139\n        var mongoId = MongoID.idParse(msg.id);                                                                         // 140\n                                                                                                                       //\n        var doc = self._collection.findOne(mongoId); // Is this a \"replace the whole doc\" message coming from the quiescence\n        // of method writes to an object? (Note that 'undefined' is a valid                                            // 144\n        // value meaning \"remove it\".)                                                                                 // 145\n                                                                                                                       //\n                                                                                                                       //\n        if (msg.msg === 'replace') {                                                                                   // 146\n          var replace = msg.replace;                                                                                   // 147\n                                                                                                                       //\n          if (!replace) {                                                                                              // 148\n            if (doc) self._collection.remove(mongoId);                                                                 // 149\n          } else if (!doc) {                                                                                           // 151\n            self._collection.insert(replace);                                                                          // 152\n          } else {                                                                                                     // 153\n            // XXX check that replace has no $ ops                                                                     // 154\n            self._collection.update(mongoId, replace);                                                                 // 155\n          }                                                                                                            // 156\n                                                                                                                       //\n          return;                                                                                                      // 157\n        } else if (msg.msg === 'added') {                                                                              // 158\n          if (doc) {                                                                                                   // 159\n            throw new Error(\"Expected not to find a document already present for an add\");                             // 160\n          }                                                                                                            // 161\n                                                                                                                       //\n          self._collection.insert(_.extend({                                                                           // 162\n            _id: mongoId                                                                                               // 162\n          }, msg.fields));                                                                                             // 162\n        } else if (msg.msg === 'removed') {                                                                            // 163\n          if (!doc) throw new Error(\"Expected to find a document already present for removed\");                        // 164\n                                                                                                                       //\n          self._collection.remove(mongoId);                                                                            // 166\n        } else if (msg.msg === 'changed') {                                                                            // 167\n          if (!doc) throw new Error(\"Expected to find a document to change\");                                          // 168\n                                                                                                                       //\n          if (!_.isEmpty(msg.fields)) {                                                                                // 170\n            var modifier = {};                                                                                         // 171\n                                                                                                                       //\n            _.each(msg.fields, function (value, key) {                                                                 // 172\n              if (value === undefined) {                                                                               // 173\n                if (!modifier.$unset) modifier.$unset = {};                                                            // 174\n                modifier.$unset[key] = 1;                                                                              // 176\n              } else {                                                                                                 // 177\n                if (!modifier.$set) modifier.$set = {};                                                                // 178\n                modifier.$set[key] = value;                                                                            // 180\n              }                                                                                                        // 181\n            });                                                                                                        // 182\n                                                                                                                       //\n            self._collection.update(mongoId, modifier);                                                                // 183\n          }                                                                                                            // 184\n        } else {                                                                                                       // 185\n          throw new Error(\"I don't know how to deal with this message\");                                               // 186\n        }                                                                                                              // 187\n      },                                                                                                               // 189\n      // Called at the end of a batch of updates.                                                                      // 191\n      endUpdate: function () {                                                                                         // 192\n        self._collection.resumeObservers();                                                                            // 193\n      },                                                                                                               // 194\n      // Called around method stub invocations to capture the original versions                                        // 196\n      // of modified documents.                                                                                        // 197\n      saveOriginals: function () {                                                                                     // 198\n        self._collection.saveOriginals();                                                                              // 199\n      },                                                                                                               // 200\n      retrieveOriginals: function () {                                                                                 // 201\n        return self._collection.retrieveOriginals();                                                                   // 202\n      },                                                                                                               // 203\n      // Used to preserve current versions of documents across a store reset.                                          // 205\n      getDoc: function (id) {                                                                                          // 206\n        return self.findOne(id);                                                                                       // 207\n      },                                                                                                               // 208\n      // To be able to get back to the collection from the store.                                                      // 210\n      _getCollection: function () {                                                                                    // 211\n        return self;                                                                                                   // 212\n      }                                                                                                                // 213\n    });                                                                                                                // 113\n                                                                                                                       //\n    if (!ok) {                                                                                                         // 216\n      var message = \"There is already a collection named \\\"\" + name + \"\\\"\";                                            // 217\n                                                                                                                       //\n      if (options._suppressSameNameError === true) {                                                                   // 218\n        // XXX In theory we do not have to throw when `ok` is falsy. The store is already defined                      // 219\n        // for this collection name, but this will simply be another reference to it and everything                    // 220\n        // should work. However, we have historically thrown an error here, so for now we will                         // 221\n        // skip the error only when `_suppressSameNameError` is `true`, allowing people to opt in                      // 222\n        // and give this some real world testing.                                                                      // 223\n        console.warn ? console.warn(message) : console.log(message);                                                   // 224\n      } else {                                                                                                         // 225\n        throw new Error(message);                                                                                      // 226\n      }                                                                                                                // 227\n    }                                                                                                                  // 228\n  } // XXX don't define these until allow or deny is actually used for this                                            // 229\n  // collection. Could be hard if the security rules are only defined on the                                           // 232\n  // server.                                                                                                           // 233\n                                                                                                                       //\n                                                                                                                       //\n  if (options.defineMutationMethods !== false) {                                                                       // 234\n    try {                                                                                                              // 235\n      self._defineMutationMethods({                                                                                    // 236\n        useExisting: options._suppressSameNameError === true                                                           // 236\n      });                                                                                                              // 236\n    } catch (error) {                                                                                                  // 237\n      // Throw a more understandable error on the server for same collection name                                      // 238\n      if (error.message === \"A method named '/\" + name + \"/insert' is already defined\") throw new Error(\"There is already a collection named \\\"\" + name + \"\\\"\");\n      throw error;                                                                                                     // 241\n    }                                                                                                                  // 242\n  } // autopublish                                                                                                     // 243\n                                                                                                                       //\n                                                                                                                       //\n  if (Package.autopublish && !options._preventAutopublish && self._connection && self._connection.publish) {           // 246\n    self._connection.publish(null, function () {                                                                       // 247\n      return self.find();                                                                                              // 248\n    }, {                                                                                                               // 249\n      is_auto: true                                                                                                    // 249\n    });                                                                                                                // 249\n  }                                                                                                                    // 250\n}; ///                                                                                                                 // 251\n/// Main collection API                                                                                                // 254\n///                                                                                                                    // 255\n                                                                                                                       //\n                                                                                                                       //\n_.extend(Mongo.Collection.prototype, {                                                                                 // 258\n  _getFindSelector: function (args) {                                                                                  // 260\n    if (args.length == 0) return {};else return args[0];                                                               // 261\n  },                                                                                                                   // 265\n  _getFindOptions: function (args) {                                                                                   // 267\n    var self = this;                                                                                                   // 268\n                                                                                                                       //\n    if (args.length < 2) {                                                                                             // 269\n      return {                                                                                                         // 270\n        transform: self._transform                                                                                     // 270\n      };                                                                                                               // 270\n    } else {                                                                                                           // 271\n      check(args[1], Match.Optional(Match.ObjectIncluding({                                                            // 272\n        fields: Match.Optional(Match.OneOf(Object, undefined)),                                                        // 273\n        sort: Match.Optional(Match.OneOf(Object, Array, Function, undefined)),                                         // 274\n        limit: Match.Optional(Match.OneOf(Number, undefined)),                                                         // 275\n        skip: Match.Optional(Match.OneOf(Number, undefined))                                                           // 276\n      })));                                                                                                            // 272\n      return _.extend({                                                                                                // 279\n        transform: self._transform                                                                                     // 280\n      }, args[1]);                                                                                                     // 279\n    }                                                                                                                  // 282\n  },                                                                                                                   // 283\n  /**                                                                                                                  // 285\n   * @summary Find the documents in a collection that match the selector.                                              //\n   * @locus Anywhere                                                                                                   //\n   * @method find                                                                                                      //\n   * @memberOf Mongo.Collection                                                                                        //\n   * @instance                                                                                                         //\n   * @param {MongoSelector} [selector] A query describing the documents to find                                        //\n   * @param {Object} [options]                                                                                         //\n   * @param {MongoSortSpecifier} options.sort Sort order (default: natural order)                                      //\n   * @param {Number} options.skip Number of results to skip at the beginning                                           //\n   * @param {Number} options.limit Maximum number of results to return                                                 //\n   * @param {MongoFieldSpecifier} options.fields Dictionary of fields to return or exclude.                            //\n   * @param {Boolean} options.reactive (Client only) Default `true`; pass `false` to disable reactivity                //\n   * @param {Function} options.transform Overrides `transform` on the  [`Collection`](#collections) for this cursor.  Pass `null` to disable transformation.\n   * @param {Boolean} options.disableOplog (Server only) Pass true to disable oplog-tailing on this query. This affects the way server processes calls to `observe` on this query. Disabling the oplog can be useful when working with data that updates in large batches.\n   * @param {Number} options.pollingIntervalMs (Server only) When oplog is disabled (through the use of `disableOplog` or when otherwise not available), the frequency (in milliseconds) of how often to poll this query when observing on the server. Defaults to 10000ms (10 seconds).\n   * @param {Number} options.pollingThrottleMs (Server only) When oplog is disabled (through the use of `disableOplog` or when otherwise not available), the minimum time (in milliseconds) to allow between re-polling when observing on the server. Increasing this will save CPU and mongo load at the expense of slower updates to users. Decreasing this is not recommended. Defaults to 50ms.\n   * @returns {Mongo.Cursor}                                                                                           //\n   */find: function () /* selector, options */{                                                                        //\n    // Collection.find() (return all docs) behaves differently                                                         // 305\n    // from Collection.find(undefined) (return 0 docs).  so be                                                         // 306\n    // careful about the length of arguments.                                                                          // 307\n    var self = this;                                                                                                   // 308\n                                                                                                                       //\n    var argArray = _.toArray(arguments);                                                                               // 309\n                                                                                                                       //\n    return self._collection.find(self._getFindSelector(argArray), self._getFindOptions(argArray));                     // 310\n  },                                                                                                                   // 312\n  /**                                                                                                                  // 314\n   * @summary Finds the first document that matches the selector, as ordered by sort and skip options. Returns `undefined` if no matching document is found.\n   * @locus Anywhere                                                                                                   //\n   * @method findOne                                                                                                   //\n   * @memberOf Mongo.Collection                                                                                        //\n   * @instance                                                                                                         //\n   * @param {MongoSelector} [selector] A query describing the documents to find                                        //\n   * @param {Object} [options]                                                                                         //\n   * @param {MongoSortSpecifier} options.sort Sort order (default: natural order)                                      //\n   * @param {Number} options.skip Number of results to skip at the beginning                                           //\n   * @param {MongoFieldSpecifier} options.fields Dictionary of fields to return or exclude.                            //\n   * @param {Boolean} options.reactive (Client only) Default true; pass false to disable reactivity                    //\n   * @param {Function} options.transform Overrides `transform` on the [`Collection`](#collections) for this cursor.  Pass `null` to disable transformation.\n   * @returns {Object}                                                                                                 //\n   */findOne: function () /* selector, options */{                                                                     //\n    var self = this;                                                                                                   // 330\n                                                                                                                       //\n    var argArray = _.toArray(arguments);                                                                               // 331\n                                                                                                                       //\n    return self._collection.findOne(self._getFindSelector(argArray), self._getFindOptions(argArray));                  // 332\n  }                                                                                                                    // 334\n});                                                                                                                    // 258\n                                                                                                                       //\nMongo.Collection._publishCursor = function (cursor, sub, collection) {                                                 // 338\n  var observeHandle = cursor.observeChanges({                                                                          // 339\n    added: function (id, fields) {                                                                                     // 340\n      sub.added(collection, id, fields);                                                                               // 341\n    },                                                                                                                 // 342\n    changed: function (id, fields) {                                                                                   // 343\n      sub.changed(collection, id, fields);                                                                             // 344\n    },                                                                                                                 // 345\n    removed: function (id) {                                                                                           // 346\n      sub.removed(collection, id);                                                                                     // 347\n    }                                                                                                                  // 348\n  }); // We don't call sub.ready() here: it gets called in livedata_server, after                                      // 339\n  // possibly calling _publishCursor on multiple returned cursors.                                                     // 352\n  // register stop callback (expects lambda w/ no args).                                                               // 354\n                                                                                                                       //\n  sub.onStop(function () {                                                                                             // 355\n    observeHandle.stop();                                                                                              // 355\n  }); // return the observeHandle in case it needs to be stopped early                                                 // 355\n                                                                                                                       //\n  return observeHandle;                                                                                                // 358\n}; // protect against dangerous selectors.  falsey and {_id: falsey} are both                                          // 359\n// likely programmer error, and not what you want, particularly for destructive                                        // 362\n// operations.  JS regexps don't serialize over DDP but can be trivially                                               // 363\n// replaced by $regex.                                                                                                 // 364\n                                                                                                                       //\n                                                                                                                       //\nMongo.Collection._rewriteSelector = function (selector) {                                                              // 365\n  // shorthand -- scalars match _id                                                                                    // 366\n  if (LocalCollection._selectorIsId(selector)) selector = {                                                            // 367\n    _id: selector                                                                                                      // 368\n  };                                                                                                                   // 368\n                                                                                                                       //\n  if (_.isArray(selector)) {                                                                                           // 370\n    // This is consistent with the Mongo console itself; if we don't do this                                           // 371\n    // check passing an empty array ends up selecting all items                                                        // 372\n    throw new Error(\"Mongo selector can't be an array.\");                                                              // 373\n  }                                                                                                                    // 374\n                                                                                                                       //\n  if (!selector || '_id' in selector && !selector._id) // can't match anything                                         // 376\n    return {                                                                                                           // 378\n      _id: Random.id()                                                                                                 // 378\n    };                                                                                                                 // 378\n  var ret = {};                                                                                                        // 380\n                                                                                                                       //\n  _.each(selector, function (value, key) {                                                                             // 381\n    // Mongo supports both {field: /foo/} and {field: {$regex: /foo/}}                                                 // 382\n    if (value instanceof RegExp) {                                                                                     // 383\n      ret[key] = convertRegexpToMongoSelector(value);                                                                  // 384\n    } else if (value && value.$regex instanceof RegExp) {                                                              // 385\n      ret[key] = convertRegexpToMongoSelector(value.$regex); // if value is {$regex: /foo/, $options: ...} then $options\n      // override the ones set on $regex.                                                                              // 388\n                                                                                                                       //\n      if (value.$options !== undefined) ret[key].$options = value.$options;                                            // 389\n    } else if (_.contains(['$or', '$and', '$nor'], key)) {                                                             // 391\n      // Translate lower levels of $and/$or/$nor                                                                       // 393\n      ret[key] = _.map(value, function (v) {                                                                           // 394\n        return Mongo.Collection._rewriteSelector(v);                                                                   // 395\n      });                                                                                                              // 396\n    } else {                                                                                                           // 397\n      ret[key] = value;                                                                                                // 398\n    }                                                                                                                  // 399\n  });                                                                                                                  // 400\n                                                                                                                       //\n  return ret;                                                                                                          // 401\n}; // convert a JS RegExp object to a Mongo {$regex: ..., $options: ...}                                               // 402\n// selector                                                                                                            // 405\n                                                                                                                       //\n                                                                                                                       //\nfunction convertRegexpToMongoSelector(regexp) {                                                                        // 406\n  check(regexp, RegExp); // safety belt                                                                                // 407\n                                                                                                                       //\n  var selector = {                                                                                                     // 409\n    $regex: regexp.source                                                                                              // 409\n  };                                                                                                                   // 409\n  var regexOptions = ''; // JS RegExp objects support 'i', 'm', and 'g'. Mongo regex $options                          // 410\n  // support 'i', 'm', 'x', and 's'. So we support 'i' and 'm' here.                                                   // 412\n                                                                                                                       //\n  if (regexp.ignoreCase) regexOptions += 'i';                                                                          // 413\n  if (regexp.multiline) regexOptions += 'm';                                                                           // 415\n  if (regexOptions) selector.$options = regexOptions;                                                                  // 417\n  return selector;                                                                                                     // 420\n} // 'insert' immediately returns the inserted document's new _id.                                                     // 421\n// The others return values immediately if you are in a stub, an in-memory                                             // 424\n// unmanaged collection, or a mongo-backed collection and you don't pass a                                             // 425\n// callback. 'update' and 'remove' return the number of affected                                                       // 426\n// documents. 'upsert' returns an object with keys 'numberAffected' and, if an                                         // 427\n// insert happened, 'insertedId'.                                                                                      // 428\n//                                                                                                                     // 429\n// Otherwise, the semantics are exactly like other methods: they take                                                  // 430\n// a callback as an optional last argument; if no callback is                                                          // 431\n// provided, they block until the operation is complete, and throw an                                                  // 432\n// exception if it fails; if a callback is provided, then they don't                                                   // 433\n// necessarily block, and they call the callback when they finish with error and                                       // 434\n// result arguments.  (The insert method provides the document ID as its result;                                       // 435\n// update and remove provide the number of affected docs as the result; upsert                                         // 436\n// provides an object with numberAffected and maybe insertedId.)                                                       // 437\n//                                                                                                                     // 438\n// On the client, blocking is impossible, so if a callback                                                             // 439\n// isn't provided, they just return immediately and any error                                                          // 440\n// information is lost.                                                                                                // 441\n//                                                                                                                     // 442\n// There's one more tweak. On the client, if you don't provide a                                                       // 443\n// callback, then if there is an error, a message will be logged with                                                  // 444\n// Meteor._debug.                                                                                                      // 445\n//                                                                                                                     // 446\n// The intent (though this is actually determined by the underlying                                                    // 447\n// drivers) is that the operations should be done synchronously, not                                                   // 448\n// generating their result until the database has acknowledged                                                         // 449\n// them. In the future maybe we should provide a flag to turn this                                                     // 450\n// off.                                                                                                                // 451\n/**                                                                                                                    // 453\n * @summary Insert a document in the collection.  Returns its unique _id.                                              //\n * @locus Anywhere                                                                                                     //\n * @method  insert                                                                                                     //\n * @memberOf Mongo.Collection                                                                                          //\n * @instance                                                                                                           //\n * @param {Object} doc The document to insert. May not yet have an _id attribute, in which case Meteor will generate one for you.\n * @param {Function} [callback] Optional.  If present, called with an error object as the first argument and, if no error, the _id as the second.\n */                                                                                                                    //\n                                                                                                                       //\nMongo.Collection.prototype.insert = function () {                                                                      // 462\n  function insert(doc, callback) {                                                                                     // 462\n    // Make sure we were passed a document to insert                                                                   // 463\n    if (!doc) {                                                                                                        // 464\n      throw new Error(\"insert requires an argument\");                                                                  // 465\n    } // Shallow-copy the document and possibly generate an ID                                                         // 466\n                                                                                                                       //\n                                                                                                                       //\n    doc = _.extend({}, doc);                                                                                           // 469\n                                                                                                                       //\n    if ('_id' in doc) {                                                                                                // 471\n      if (!doc._id || !(typeof doc._id === 'string' || doc._id instanceof Mongo.ObjectID)) {                           // 472\n        throw new Error(\"Meteor requires document _id fields to be non-empty strings or ObjectIDs\");                   // 473\n      }                                                                                                                // 474\n    } else {                                                                                                           // 475\n      var generateId = true; // Don't generate the id if we're the client and the 'outermost' call                     // 476\n      // This optimization saves us passing both the randomSeed and the id                                             // 479\n      // Passing both is redundant.                                                                                    // 480\n                                                                                                                       //\n      if (this._isRemoteCollection()) {                                                                                // 481\n        var enclosing = DDP._CurrentInvocation.get();                                                                  // 482\n                                                                                                                       //\n        if (!enclosing) {                                                                                              // 483\n          generateId = false;                                                                                          // 484\n        }                                                                                                              // 485\n      }                                                                                                                // 486\n                                                                                                                       //\n      if (generateId) {                                                                                                // 488\n        doc._id = this._makeNewID();                                                                                   // 489\n      }                                                                                                                // 490\n    } // On inserts, always return the id that we generated; on all other                                              // 491\n    // operations, just return the result from the collection.                                                         // 494\n                                                                                                                       //\n                                                                                                                       //\n    var chooseReturnValueFromCollectionResult = function (result) {                                                    // 495\n      if (doc._id) {                                                                                                   // 496\n        return doc._id;                                                                                                // 497\n      } // XXX what is this for??                                                                                      // 498\n      // It's some iteraction between the callback to _callMutatorMethod and                                           // 501\n      // the return value conversion                                                                                   // 502\n                                                                                                                       //\n                                                                                                                       //\n      doc._id = result;                                                                                                // 503\n      return result;                                                                                                   // 505\n    };                                                                                                                 // 506\n                                                                                                                       //\n    var wrappedCallback = wrapCallback(callback, chooseReturnValueFromCollectionResult);                               // 508\n                                                                                                                       //\n    if (this._isRemoteCollection()) {                                                                                  // 510\n      var result = this._callMutatorMethod(\"insert\", [doc], wrappedCallback);                                          // 511\n                                                                                                                       //\n      return chooseReturnValueFromCollectionResult(result);                                                            // 512\n    } // it's my collection.  descend into the collection object                                                       // 513\n    // and propagate any exception.                                                                                    // 516\n                                                                                                                       //\n                                                                                                                       //\n    try {                                                                                                              // 517\n      // If the user provided a callback and the collection implements this                                            // 518\n      // operation asynchronously, then queryRet will be undefined, and the                                            // 519\n      // result will be returned through the callback instead.                                                         // 520\n      var _result = this._collection.insert(doc, wrappedCallback);                                                     // 521\n                                                                                                                       //\n      return chooseReturnValueFromCollectionResult(_result);                                                           // 522\n    } catch (e) {                                                                                                      // 523\n      if (callback) {                                                                                                  // 524\n        callback(e);                                                                                                   // 525\n        return null;                                                                                                   // 526\n      }                                                                                                                // 527\n                                                                                                                       //\n      throw e;                                                                                                         // 528\n    }                                                                                                                  // 529\n  }                                                                                                                    // 530\n                                                                                                                       //\n  return insert;                                                                                                       // 462\n}(); /**                                                                                                               // 462\n      * @summary Modify one or more documents in the collection. Returns the number of matched documents.              //\n      * @locus Anywhere                                                                                                //\n      * @method update                                                                                                 //\n      * @memberOf Mongo.Collection                                                                                     //\n      * @instance                                                                                                      //\n      * @param {MongoSelector} selector Specifies which documents to modify                                            //\n      * @param {MongoModifier} modifier Specifies how to modify the documents                                          //\n      * @param {Object} [options]                                                                                      //\n      * @param {Boolean} options.multi True to modify all matching documents; false to only modify one of the matching documents (the default).\n      * @param {Boolean} options.upsert True to insert a document if no matching documents are found.                  //\n      * @param {Function} [callback] Optional.  If present, called with an error object as the first argument and, if no error, the number of affected documents as the second.\n      */                                                                                                               //\n                                                                                                                       //\nMongo.Collection.prototype.update = function () {                                                                      // 545\n  function update(selector, modifier) {                                                                                // 545\n    for (var _len = arguments.length, optionsAndCallback = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      optionsAndCallback[_key - 2] = arguments[_key];                                                                  // 545\n    }                                                                                                                  // 545\n                                                                                                                       //\n    var callback = popCallbackFromArgs(optionsAndCallback);                                                            // 546\n    selector = Mongo.Collection._rewriteSelector(selector); // We've already popped off the callback, so we are left with an array\n    // of one or zero items                                                                                            // 551\n                                                                                                                       //\n    var options = _.clone(optionsAndCallback[0]) || {};                                                                // 552\n                                                                                                                       //\n    if (options && options.upsert) {                                                                                   // 553\n      // set `insertedId` if absent.  `insertedId` is a Meteor extension.                                              // 554\n      if (options.insertedId) {                                                                                        // 555\n        if (!(typeof options.insertedId === 'string' || options.insertedId instanceof Mongo.ObjectID)) throw new Error(\"insertedId must be string or ObjectID\");\n      } else if (!selector._id) {                                                                                      // 558\n        options.insertedId = this._makeNewID();                                                                        // 559\n      }                                                                                                                // 560\n    }                                                                                                                  // 561\n                                                                                                                       //\n    var wrappedCallback = wrapCallback(callback);                                                                      // 563\n                                                                                                                       //\n    if (this._isRemoteCollection()) {                                                                                  // 565\n      var args = [selector, modifier, options];                                                                        // 566\n      return this._callMutatorMethod(\"update\", args, wrappedCallback);                                                 // 572\n    } // it's my collection.  descend into the collection object                                                       // 573\n    // and propagate any exception.                                                                                    // 576\n                                                                                                                       //\n                                                                                                                       //\n    try {                                                                                                              // 577\n      // If the user provided a callback and the collection implements this                                            // 578\n      // operation asynchronously, then queryRet will be undefined, and the                                            // 579\n      // result will be returned through the callback instead.                                                         // 580\n      return this._collection.update(selector, modifier, options, wrappedCallback);                                    // 581\n    } catch (e) {                                                                                                      // 583\n      if (callback) {                                                                                                  // 584\n        callback(e);                                                                                                   // 585\n        return null;                                                                                                   // 586\n      }                                                                                                                // 587\n                                                                                                                       //\n      throw e;                                                                                                         // 588\n    }                                                                                                                  // 589\n  }                                                                                                                    // 590\n                                                                                                                       //\n  return update;                                                                                                       // 545\n}(); /**                                                                                                               // 545\n      * @summary Remove documents from the collection                                                                  //\n      * @locus Anywhere                                                                                                //\n      * @method remove                                                                                                 //\n      * @memberOf Mongo.Collection                                                                                     //\n      * @instance                                                                                                      //\n      * @param {MongoSelector} selector Specifies which documents to remove                                            //\n      * @param {Function} [callback] Optional.  If present, called with an error object as its argument.               //\n      */                                                                                                               //\n                                                                                                                       //\nMongo.Collection.prototype.remove = function () {                                                                      // 601\n  function remove(selector, callback) {                                                                                // 601\n    selector = Mongo.Collection._rewriteSelector(selector);                                                            // 602\n    var wrappedCallback = wrapCallback(callback);                                                                      // 604\n                                                                                                                       //\n    if (this._isRemoteCollection()) {                                                                                  // 606\n      return this._callMutatorMethod(\"remove\", [selector], wrappedCallback);                                           // 607\n    } // it's my collection.  descend into the collection object                                                       // 608\n    // and propagate any exception.                                                                                    // 611\n                                                                                                                       //\n                                                                                                                       //\n    try {                                                                                                              // 612\n      // If the user provided a callback and the collection implements this                                            // 613\n      // operation asynchronously, then queryRet will be undefined, and the                                            // 614\n      // result will be returned through the callback instead.                                                         // 615\n      return this._collection.remove(selector, wrappedCallback);                                                       // 616\n    } catch (e) {                                                                                                      // 617\n      if (callback) {                                                                                                  // 618\n        callback(e);                                                                                                   // 619\n        return null;                                                                                                   // 620\n      }                                                                                                                // 621\n                                                                                                                       //\n      throw e;                                                                                                         // 622\n    }                                                                                                                  // 623\n  }                                                                                                                    // 624\n                                                                                                                       //\n  return remove;                                                                                                       // 601\n}(); // Determine if this collection is simply a minimongo representation of a real                                    // 601\n// database on another server                                                                                          // 627\n                                                                                                                       //\n                                                                                                                       //\nMongo.Collection.prototype._isRemoteCollection = function () {                                                         // 628\n  function _isRemoteCollection() {                                                                                     // 628\n    // XXX see #MeteorServerNull                                                                                       // 629\n    return this._connection && this._connection !== Meteor.server;                                                     // 630\n  }                                                                                                                    // 631\n                                                                                                                       //\n  return _isRemoteCollection;                                                                                          // 628\n}(); // Convert the callback to not return a result if there is an error                                               // 628\n                                                                                                                       //\n                                                                                                                       //\nfunction wrapCallback(callback, convertResult) {                                                                       // 634\n  if (!callback) {                                                                                                     // 635\n    return;                                                                                                            // 636\n  } // If no convert function was passed in, just use a \"blank function\"                                               // 637\n                                                                                                                       //\n                                                                                                                       //\n  convertResult = convertResult || _.identity;                                                                         // 640\n  return function (error, result) {                                                                                    // 642\n    callback(error, !error && convertResult(result));                                                                  // 643\n  };                                                                                                                   // 644\n} /**                                                                                                                  // 645\n   * @summary Modify one or more documents in the collection, or insert one if no matching documents were found. Returns an object with keys `numberAffected` (the number of documents modified)  and `insertedId` (the unique _id of the document that was inserted, if any).\n   * @locus Anywhere                                                                                                   //\n   * @param {MongoSelector} selector Specifies which documents to modify                                               //\n   * @param {MongoModifier} modifier Specifies how to modify the documents                                             //\n   * @param {Object} [options]                                                                                         //\n   * @param {Boolean} options.multi True to modify all matching documents; false to only modify one of the matching documents (the default).\n   * @param {Function} [callback] Optional.  If present, called with an error object as the first argument and, if no error, the number of affected documents as the second.\n   */                                                                                                                  //\n                                                                                                                       //\nMongo.Collection.prototype.upsert = function () {                                                                      // 656\n  function upsert(selector, modifier, options, callback) {                                                             // 656\n    if (!callback && typeof options === \"function\") {                                                                  // 658\n      callback = options;                                                                                              // 659\n      options = {};                                                                                                    // 660\n    }                                                                                                                  // 661\n                                                                                                                       //\n    var updateOptions = _.extend({}, options, {                                                                        // 663\n      _returnObject: true,                                                                                             // 664\n      upsert: true                                                                                                     // 665\n    });                                                                                                                // 663\n                                                                                                                       //\n    return this.update(selector, modifier, updateOptions, callback);                                                   // 668\n  }                                                                                                                    // 669\n                                                                                                                       //\n  return upsert;                                                                                                       // 656\n}(); // We'll actually design an index API later. For now, we just pass through to                                     // 656\n// Mongo's, but make it synchronous.                                                                                   // 672\n                                                                                                                       //\n                                                                                                                       //\nMongo.Collection.prototype._ensureIndex = function (index, options) {                                                  // 673\n  var self = this;                                                                                                     // 674\n  if (!self._collection._ensureIndex) throw new Error(\"Can only call _ensureIndex on server collections\");             // 675\n                                                                                                                       //\n  self._collection._ensureIndex(index, options);                                                                       // 677\n};                                                                                                                     // 678\n                                                                                                                       //\nMongo.Collection.prototype._dropIndex = function (index) {                                                             // 679\n  var self = this;                                                                                                     // 680\n  if (!self._collection._dropIndex) throw new Error(\"Can only call _dropIndex on server collections\");                 // 681\n                                                                                                                       //\n  self._collection._dropIndex(index);                                                                                  // 683\n};                                                                                                                     // 684\n                                                                                                                       //\nMongo.Collection.prototype._dropCollection = function () {                                                             // 685\n  var self = this;                                                                                                     // 686\n  if (!self._collection.dropCollection) throw new Error(\"Can only call _dropCollection on server collections\");        // 687\n                                                                                                                       //\n  self._collection.dropCollection();                                                                                   // 689\n};                                                                                                                     // 690\n                                                                                                                       //\nMongo.Collection.prototype._createCappedCollection = function (byteSize, maxDocuments) {                               // 691\n  var self = this;                                                                                                     // 692\n  if (!self._collection._createCappedCollection) throw new Error(\"Can only call _createCappedCollection on server collections\");\n                                                                                                                       //\n  self._collection._createCappedCollection(byteSize, maxDocuments);                                                    // 695\n}; /**                                                                                                                 // 696\n    * @summary Returns the [`Collection`](http://mongodb.github.io/node-mongodb-native/2.2/api/Collection.html) object corresponding to this collection from the [npm `mongodb` driver module](https://www.npmjs.com/package/mongodb) which is wrapped by `Mongo.Collection`.\n    * @locus Server                                                                                                    //\n    */                                                                                                                 //\n                                                                                                                       //\nMongo.Collection.prototype.rawCollection = function () {                                                               // 702\n  var self = this;                                                                                                     // 703\n                                                                                                                       //\n  if (!self._collection.rawCollection) {                                                                               // 704\n    throw new Error(\"Can only call rawCollection on server collections\");                                              // 705\n  }                                                                                                                    // 706\n                                                                                                                       //\n  return self._collection.rawCollection();                                                                             // 707\n}; /**                                                                                                                 // 708\n    * @summary Returns the [`Db`](http://mongodb.github.io/node-mongodb-native/2.2/api/Db.html) object corresponding to this collection's database connection from the [npm `mongodb` driver module](https://www.npmjs.com/package/mongodb) which is wrapped by `Mongo.Collection`.\n    * @locus Server                                                                                                    //\n    */                                                                                                                 //\n                                                                                                                       //\nMongo.Collection.prototype.rawDatabase = function () {                                                                 // 714\n  var self = this;                                                                                                     // 715\n                                                                                                                       //\n  if (!(self._driver.mongo && self._driver.mongo.db)) {                                                                // 716\n    throw new Error(\"Can only call rawDatabase on server collections\");                                                // 717\n  }                                                                                                                    // 718\n                                                                                                                       //\n  return self._driver.mongo.db;                                                                                        // 719\n}; /**                                                                                                                 // 720\n    * @summary Create a Mongo-style `ObjectID`.  If you don't specify a `hexString`, the `ObjectID` will generated randomly (not using MongoDB's ID construction rules).\n    * @locus Anywhere                                                                                                  //\n    * @class                                                                                                           //\n    * @param {String} [hexString] Optional.  The 24-character hexadecimal contents of the ObjectID to create           //\n    */                                                                                                                 //\n                                                                                                                       //\nMongo.ObjectID = MongoID.ObjectID; /**                                                                                 // 729\n                                    * @summary To create a cursor, use find. To access the documents in a cursor, use forEach, map, or fetch.\n                                    * @class                                                                           //\n                                    * @instanceName cursor                                                             //\n                                    */                                                                                 //\nMongo.Cursor = LocalCollection.Cursor; /**                                                                             // 736\n                                        * @deprecated in 0.9.1                                                         //\n                                        */                                                                             //\nMongo.Collection.Cursor = Mongo.Cursor; /**                                                                            // 741\n                                         * @deprecated in 0.9.1                                                        //\n                                         */                                                                            //\nMongo.Collection.ObjectID = Mongo.ObjectID; /**                                                                        // 746\n                                             * @deprecated in 0.9.1                                                    //\n                                             */                                                                        //\nMeteor.Collection = Mongo.Collection; // Allow deny stuff is now in the allow-deny package                             // 751\n                                                                                                                       //\n_.extend(Meteor.Collection.prototype, AllowDeny.CollectionPrototype);                                                  // 754\n                                                                                                                       //\nfunction popCallbackFromArgs(args) {                                                                                   // 756\n  // Pull off any callback (or perhaps a 'callback' variable that was passed                                           // 757\n  // in undefined, like how 'upsert' does it).                                                                         // 758\n  if (args.length && (args[args.length - 1] === undefined || args[args.length - 1] instanceof Function)) {             // 759\n    return args.pop();                                                                                                 // 762\n  }                                                                                                                    // 763\n}                                                                                                                      // 764\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"connection_options.js\":function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/mongo/connection_options.js                                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * @summary Allows for user specified connection options                                                               //\n * @example http://mongodb.github.io/node-mongodb-native/2.2/reference/connecting/connection-settings/                 //\n * @locus Server                                                                                                       //\n * @param {Object} options User specified Mongo connection options                                                     //\n */Mongo.setConnectionOptions = function () {                                                                          //\n  function setConnectionOptions(options) {                                                                             // 7\n    check(options, Object);                                                                                            // 8\n    Mongo._connectionOptions = options;                                                                                // 9\n  }                                                                                                                    // 10\n                                                                                                                       //\n  return setConnectionOptions;                                                                                         // 7\n}();                                                                                                                   // 7\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}},{\"extensions\":[\".js\",\".json\"]});\nrequire(\"./node_modules/meteor/mongo/mongo_driver.js\");\nrequire(\"./node_modules/meteor/mongo/oplog_tailing.js\");\nrequire(\"./node_modules/meteor/mongo/observe_multiplex.js\");\nrequire(\"./node_modules/meteor/mongo/doc_fetcher.js\");\nrequire(\"./node_modules/meteor/mongo/polling_observe_driver.js\");\nrequire(\"./node_modules/meteor/mongo/oplog_observe_driver.js\");\nrequire(\"./node_modules/meteor/mongo/local_collection_driver.js\");\nrequire(\"./node_modules/meteor/mongo/remote_collection_driver.js\");\nrequire(\"./node_modules/meteor/mongo/collection.js\");\nrequire(\"./node_modules/meteor/mongo/connection_options.js\");\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package.mongo = {}, {\n  MongoInternals: MongoInternals,\n  MongoTest: MongoTest,\n  Mongo: Mongo\n});\n\n})();\n","servePath":"/packages/mongo.js","sourceMap":{"version":3,"sources":["/packages/mongo/mongo_driver.js","/packages/mongo/oplog_tailing.js","/packages/mongo/observe_multiplex.js","/packages/mongo/doc_fetcher.js","/packages/mongo/polling_observe_driver.js","/packages/mongo/oplog_observe_driver.js","/packages/mongo/local_collection_driver.js","/packages/mongo/remote_collection_driver.js","/packages/mongo/collection.js","/packages/mongo/connection_options.js"],"names":["path","Npm","require","MongoDB","NpmModuleMongodb","Future","join","MongoInternals","MongoTest","NpmModules","mongodb","version","NpmModuleMongodbVersion","module","NpmModule","replaceNames","filter","thing","_","isArray","map","bind","ret","each","value","key","Timestamp","prototype","clone","makeMongoLegal","name","unmakeMongoLegal","substr","replaceMongoAtomWithMeteor","document","Binary","buffer","Uint8Array","ObjectID","Mongo","toHexString","size","EJSON","fromJSONValue","undefined","replaceMeteorAtomWithMongo","isBinary","Buffer","_isCustomType","toJSONValue","replaceTypes","atomTransformer","replacedTopLevelAtom","val","valReplaced","MongoConnection","url","options","self","_observeMultiplexers","_onFailoverHook","Hook","mongoOptions","extend","db","safe","server","autoReconnect","reconnectTries","Infinity","replSet","_connectionOptions","test","native_parser","has","poolSize","_primary","_oplogHandle","_docFetcher","connectFuture","connect","Meteor","bindEnvironment","err","serverConfig","isMasterDoc","primary","on","kind","doc","callback","me","resolver","wait","oplogUrl","Package","OplogHandle","databaseName","DocFetcher","close","Error","oplogHandle","stop","wrap","rawCollection","collectionName","future","collection","_createCappedCollection","byteSize","maxDocuments","createCollection","capped","max","_maybeBeginWrite","fence","DDPServer","_CurrentWriteFence","get","beginWrite","committed","_onFailover","register","writeCallback","write","refresh","result","refreshErr","bindEnvironmentForWrite","_insert","collection_name","sendError","e","expected","LocalCollection","_isPlainObject","id","_id","insert","_refresh","selector","refreshKey","specificIds","_idsMatchedBySelector","_remove","wrappedCallback","driverResult","transformResult","numberAffected","remove","_dropCollection","cb","dropCollection","drop","_dropDatabase","dropDatabase","_update","mod","Function","mongoOpts","upsert","multi","fullResult","mongoSelector","mongoMod","isModify","isModificationMod","knownId","_forbidReplace","insertedId","simulateUpsertWithInsertedId","error","_returnObject","update","meteorResult","isReplace","k","mongoResult","upserted","length","n","NUM_OPTIMISTIC_TRIES","_isCannotChangeIdError","code","errmsg","indexOf","newDoc","selectorDoc","_removeDollarOperators","trail","split","obj","leaf","pop","shift","_modify","isInsert","mongoOptsForUpdate","mongoOptsForInsert","tries","doUpdate","doConditionalInsert","replacementWithId","method","wrapAsync","apply","arguments","find","Cursor","CursorDescription","findOne","limit","fetch","_ensureIndex","index","indexName","ensureIndex","_dropIndex","dropIndex","Collection","_rewriteSelector","mongo","cursorDescription","_mongo","_cursorDescription","_synchronousCursor","tailable","_createSynchronousCursor","selfForIteration","useTransform","rewind","getTransform","transform","_publishCursor","sub","_getCollectionName","observe","callbacks","_observeFromObserveChanges","observeChanges","ordered","_observeChangesCallbacksAreOrdered","_observeChanges","pick","cursorOptions","sort","skip","awaitdata","numberOfRetries","OPLOG_COLLECTION","ts","oplogReplay","dbCursor","fields","SynchronousCursor","_dbCursor","_selfForIteration","_transform","wrapTransform","_synchronousNextObject","nextObject","_synchronousCount","count","_visitedIds","_IdMap","_nextObject","set","forEach","thisArg","_rewind","call","res","push","identity","applySkipLimit","getRawObjects","results","tail","docCallback","cursor","stopped","lastTS","loop","newSelector","$gt","setTimeout","defer","_observeChangesTailable","observeKey","JSON","stringify","multiplexer","observeDriver","firstHandle","_noYieldsAllowed","ObserveMultiplexer","onStop","observeHandle","ObserveHandle","matcher","sorter","canUseOplog","all","_testOnlyPollCallback","Minimongo","Matcher","OplogObserveDriver","cursorSupported","Sorter","f","driverClass","PollingObserveDriver","mongoHandle","_observeDriver","addHandleAndSendInitialAdds","listenAll","listenCallback","listeners","forEachTrigger","trigger","_InvalidationCrossbar","listen","listener","triggerCallback","addedBefore","added","MongoTimestamp","Connection","TOO_FAR_BEHIND","process","env","METEOR_OPLOG_TOO_FAR_BEHIND","showTS","getHighBits","getLowBits","idForOp","op","o","o2","dbName","_oplogUrl","_dbName","_oplogLastEntryConnection","_oplogTailConnection","_stopped","_tailHandle","_readyFuture","_crossbar","_Crossbar","factPackage","factName","_baseOplogSelector","ns","RegExp","_escapeRegExp","$or","$in","$exists","_catchingUpFutures","_lastProcessedTS","_onSkippedEntriesHook","debugPrintExceptions","_entryQueue","_DoubleEndedQueue","_workerActive","_startTailing","onOplogEntry","originalCallback","notification","_debug","stack","listenHandle","onSkippedEntries","waitUntilCaughtUp","lastEntry","$natural","_sleepForMs","lessThanOrEqual","insertAfter","greaterThan","splice","mongodbUri","parse","database","admin","command","ismaster","setName","lastOplogEntry","oplogSelector","_maybeStartWorker","return","isEmpty","clear","_setLastProcessedTS","fire","sequencer","_defineTooFarBehind","_resetTooFarBehind","facts","Facts","incrementServerFact","_ordered","_onStop","_queue","_SynchronousQueue","_handles","_cache","_CachingChangeObserver","_addHandleTasksScheduledButNotPerformed","callbackNames","callbackName","_applyCallback","toArray","handle","safeToRunTask","runTask","_sendAdds","removeHandle","_ready","_stop","fromQueryError","ready","queueTask","queryError","throw","onFlush","isResolved","args","applyChange","keys","handleId","add","_addedBefore","_added","docs","nextObserveHandleId","_multiplexer","before","Fiber","mongoConnection","_mongoConnection","_callbacksForCacheKey","cacheKey","check","String","clonedDoc","run","_mongoHandle","_stopCallbacks","_results","_pollsScheduledButNotStarted","_pendingWrites","_ensurePollIsScheduled","throttle","_unthrottledEnsurePollIsScheduled","pollingThrottleMs","_taskQueue","listenersHandle","pollingInterval","pollingIntervalMs","_pollingInterval","intervalHandle","setInterval","clearInterval","_pollMongo","_suspendPolling","_resumePolling","first","newResults","oldResults","writesForCycle","message","Array","_diffQueryChanges","w","c","PHASE","QUERYING","FETCHING","STEADY","SwitchedToQuery","finishIfNeedToPollQuery","currentId","_usesOplog","comparator","getComparator","heapOptions","IdMap","_limit","_comparator","_sorter","_unpublishedBuffer","MinMaxHeap","_published","MaxHeap","_safeAppendToBuffer","_stopHandles","_registerPhaseChange","_matcher","projection","_projectionFn","_compileProjection","_sharedProjection","combineIntoProjection","_sharedProjectionFn","_needToFetch","_currentlyFetching","_fetchGeneration","_requeryWhenDoneThisQuery","_writesToCommitWhenWeReachSteady","_needToPollQuery","_phase","_handleOplogEntryQuerying","_handleOplogEntrySteadyOrFetching","fired","_oplogObserveDrivers","onBeforeFire","drivers","driver","_runInitialQuery","_addPublished","overflowingDocId","maxElementId","overflowingDoc","equals","removed","_addBuffered","_removePublished","empty","newDocId","minElementId","_removeBuffered","_changePublished","oldDoc","projectedNew","projectedOld","changed","DiffSequence","makeChangedFields","maxBufferedId","_addMatching","maxPublished","maxBuffered","toPublish","canAppendToBuffer","canInsertIntoBuffer","toBuffer","_removeMatching","_handleDoc","matchesNow","documentMatches","publishedBefore","bufferedBefore","cachedBefore","minBuffered","staysInPublished","staysInBuffer","_fetchModifiedDocuments","thisGeneration","waiting","fut","_beSteady","writes","toString","canDirectlyModifyDoc","modifierCanBeDirectlyApplied","canBecomeTrueByModifier","affectedByModifier","_runQuery","initial","_doneQuerying","_pollQuery","newBuffer","_cursorForQuery","i","_publishNewResults","optionsOverwrite","description","idsToRemove","_oplogEntryHandle","_listenersHandle","phase","now","Date","timeDiff","_phaseStartTime","disableOplog","_disableOplog","_checkSupportedProjection","hasWhere","hasGeoQuery","modifier","operation","field","LocalCollectionDriver","noConnCollections","ensureCollection","collections","open","conn","_mongo_livedata_collections","RemoteCollectionDriver","mongo_url","m","defaultRemoteCollectionDriver","once","connectionOptions","mongoUrl","MONGO_URL","MONGO_OPLOG_URL","methods","connection","manager","idGeneration","_driver","_preventAutopublish","_makeNewID","src","DDP","randomStream","Random","insecure","hexString","_connection","isClient","_collection","_name","registerStore","ok","beginUpdate","batchSize","reset","pauseObservers","msg","mongoId","MongoID","idParse","replace","$unset","$set","endUpdate","resumeObservers","saveOriginals","retrieveOriginals","getDoc","_getCollection","_suppressSameNameError","console","warn","log","defineMutationMethods","_defineMutationMethods","useExisting","autopublish","publish","is_auto","_getFindSelector","_getFindOptions","Match","Optional","ObjectIncluding","OneOf","Object","Number","argArray","_selectorIsId","convertRegexpToMongoSelector","$regex","$options","contains","v","regexp","source","regexOptions","ignoreCase","multiline","generateId","_isRemoteCollection","enclosing","_CurrentInvocation","chooseReturnValueFromCollectionResult","wrapCallback","_callMutatorMethod","optionsAndCallback","popCallbackFromArgs","convertResult","updateOptions","rawDatabase","AllowDeny","CollectionPrototype","setConnectionOptions"],"mappings":"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","file":"/packages/mongo.js","sourcesContent":["/**\n * Provide a synchronous Collection API using fibers, backed by\n * MongoDB.  This is only for use on the server, and mostly identical\n * to the client API.\n *\n * NOTE: the public API methods must be run within a fiber. If you call\n * these outside of a fiber they will explode!\n */\n\nvar path = Npm.require('path');\nvar MongoDB = NpmModuleMongodb;\nvar Future = Npm.require(path.join('fibers', 'future'));\n\nMongoInternals = {};\nMongoTest = {};\n\nMongoInternals.NpmModules = {\n  mongodb: {\n    version: NpmModuleMongodbVersion,\n    module: MongoDB\n  }\n};\n\n// Older version of what is now available via\n// MongoInternals.NpmModules.mongodb.module.  It was never documented, but\n// people do use it.\n// XXX COMPAT WITH 1.0.3.2\nMongoInternals.NpmModule = MongoDB;\n\n// This is used to add or remove EJSON from the beginning of everything nested\n// inside an EJSON custom type. It should only be called on pure JSON!\nvar replaceNames = function (filter, thing) {\n  if (typeof thing === \"object\") {\n    if (_.isArray(thing)) {\n      return _.map(thing, _.bind(replaceNames, null, filter));\n    }\n    var ret = {};\n    _.each(thing, function (value, key) {\n      ret[filter(key)] = replaceNames(filter, value);\n    });\n    return ret;\n  }\n  return thing;\n};\n\n// Ensure that EJSON.clone keeps a Timestamp as a Timestamp (instead of just\n// doing a structural clone).\n// XXX how ok is this? what if there are multiple copies of MongoDB loaded?\nMongoDB.Timestamp.prototype.clone = function () {\n  // Timestamps should be immutable.\n  return this;\n};\n\nvar makeMongoLegal = function (name) { return \"EJSON\" + name; };\nvar unmakeMongoLegal = function (name) { return name.substr(5); };\n\nvar replaceMongoAtomWithMeteor = function (document) {\n  if (document instanceof MongoDB.Binary) {\n    var buffer = document.value(true);\n    return new Uint8Array(buffer);\n  }\n  if (document instanceof MongoDB.ObjectID) {\n    return new Mongo.ObjectID(document.toHexString());\n  }\n  if (document[\"EJSON$type\"] && document[\"EJSON$value\"] && _.size(document) === 2) {\n    return EJSON.fromJSONValue(replaceNames(unmakeMongoLegal, document));\n  }\n  if (document instanceof MongoDB.Timestamp) {\n    // For now, the Meteor representation of a Mongo timestamp type (not a date!\n    // this is a weird internal thing used in the oplog!) is the same as the\n    // Mongo representation. We need to do this explicitly or else we would do a\n    // structural clone and lose the prototype.\n    return document;\n  }\n  return undefined;\n};\n\nvar replaceMeteorAtomWithMongo = function (document) {\n  if (EJSON.isBinary(document)) {\n    // This does more copies than we'd like, but is necessary because\n    // MongoDB.BSON only looks like it takes a Uint8Array (and doesn't actually\n    // serialize it correctly).\n    return new MongoDB.Binary(new Buffer(document));\n  }\n  if (document instanceof Mongo.ObjectID) {\n    return new MongoDB.ObjectID(document.toHexString());\n  }\n  if (document instanceof MongoDB.Timestamp) {\n    // For now, the Meteor representation of a Mongo timestamp type (not a date!\n    // this is a weird internal thing used in the oplog!) is the same as the\n    // Mongo representation. We need to do this explicitly or else we would do a\n    // structural clone and lose the prototype.\n    return document;\n  }\n  if (EJSON._isCustomType(document)) {\n    return replaceNames(makeMongoLegal, EJSON.toJSONValue(document));\n  }\n  // It is not ordinarily possible to stick dollar-sign keys into mongo\n  // so we don't bother checking for things that need escaping at this time.\n  return undefined;\n};\n\nvar replaceTypes = function (document, atomTransformer) {\n  if (typeof document !== 'object' || document === null)\n    return document;\n\n  var replacedTopLevelAtom = atomTransformer(document);\n  if (replacedTopLevelAtom !== undefined)\n    return replacedTopLevelAtom;\n\n  var ret = document;\n  _.each(document, function (val, key) {\n    var valReplaced = replaceTypes(val, atomTransformer);\n    if (val !== valReplaced) {\n      // Lazy clone. Shallow copy.\n      if (ret === document)\n        ret = _.clone(document);\n      ret[key] = valReplaced;\n    }\n  });\n  return ret;\n};\n\n\nMongoConnection = function (url, options) {\n  var self = this;\n  options = options || {};\n  self._observeMultiplexers = {};\n  self._onFailoverHook = new Hook;\n\n  var mongoOptions = _.extend({\n    db: { safe: true },\n    // http://mongodb.github.io/node-mongodb-native/2.2/api/Server.html\n    server: {\n      // Reconnect on error.\n      autoReconnect: true,\n      // Try to reconnect forever, instead of stopping after 30 tries (the\n      // default), with each attempt separated by 1000ms.\n      reconnectTries: Infinity\n    },\n    replSet: {}\n  }, Mongo._connectionOptions);\n\n  // Disable the native parser by default, unless specifically enabled\n  // in the mongo URL.\n  // - The native driver can cause errors which normally would be\n  //   thrown, caught, and handled into segfaults that take down the\n  //   whole app.\n  // - Binary modules don't yet work when you bundle and move the bundle\n  //   to a different platform (aka deploy)\n  // We should revisit this after binary npm module support lands.\n  if (!(/[\\?&]native_?[pP]arser=/.test(url))) {\n    mongoOptions.db.native_parser = false;\n  }\n\n  // Internally the oplog connections specify their own poolSize\n  // which we don't want to overwrite with any user defined value\n  if (_.has(options, 'poolSize')) {\n    // If we just set this for \"server\", replSet will override it. If we just\n    // set it for replSet, it will be ignored if we're not using a replSet.\n    mongoOptions.server.poolSize = options.poolSize;\n    mongoOptions.replSet.poolSize = options.poolSize;\n  }\n\n  self.db = null;\n  // We keep track of the ReplSet's primary, so that we can trigger hooks when\n  // it changes.  The Node driver's joined callback seems to fire way too\n  // often, which is why we need to track it ourselves.\n  self._primary = null;\n  self._oplogHandle = null;\n  self._docFetcher = null;\n\n\n  var connectFuture = new Future;\n  MongoDB.connect(\n    url,\n    mongoOptions,\n    Meteor.bindEnvironment(\n      function (err, db) {\n        if (err) {\n          throw err;\n        }\n\n        // First, figure out what the current primary is, if any.\n        if (db.serverConfig.isMasterDoc) {\n          self._primary = db.serverConfig.isMasterDoc.primary;\n        }\n\n        db.serverConfig.on(\n          'joined', Meteor.bindEnvironment(function (kind, doc) {\n            if (kind === 'primary') {\n              if (doc.primary !== self._primary) {\n                self._primary = doc.primary;\n                self._onFailoverHook.each(function (callback) {\n                  callback();\n                  return true;\n                });\n              }\n            } else if (doc.me === self._primary) {\n              // The thing we thought was primary is now something other than\n              // primary.  Forget that we thought it was primary.  (This means\n              // that if a server stops being primary and then starts being\n              // primary again without another server becoming primary in the\n              // middle, we'll correctly count it as a failover.)\n              self._primary = null;\n            }\n          }));\n\n        // Allow the constructor to return.\n        connectFuture['return'](db);\n      },\n      connectFuture.resolver()  // onException\n    )\n  );\n\n  // Wait for the connection to be successful; throws on failure.\n  self.db = connectFuture.wait();\n\n  if (options.oplogUrl && ! Package['disable-oplog']) {\n    self._oplogHandle = new OplogHandle(options.oplogUrl, self.db.databaseName);\n    self._docFetcher = new DocFetcher(self);\n  }\n};\n\nMongoConnection.prototype.close = function() {\n  var self = this;\n\n  if (! self.db)\n    throw Error(\"close called before Connection created?\");\n\n  // XXX probably untested\n  var oplogHandle = self._oplogHandle;\n  self._oplogHandle = null;\n  if (oplogHandle)\n    oplogHandle.stop();\n\n  // Use Future.wrap so that errors get thrown. This happens to\n  // work even outside a fiber since the 'close' method is not\n  // actually asynchronous.\n  Future.wrap(_.bind(self.db.close, self.db))(true).wait();\n};\n\n// Returns the Mongo Collection object; may yield.\nMongoConnection.prototype.rawCollection = function (collectionName) {\n  var self = this;\n\n  if (! self.db)\n    throw Error(\"rawCollection called before Connection created?\");\n\n  var future = new Future;\n  self.db.collection(collectionName, future.resolver());\n  return future.wait();\n};\n\nMongoConnection.prototype._createCappedCollection = function (\n    collectionName, byteSize, maxDocuments) {\n  var self = this;\n\n  if (! self.db)\n    throw Error(\"_createCappedCollection called before Connection created?\");\n\n  var future = new Future();\n  self.db.createCollection(\n    collectionName,\n    { capped: true, size: byteSize, max: maxDocuments },\n    future.resolver());\n  future.wait();\n};\n\n// This should be called synchronously with a write, to create a\n// transaction on the current write fence, if any. After we can read\n// the write, and after observers have been notified (or at least,\n// after the observer notifiers have added themselves to the write\n// fence), you should call 'committed()' on the object returned.\nMongoConnection.prototype._maybeBeginWrite = function () {\n  var fence = DDPServer._CurrentWriteFence.get();\n  if (fence) {\n    return fence.beginWrite();\n  } else {\n    return {committed: function () {}};\n  }\n};\n\n// Internal interface: adds a callback which is called when the Mongo primary\n// changes. Returns a stop handle.\nMongoConnection.prototype._onFailover = function (callback) {\n  return this._onFailoverHook.register(callback);\n};\n\n\n//////////// Public API //////////\n\n// The write methods block until the database has confirmed the write (it may\n// not be replicated or stable on disk, but one server has confirmed it) if no\n// callback is provided. If a callback is provided, then they call the callback\n// when the write is confirmed. They return nothing on success, and raise an\n// exception on failure.\n//\n// After making a write (with insert, update, remove), observers are\n// notified asynchronously. If you want to receive a callback once all\n// of the observer notifications have landed for your write, do the\n// writes inside a write fence (set DDPServer._CurrentWriteFence to a new\n// _WriteFence, and then set a callback on the write fence.)\n//\n// Since our execution environment is single-threaded, this is\n// well-defined -- a write \"has been made\" if it's returned, and an\n// observer \"has been notified\" if its callback has returned.\n\nvar writeCallback = function (write, refresh, callback) {\n  return function (err, result) {\n    if (! err) {\n      // XXX We don't have to run this on error, right?\n      try {\n        refresh();\n      } catch (refreshErr) {\n        if (callback) {\n          callback(refreshErr);\n          return;\n        } else {\n          throw refreshErr;\n        }\n      }\n    }\n    write.committed();\n    if (callback) {\n      callback(err, result);\n    } else if (err) {\n      throw err;\n    }\n  };\n};\n\nvar bindEnvironmentForWrite = function (callback) {\n  return Meteor.bindEnvironment(callback, \"Mongo write\");\n};\n\nMongoConnection.prototype._insert = function (collection_name, document,\n                                              callback) {\n  var self = this;\n\n  var sendError = function (e) {\n    if (callback)\n      return callback(e);\n    throw e;\n  };\n\n  if (collection_name === \"___meteor_failure_test_collection\") {\n    var e = new Error(\"Failure test\");\n    e.expected = true;\n    sendError(e);\n    return;\n  }\n\n  if (!(LocalCollection._isPlainObject(document) &&\n        !EJSON._isCustomType(document))) {\n    sendError(new Error(\n      \"Only plain objects may be inserted into MongoDB\"));\n    return;\n  }\n\n  var write = self._maybeBeginWrite();\n  var refresh = function () {\n    Meteor.refresh({collection: collection_name, id: document._id });\n  };\n  callback = bindEnvironmentForWrite(writeCallback(write, refresh, callback));\n  try {\n    var collection = self.rawCollection(collection_name);\n    collection.insert(replaceTypes(document, replaceMeteorAtomWithMongo),\n                      {safe: true}, callback);\n  } catch (err) {\n    write.committed();\n    throw err;\n  }\n};\n\n// Cause queries that may be affected by the selector to poll in this write\n// fence.\nMongoConnection.prototype._refresh = function (collectionName, selector) {\n  var refreshKey = {collection: collectionName};\n  // If we know which documents we're removing, don't poll queries that are\n  // specific to other documents. (Note that multiple notifications here should\n  // not cause multiple polls, since all our listener is doing is enqueueing a\n  // poll.)\n  var specificIds = LocalCollection._idsMatchedBySelector(selector);\n  if (specificIds) {\n    _.each(specificIds, function (id) {\n      Meteor.refresh(_.extend({id: id}, refreshKey));\n    });\n  } else {\n    Meteor.refresh(refreshKey);\n  }\n};\n\nMongoConnection.prototype._remove = function (collection_name, selector,\n                                              callback) {\n  var self = this;\n\n  if (collection_name === \"___meteor_failure_test_collection\") {\n    var e = new Error(\"Failure test\");\n    e.expected = true;\n    if (callback) {\n      return callback(e);\n    } else {\n      throw e;\n    }\n  }\n\n  var write = self._maybeBeginWrite();\n  var refresh = function () {\n    self._refresh(collection_name, selector);\n  };\n  callback = bindEnvironmentForWrite(writeCallback(write, refresh, callback));\n\n  try {\n    var collection = self.rawCollection(collection_name);\n    var wrappedCallback = function(err, driverResult) {\n      callback(err, transformResult(driverResult).numberAffected);\n    };\n    collection.remove(replaceTypes(selector, replaceMeteorAtomWithMongo),\n                       {safe: true}, wrappedCallback);\n  } catch (err) {\n    write.committed();\n    throw err;\n  }\n};\n\nMongoConnection.prototype._dropCollection = function (collectionName, cb) {\n  var self = this;\n\n  var write = self._maybeBeginWrite();\n  var refresh = function () {\n    Meteor.refresh({collection: collectionName, id: null,\n                    dropCollection: true});\n  };\n  cb = bindEnvironmentForWrite(writeCallback(write, refresh, cb));\n\n  try {\n    var collection = self.rawCollection(collectionName);\n    collection.drop(cb);\n  } catch (e) {\n    write.committed();\n    throw e;\n  }\n};\n\n// For testing only.  Slightly better than `c.rawDatabase().dropDatabase()`\n// because it lets the test's fence wait for it to be complete.\nMongoConnection.prototype._dropDatabase = function (cb) {\n  var self = this;\n\n  var write = self._maybeBeginWrite();\n  var refresh = function () {\n    Meteor.refresh({ dropDatabase: true });\n  };\n  cb = bindEnvironmentForWrite(writeCallback(write, refresh, cb));\n\n  try {\n    self.db.dropDatabase(cb);\n  } catch (e) {\n    write.committed();\n    throw e;\n  }\n};\n\nMongoConnection.prototype._update = function (collection_name, selector, mod,\n                                              options, callback) {\n  var self = this;\n\n  if (! callback && options instanceof Function) {\n    callback = options;\n    options = null;\n  }\n\n  if (collection_name === \"___meteor_failure_test_collection\") {\n    var e = new Error(\"Failure test\");\n    e.expected = true;\n    if (callback) {\n      return callback(e);\n    } else {\n      throw e;\n    }\n  }\n\n  // explicit safety check. null and undefined can crash the mongo\n  // driver. Although the node driver and minimongo do 'support'\n  // non-object modifier in that they don't crash, they are not\n  // meaningful operations and do not do anything. Defensively throw an\n  // error here.\n  if (!mod || typeof mod !== 'object')\n    throw new Error(\"Invalid modifier. Modifier must be an object.\");\n\n  if (!(LocalCollection._isPlainObject(mod) &&\n        !EJSON._isCustomType(mod))) {\n    throw new Error(\n      \"Only plain objects may be used as replacement\" +\n        \" documents in MongoDB\");\n  }\n\n  if (!options) options = {};\n\n  var write = self._maybeBeginWrite();\n  var refresh = function () {\n    self._refresh(collection_name, selector);\n  };\n  callback = writeCallback(write, refresh, callback);\n  try {\n    var collection = self.rawCollection(collection_name);\n    var mongoOpts = {safe: true};\n    // explictly enumerate options that minimongo supports\n    if (options.upsert) mongoOpts.upsert = true;\n    if (options.multi) mongoOpts.multi = true;\n    // Lets you get a more more full result from MongoDB. Use with caution:\n    // might not work with C.upsert (as opposed to C.update({upsert:true}) or\n    // with simulated upsert.\n    if (options.fullResult) mongoOpts.fullResult = true;\n\n    var mongoSelector = replaceTypes(selector, replaceMeteorAtomWithMongo);\n    var mongoMod = replaceTypes(mod, replaceMeteorAtomWithMongo);\n\n    var isModify = isModificationMod(mongoMod);\n    var knownId = selector._id || mod._id;\n\n    if (options._forbidReplace && ! isModify) {\n      var err = new Error(\"Invalid modifier. Replacements are forbidden.\");\n      if (callback) {\n        return callback(err);\n      } else {\n        throw err;\n      }\n    }\n\n    if (options.upsert && (! knownId) && options.insertedId) {\n      // XXX If we know we're using Mongo 2.6 (and this isn't a replacement)\n      //     we should be able to just use $setOnInsert instead of this\n      //     simulated upsert thing. (We can't use $setOnInsert with\n      //     replacements because there's nowhere to write it, and $setOnInsert\n      //     can't set _id on Mongo 2.4.)\n      //\n      //     Also, in the future we could do a real upsert for the mongo id\n      //     generation case, if the the node mongo driver gives us back the id\n      //     of the upserted doc (which our current version does not).\n      //\n      //     For more context, see\n      //     https://github.com/meteor/meteor/issues/2278#issuecomment-64252706\n      simulateUpsertWithInsertedId(\n        collection, mongoSelector, mongoMod,\n        isModify, options,\n        // This callback does not need to be bindEnvironment'ed because\n        // simulateUpsertWithInsertedId() wraps it and then passes it through\n        // bindEnvironmentForWrite.\n        function (error, result) {\n          // If we got here via a upsert() call, then options._returnObject will\n          // be set and we should return the whole object. Otherwise, we should\n          // just return the number of affected docs to match the mongo API.\n          if (result && ! options._returnObject) {\n            callback(error, result.numberAffected);\n          } else {\n            callback(error, result);\n          }\n        }\n      );\n    } else {\n      collection.update(\n        mongoSelector, mongoMod, mongoOpts,\n        bindEnvironmentForWrite(function (err, result) {\n          if (! err) {\n            var meteorResult = transformResult(result);\n            if (meteorResult && options._returnObject) {\n              // If this was an upsert() call, and we ended up\n              // inserting a new doc and we know its id, then\n              // return that id as well.\n\n              if (options.upsert && meteorResult.insertedId && knownId) {\n                meteorResult.insertedId = knownId;\n              }\n              callback(err, meteorResult);\n            } else {\n              callback(err, meteorResult.numberAffected);\n            }\n          } else {\n            callback(err);\n          }\n        }));\n    }\n  } catch (e) {\n    write.committed();\n    throw e;\n  }\n};\n\nvar isModificationMod = function (mod) {\n  var isReplace = false;\n  var isModify = false;\n  for (var k in mod) {\n    if (k.substr(0, 1) === '$') {\n      isModify = true;\n    } else {\n      isReplace = true;\n    }\n  }\n  if (isModify && isReplace) {\n    throw new Error(\n      \"Update parameter cannot have both modifier and non-modifier fields.\");\n  }\n  return isModify;\n};\n\nvar transformResult = function (driverResult) {\n  var meteorResult = { numberAffected: 0 };\n  if (driverResult) {\n    var mongoResult = driverResult.result;\n\n    // On updates with upsert:true, the inserted values come as a list of\n    // upserted values -- even with options.multi, when the upsert does insert,\n    // it only inserts one element.\n    if (mongoResult.upserted) {\n      meteorResult.numberAffected += mongoResult.upserted.length;\n\n      if (mongoResult.upserted.length == 1) {\n        meteorResult.insertedId = mongoResult.upserted[0]._id;\n      }\n    } else {\n      meteorResult.numberAffected = mongoResult.n;\n    }\n  }\n\n  return meteorResult;\n};\n\n\nvar NUM_OPTIMISTIC_TRIES = 3;\n\n// exposed for testing\nMongoConnection._isCannotChangeIdError = function (err) {\n  // First check for what this error looked like in Mongo 2.4.  Either of these\n  // checks should work, but just to be safe...\n  if (err.code === 13596)\n    return true;\n  if (err.errmsg.indexOf(\"cannot change _id of a document\") === 0)\n    return true;\n\n  // Now look for what it looks like in Mongo 2.6.  We don't use the error code\n  // here, because the error code we observed it producing (16837) appears to be\n  // a far more generic error code based on examining the source.\n  if (err.errmsg.indexOf(\"The _id field cannot be changed\") === 0)\n    return true;\n\n  return false;\n};\n\nvar simulateUpsertWithInsertedId = function (collection, selector, mod,\n                                             isModify, options, callback) {\n  // STRATEGY:  First try doing a plain update.  If it affected 0 documents,\n  // then without affecting the database, we know we should probably do an\n  // insert.  We then do a *conditional* insert that will fail in the case\n  // of a race condition.  This conditional insert is actually an\n  // upsert-replace with an _id, which will never successfully update an\n  // existing document.  If this upsert fails with an error saying it\n  // couldn't change an existing _id, then we know an intervening write has\n  // caused the query to match something.  We go back to step one and repeat.\n  // Like all \"optimistic write\" schemes, we rely on the fact that it's\n  // unlikely our writes will continue to be interfered with under normal\n  // circumstances (though sufficiently heavy contention with writers\n  // disagreeing on the existence of an object will cause writes to fail\n  // in theory).\n\n  var newDoc;\n  // Run this code up front so that it fails fast if someone uses\n  // a Mongo update operator we don't support.\n  if (isModify) {\n    // We've already run replaceTypes/replaceMeteorAtomWithMongo on\n    // selector and mod.  We assume it doesn't matter, as far as\n    // the behavior of modifiers is concerned, whether `_modify`\n    // is run on EJSON or on mongo-converted EJSON.\n    var selectorDoc = LocalCollection._removeDollarOperators(selector);\n\n    newDoc = selectorDoc;\n\n    // Convert dotted keys into objects. (Resolves issue #4522).\n    _.each(newDoc, function (value, key) {\n      var trail = key.split(\".\");\n\n      if (trail.length > 1) {\n        //Key is dotted. Convert it into an object.\n        delete newDoc[key];\n\n        var obj = newDoc,\n            leaf = trail.pop();\n\n        // XXX It is not quite certain what should be done if there are clashing\n        // keys on the trail of the dotted key. For now we will just override it\n        // It wouldn't be a very sane query in the first place, but should look\n        // up what mongo does in this case.\n\n        while ((key = trail.shift())) {\n          if (typeof obj[key] !== \"object\") {\n            obj[key] = {};\n          }\n\n          obj = obj[key];\n        }\n\n        obj[leaf] = value;\n      }\n    });\n\n    LocalCollection._modify(newDoc, mod, {isInsert: true});\n  } else {\n    newDoc = mod;\n  }\n\n  var insertedId = options.insertedId; // must exist\n  var mongoOptsForUpdate = {\n    safe: true,\n    multi: options.multi\n  };\n  var mongoOptsForInsert = {\n    safe: true,\n    upsert: true\n  };\n\n  var tries = NUM_OPTIMISTIC_TRIES;\n\n  var doUpdate = function () {\n    tries--;\n    if (! tries) {\n      callback(new Error(\"Upsert failed after \" + NUM_OPTIMISTIC_TRIES + \" tries.\"));\n    } else {\n      collection.update(selector, mod, mongoOptsForUpdate,\n                        bindEnvironmentForWrite(function (err, result) {\n                          if (err) {\n                            callback(err);\n                          } else if (result && result.result.n != 0) {\n                            callback(null, {\n                              numberAffected: result.result.n\n                            });\n                          } else {\n                            doConditionalInsert();\n                          }\n                        }));\n    }\n  };\n\n  var doConditionalInsert = function () {\n    var replacementWithId = _.extend(\n      replaceTypes({_id: insertedId}, replaceMeteorAtomWithMongo),\n      newDoc);\n    collection.update(selector, replacementWithId, mongoOptsForInsert,\n                      bindEnvironmentForWrite(function (err, result) {\n                        if (err) {\n                          // figure out if this is a\n                          // \"cannot change _id of document\" error, and\n                          // if so, try doUpdate() again, up to 3 times.\n                          if (MongoConnection._isCannotChangeIdError(err)) {\n                            doUpdate();\n                          } else {\n                            callback(err);\n                          }\n                        } else {\n                          callback(null, {\n                            numberAffected: result.result.upserted.length,\n                            insertedId: insertedId,\n                          });\n                        }\n                      }));\n  };\n\n  doUpdate();\n};\n\n_.each([\"insert\", \"update\", \"remove\", \"dropCollection\", \"dropDatabase\"], function (method) {\n  MongoConnection.prototype[method] = function (/* arguments */) {\n    var self = this;\n    return Meteor.wrapAsync(self[\"_\" + method]).apply(self, arguments);\n  };\n});\n\n// XXX MongoConnection.upsert() does not return the id of the inserted document\n// unless you set it explicitly in the selector or modifier (as a replacement\n// doc).\nMongoConnection.prototype.upsert = function (collectionName, selector, mod,\n                                             options, callback) {\n  var self = this;\n  if (typeof options === \"function\" && ! callback) {\n    callback = options;\n    options = {};\n  }\n\n  return self.update(collectionName, selector, mod,\n                     _.extend({}, options, {\n                       upsert: true,\n                       _returnObject: true\n                     }), callback);\n};\n\nMongoConnection.prototype.find = function (collectionName, selector, options) {\n  var self = this;\n\n  if (arguments.length === 1)\n    selector = {};\n\n  return new Cursor(\n    self, new CursorDescription(collectionName, selector, options));\n};\n\nMongoConnection.prototype.findOne = function (collection_name, selector,\n                                              options) {\n  var self = this;\n  if (arguments.length === 1)\n    selector = {};\n\n  options = options || {};\n  options.limit = 1;\n  return self.find(collection_name, selector, options).fetch()[0];\n};\n\n// We'll actually design an index API later. For now, we just pass through to\n// Mongo's, but make it synchronous.\nMongoConnection.prototype._ensureIndex = function (collectionName, index,\n                                                   options) {\n  var self = this;\n\n  // We expect this function to be called at startup, not from within a method,\n  // so we don't interact with the write fence.\n  var collection = self.rawCollection(collectionName);\n  var future = new Future;\n  var indexName = collection.ensureIndex(index, options, future.resolver());\n  future.wait();\n};\nMongoConnection.prototype._dropIndex = function (collectionName, index) {\n  var self = this;\n\n  // This function is only used by test code, not within a method, so we don't\n  // interact with the write fence.\n  var collection = self.rawCollection(collectionName);\n  var future = new Future;\n  var indexName = collection.dropIndex(index, future.resolver());\n  future.wait();\n};\n\n// CURSORS\n\n// There are several classes which relate to cursors:\n//\n// CursorDescription represents the arguments used to construct a cursor:\n// collectionName, selector, and (find) options.  Because it is used as a key\n// for cursor de-dup, everything in it should either be JSON-stringifiable or\n// not affect observeChanges output (eg, options.transform functions are not\n// stringifiable but do not affect observeChanges).\n//\n// SynchronousCursor is a wrapper around a MongoDB cursor\n// which includes fully-synchronous versions of forEach, etc.\n//\n// Cursor is the cursor object returned from find(), which implements the\n// documented Mongo.Collection cursor API.  It wraps a CursorDescription and a\n// SynchronousCursor (lazily: it doesn't contact Mongo until you call a method\n// like fetch or forEach on it).\n//\n// ObserveHandle is the \"observe handle\" returned from observeChanges. It has a\n// reference to an ObserveMultiplexer.\n//\n// ObserveMultiplexer allows multiple identical ObserveHandles to be driven by a\n// single observe driver.\n//\n// There are two \"observe drivers\" which drive ObserveMultiplexers:\n//   - PollingObserveDriver caches the results of a query and reruns it when\n//     necessary.\n//   - OplogObserveDriver follows the Mongo operation log to directly observe\n//     database changes.\n// Both implementations follow the same simple interface: when you create them,\n// they start sending observeChanges callbacks (and a ready() invocation) to\n// their ObserveMultiplexer, and you stop them by calling their stop() method.\n\nCursorDescription = function (collectionName, selector, options) {\n  var self = this;\n  self.collectionName = collectionName;\n  self.selector = Mongo.Collection._rewriteSelector(selector);\n  self.options = options || {};\n};\n\nCursor = function (mongo, cursorDescription) {\n  var self = this;\n\n  self._mongo = mongo;\n  self._cursorDescription = cursorDescription;\n  self._synchronousCursor = null;\n};\n\n_.each(['forEach', 'map', 'fetch', 'count'], function (method) {\n  Cursor.prototype[method] = function () {\n    var self = this;\n\n    // You can only observe a tailable cursor.\n    if (self._cursorDescription.options.tailable)\n      throw new Error(\"Cannot call \" + method + \" on a tailable cursor\");\n\n    if (!self._synchronousCursor) {\n      self._synchronousCursor = self._mongo._createSynchronousCursor(\n        self._cursorDescription, {\n          // Make sure that the \"self\" argument to forEach/map callbacks is the\n          // Cursor, not the SynchronousCursor.\n          selfForIteration: self,\n          useTransform: true\n        });\n    }\n\n    return self._synchronousCursor[method].apply(\n      self._synchronousCursor, arguments);\n  };\n});\n\n// Since we don't actually have a \"nextObject\" interface, there's really no\n// reason to have a \"rewind\" interface.  All it did was make multiple calls\n// to fetch/map/forEach return nothing the second time.\n// XXX COMPAT WITH 0.8.1\nCursor.prototype.rewind = function () {\n};\n\nCursor.prototype.getTransform = function () {\n  return this._cursorDescription.options.transform;\n};\n\n// When you call Meteor.publish() with a function that returns a Cursor, we need\n// to transmute it into the equivalent subscription.  This is the function that\n// does that.\n\nCursor.prototype._publishCursor = function (sub) {\n  var self = this;\n  var collection = self._cursorDescription.collectionName;\n  return Mongo.Collection._publishCursor(self, sub, collection);\n};\n\n// Used to guarantee that publish functions return at most one cursor per\n// collection. Private, because we might later have cursors that include\n// documents from multiple collections somehow.\nCursor.prototype._getCollectionName = function () {\n  var self = this;\n  return self._cursorDescription.collectionName;\n};\n\nCursor.prototype.observe = function (callbacks) {\n  var self = this;\n  return LocalCollection._observeFromObserveChanges(self, callbacks);\n};\n\nCursor.prototype.observeChanges = function (callbacks) {\n  var self = this;\n  var ordered = LocalCollection._observeChangesCallbacksAreOrdered(callbacks);\n  return self._mongo._observeChanges(\n    self._cursorDescription, ordered, callbacks);\n};\n\nMongoConnection.prototype._createSynchronousCursor = function(\n    cursorDescription, options) {\n  var self = this;\n  options = _.pick(options || {}, 'selfForIteration', 'useTransform');\n\n  var collection = self.rawCollection(cursorDescription.collectionName);\n  var cursorOptions = cursorDescription.options;\n  var mongoOptions = {\n    sort: cursorOptions.sort,\n    limit: cursorOptions.limit,\n    skip: cursorOptions.skip\n  };\n\n  // Do we want a tailable cursor (which only works on capped collections)?\n  if (cursorOptions.tailable) {\n    // We want a tailable cursor...\n    mongoOptions.tailable = true;\n    // ... and for the server to wait a bit if any getMore has no data (rather\n    // than making us put the relevant sleeps in the client)...\n    mongoOptions.awaitdata = true;\n    // ... and to keep querying the server indefinitely rather than just 5 times\n    // if there's no more data.\n    mongoOptions.numberOfRetries = -1;\n    // And if this is on the oplog collection and the cursor specifies a 'ts',\n    // then set the undocumented oplog replay flag, which does a special scan to\n    // find the first document (instead of creating an index on ts). This is a\n    // very hard-coded Mongo flag which only works on the oplog collection and\n    // only works with the ts field.\n    if (cursorDescription.collectionName === OPLOG_COLLECTION &&\n        cursorDescription.selector.ts) {\n      mongoOptions.oplogReplay = true;\n    }\n  }\n\n  var dbCursor = collection.find(\n    replaceTypes(cursorDescription.selector, replaceMeteorAtomWithMongo),\n    cursorOptions.fields, mongoOptions);\n\n  return new SynchronousCursor(dbCursor, cursorDescription, options);\n};\n\nvar SynchronousCursor = function (dbCursor, cursorDescription, options) {\n  var self = this;\n  options = _.pick(options || {}, 'selfForIteration', 'useTransform');\n\n  self._dbCursor = dbCursor;\n  self._cursorDescription = cursorDescription;\n  // The \"self\" argument passed to forEach/map callbacks. If we're wrapped\n  // inside a user-visible Cursor, we want to provide the outer cursor!\n  self._selfForIteration = options.selfForIteration || self;\n  if (options.useTransform && cursorDescription.options.transform) {\n    self._transform = LocalCollection.wrapTransform(\n      cursorDescription.options.transform);\n  } else {\n    self._transform = null;\n  }\n\n  // Need to specify that the callback is the first argument to nextObject,\n  // since otherwise when we try to call it with no args the driver will\n  // interpret \"undefined\" first arg as an options hash and crash.\n  self._synchronousNextObject = Future.wrap(\n    dbCursor.nextObject.bind(dbCursor), 0);\n  self._synchronousCount = Future.wrap(dbCursor.count.bind(dbCursor));\n  self._visitedIds = new LocalCollection._IdMap;\n};\n\n_.extend(SynchronousCursor.prototype, {\n  _nextObject: function () {\n    var self = this;\n\n    while (true) {\n      var doc = self._synchronousNextObject().wait();\n\n      if (!doc) return null;\n      doc = replaceTypes(doc, replaceMongoAtomWithMeteor);\n\n      if (!self._cursorDescription.options.tailable && _.has(doc, '_id')) {\n        // Did Mongo give us duplicate documents in the same cursor? If so,\n        // ignore this one. (Do this before the transform, since transform might\n        // return some unrelated value.) We don't do this for tailable cursors,\n        // because we want to maintain O(1) memory usage. And if there isn't _id\n        // for some reason (maybe it's the oplog), then we don't do this either.\n        // (Be careful to do this for falsey but existing _id, though.)\n        if (self._visitedIds.has(doc._id)) continue;\n        self._visitedIds.set(doc._id, true);\n      }\n\n      if (self._transform)\n        doc = self._transform(doc);\n\n      return doc;\n    }\n  },\n\n  forEach: function (callback, thisArg) {\n    var self = this;\n\n    // Get back to the beginning.\n    self._rewind();\n\n    // We implement the loop ourself instead of using self._dbCursor.each,\n    // because \"each\" will call its callback outside of a fiber which makes it\n    // much more complex to make this function synchronous.\n    var index = 0;\n    while (true) {\n      var doc = self._nextObject();\n      if (!doc) return;\n      callback.call(thisArg, doc, index++, self._selfForIteration);\n    }\n  },\n\n  // XXX Allow overlapping callback executions if callback yields.\n  map: function (callback, thisArg) {\n    var self = this;\n    var res = [];\n    self.forEach(function (doc, index) {\n      res.push(callback.call(thisArg, doc, index, self._selfForIteration));\n    });\n    return res;\n  },\n\n  _rewind: function () {\n    var self = this;\n\n    // known to be synchronous\n    self._dbCursor.rewind();\n\n    self._visitedIds = new LocalCollection._IdMap;\n  },\n\n  // Mostly usable for tailable cursors.\n  close: function () {\n    var self = this;\n\n    self._dbCursor.close();\n  },\n\n  fetch: function () {\n    var self = this;\n    return self.map(_.identity);\n  },\n\n  count: function (applySkipLimit = false) {\n    var self = this;\n    return self._synchronousCount(applySkipLimit).wait();\n  },\n\n  // This method is NOT wrapped in Cursor.\n  getRawObjects: function (ordered) {\n    var self = this;\n    if (ordered) {\n      return self.fetch();\n    } else {\n      var results = new LocalCollection._IdMap;\n      self.forEach(function (doc) {\n        results.set(doc._id, doc);\n      });\n      return results;\n    }\n  }\n});\n\nMongoConnection.prototype.tail = function (cursorDescription, docCallback) {\n  var self = this;\n  if (!cursorDescription.options.tailable)\n    throw new Error(\"Can only tail a tailable cursor\");\n\n  var cursor = self._createSynchronousCursor(cursorDescription);\n\n  var stopped = false;\n  var lastTS;\n  var loop = function () {\n    var doc = null;\n    while (true) {\n      if (stopped)\n        return;\n      try {\n        doc = cursor._nextObject();\n      } catch (err) {\n        // There's no good way to figure out if this was actually an error\n        // from Mongo. Ah well. But either way, we need to retry the cursor\n        // (unless the failure was because the observe got stopped).\n        doc = null;\n      }\n      // Since cursor._nextObject can yield, we need to check again to see if\n      // we've been stopped before calling the callback.\n      if (stopped)\n        return;\n      if (doc) {\n        // If a tailable cursor contains a \"ts\" field, use it to recreate the\n        // cursor on error. (\"ts\" is a standard that Mongo uses internally for\n        // the oplog, and there's a special flag that lets you do binary search\n        // on it instead of needing to use an index.)\n        lastTS = doc.ts;\n        docCallback(doc);\n      } else {\n        var newSelector = _.clone(cursorDescription.selector);\n        if (lastTS) {\n          newSelector.ts = {$gt: lastTS};\n        }\n        cursor = self._createSynchronousCursor(new CursorDescription(\n          cursorDescription.collectionName,\n          newSelector,\n          cursorDescription.options));\n        // Mongo failover takes many seconds.  Retry in a bit.  (Without this\n        // setTimeout, we peg the CPU at 100% and never notice the actual\n        // failover.\n        Meteor.setTimeout(loop, 100);\n        break;\n      }\n    }\n  };\n\n  Meteor.defer(loop);\n\n  return {\n    stop: function () {\n      stopped = true;\n      cursor.close();\n    }\n  };\n};\n\nMongoConnection.prototype._observeChanges = function (\n    cursorDescription, ordered, callbacks) {\n  var self = this;\n\n  if (cursorDescription.options.tailable) {\n    return self._observeChangesTailable(cursorDescription, ordered, callbacks);\n  }\n\n  // You may not filter out _id when observing changes, because the id is a core\n  // part of the observeChanges API.\n  if (cursorDescription.options.fields &&\n      (cursorDescription.options.fields._id === 0 ||\n       cursorDescription.options.fields._id === false)) {\n    throw Error(\"You may not observe a cursor with {fields: {_id: 0}}\");\n  }\n\n  var observeKey = JSON.stringify(\n    _.extend({ordered: ordered}, cursorDescription));\n\n  var multiplexer, observeDriver;\n  var firstHandle = false;\n\n  // Find a matching ObserveMultiplexer, or create a new one. This next block is\n  // guaranteed to not yield (and it doesn't call anything that can observe a\n  // new query), so no other calls to this function can interleave with it.\n  Meteor._noYieldsAllowed(function () {\n    if (_.has(self._observeMultiplexers, observeKey)) {\n      multiplexer = self._observeMultiplexers[observeKey];\n    } else {\n      firstHandle = true;\n      // Create a new ObserveMultiplexer.\n      multiplexer = new ObserveMultiplexer({\n        ordered: ordered,\n        onStop: function () {\n          delete self._observeMultiplexers[observeKey];\n          observeDriver.stop();\n        }\n      });\n      self._observeMultiplexers[observeKey] = multiplexer;\n    }\n  });\n\n  var observeHandle = new ObserveHandle(multiplexer, callbacks);\n\n  if (firstHandle) {\n    var matcher, sorter;\n    var canUseOplog = _.all([\n      function () {\n        // At a bare minimum, using the oplog requires us to have an oplog, to\n        // want unordered callbacks, and to not want a callback on the polls\n        // that won't happen.\n        return self._oplogHandle && !ordered &&\n          !callbacks._testOnlyPollCallback;\n      }, function () {\n        // We need to be able to compile the selector. Fall back to polling for\n        // some newfangled $selector that minimongo doesn't support yet.\n        try {\n          matcher = new Minimongo.Matcher(cursorDescription.selector);\n          return true;\n        } catch (e) {\n          // XXX make all compilation errors MinimongoError or something\n          //     so that this doesn't ignore unrelated exceptions\n          return false;\n        }\n      }, function () {\n        // ... and the selector itself needs to support oplog.\n        return OplogObserveDriver.cursorSupported(cursorDescription, matcher);\n      }, function () {\n        // And we need to be able to compile the sort, if any.  eg, can't be\n        // {$natural: 1}.\n        if (!cursorDescription.options.sort)\n          return true;\n        try {\n          sorter = new Minimongo.Sorter(cursorDescription.options.sort,\n                                        { matcher: matcher });\n          return true;\n        } catch (e) {\n          // XXX make all compilation errors MinimongoError or something\n          //     so that this doesn't ignore unrelated exceptions\n          return false;\n        }\n      }], function (f) { return f(); });  // invoke each function\n\n    var driverClass = canUseOplog ? OplogObserveDriver : PollingObserveDriver;\n    observeDriver = new driverClass({\n      cursorDescription: cursorDescription,\n      mongoHandle: self,\n      multiplexer: multiplexer,\n      ordered: ordered,\n      matcher: matcher,  // ignored by polling\n      sorter: sorter,  // ignored by polling\n      _testOnlyPollCallback: callbacks._testOnlyPollCallback\n    });\n\n    // This field is only set for use in tests.\n    multiplexer._observeDriver = observeDriver;\n  }\n\n  // Blocks until the initial adds have been sent.\n  multiplexer.addHandleAndSendInitialAdds(observeHandle);\n\n  return observeHandle;\n};\n\n// Listen for the invalidation messages that will trigger us to poll the\n// database for changes. If this selector specifies specific IDs, specify them\n// here, so that updates to different specific IDs don't cause us to poll.\n// listenCallback is the same kind of (notification, complete) callback passed\n// to InvalidationCrossbar.listen.\n\nlistenAll = function (cursorDescription, listenCallback) {\n  var listeners = [];\n  forEachTrigger(cursorDescription, function (trigger) {\n    listeners.push(DDPServer._InvalidationCrossbar.listen(\n      trigger, listenCallback));\n  });\n\n  return {\n    stop: function () {\n      _.each(listeners, function (listener) {\n        listener.stop();\n      });\n    }\n  };\n};\n\nforEachTrigger = function (cursorDescription, triggerCallback) {\n  var key = {collection: cursorDescription.collectionName};\n  var specificIds = LocalCollection._idsMatchedBySelector(\n    cursorDescription.selector);\n  if (specificIds) {\n    _.each(specificIds, function (id) {\n      triggerCallback(_.extend({id: id}, key));\n    });\n    triggerCallback(_.extend({dropCollection: true, id: null}, key));\n  } else {\n    triggerCallback(key);\n  }\n  // Everyone cares about the database being dropped.\n  triggerCallback({ dropDatabase: true });\n};\n\n// observeChanges for tailable cursors on capped collections.\n//\n// Some differences from normal cursors:\n//   - Will never produce anything other than 'added' or 'addedBefore'. If you\n//     do update a document that has already been produced, this will not notice\n//     it.\n//   - If you disconnect and reconnect from Mongo, it will essentially restart\n//     the query, which will lead to duplicate results. This is pretty bad,\n//     but if you include a field called 'ts' which is inserted as\n//     new MongoInternals.MongoTimestamp(0, 0) (which is initialized to the\n//     current Mongo-style timestamp), we'll be able to find the place to\n//     restart properly. (This field is specifically understood by Mongo with an\n//     optimization which allows it to find the right place to start without\n//     an index on ts. It's how the oplog works.)\n//   - No callbacks are triggered synchronously with the call (there's no\n//     differentiation between \"initial data\" and \"later changes\"; everything\n//     that matches the query gets sent asynchronously).\n//   - De-duplication is not implemented.\n//   - Does not yet interact with the write fence. Probably, this should work by\n//     ignoring removes (which don't work on capped collections) and updates\n//     (which don't affect tailable cursors), and just keeping track of the ID\n//     of the inserted object, and closing the write fence once you get to that\n//     ID (or timestamp?).  This doesn't work well if the document doesn't match\n//     the query, though.  On the other hand, the write fence can close\n//     immediately if it does not match the query. So if we trust minimongo\n//     enough to accurately evaluate the query against the write fence, we\n//     should be able to do this...  Of course, minimongo doesn't even support\n//     Mongo Timestamps yet.\nMongoConnection.prototype._observeChangesTailable = function (\n    cursorDescription, ordered, callbacks) {\n  var self = this;\n\n  // Tailable cursors only ever call added/addedBefore callbacks, so it's an\n  // error if you didn't provide them.\n  if ((ordered && !callbacks.addedBefore) ||\n      (!ordered && !callbacks.added)) {\n    throw new Error(\"Can't observe an \" + (ordered ? \"ordered\" : \"unordered\")\n                    + \" tailable cursor without a \"\n                    + (ordered ? \"addedBefore\" : \"added\") + \" callback\");\n  }\n\n  return self.tail(cursorDescription, function (doc) {\n    var id = doc._id;\n    delete doc._id;\n    // The ts is an implementation detail. Hide it.\n    delete doc.ts;\n    if (ordered) {\n      callbacks.addedBefore(id, doc, null);\n    } else {\n      callbacks.added(id, doc);\n    }\n  });\n};\n\n// XXX We probably need to find a better way to expose this. Right now\n// it's only used by tests, but in fact you need it in normal\n// operation to interact with capped collections.\nMongoInternals.MongoTimestamp = MongoDB.Timestamp;\n\nMongoInternals.Connection = MongoConnection;\n","var Future = Npm.require('fibers/future');\n\nOPLOG_COLLECTION = 'oplog.rs';\n\nvar TOO_FAR_BEHIND = process.env.METEOR_OPLOG_TOO_FAR_BEHIND || 2000;\n\nvar showTS = function (ts) {\n  return \"Timestamp(\" + ts.getHighBits() + \", \" + ts.getLowBits() + \")\";\n};\n\nidForOp = function (op) {\n  if (op.op === 'd')\n    return op.o._id;\n  else if (op.op === 'i')\n    return op.o._id;\n  else if (op.op === 'u')\n    return op.o2._id;\n  else if (op.op === 'c')\n    throw Error(\"Operator 'c' doesn't supply an object with id: \" +\n                EJSON.stringify(op));\n  else\n    throw Error(\"Unknown op: \" + EJSON.stringify(op));\n};\n\nOplogHandle = function (oplogUrl, dbName) {\n  var self = this;\n  self._oplogUrl = oplogUrl;\n  self._dbName = dbName;\n\n  self._oplogLastEntryConnection = null;\n  self._oplogTailConnection = null;\n  self._stopped = false;\n  self._tailHandle = null;\n  self._readyFuture = new Future();\n  self._crossbar = new DDPServer._Crossbar({\n    factPackage: \"mongo-livedata\", factName: \"oplog-watchers\"\n  });\n  self._baseOplogSelector = {\n    ns: new RegExp('^' + Meteor._escapeRegExp(self._dbName) + '\\\\.'),\n    $or: [\n      { op: {$in: ['i', 'u', 'd']} },\n      // drop collection\n      { op: 'c', 'o.drop': { $exists: true } },\n      { op: 'c', 'o.dropDatabase': 1 },\n    ]\n  };\n\n  // Data structures to support waitUntilCaughtUp(). Each oplog entry has a\n  // MongoTimestamp object on it (which is not the same as a Date --- it's a\n  // combination of time and an incrementing counter; see\n  // http://docs.mongodb.org/manual/reference/bson-types/#timestamps).\n  //\n  // _catchingUpFutures is an array of {ts: MongoTimestamp, future: Future}\n  // objects, sorted by ascending timestamp. _lastProcessedTS is the\n  // MongoTimestamp of the last oplog entry we've processed.\n  //\n  // Each time we call waitUntilCaughtUp, we take a peek at the final oplog\n  // entry in the db.  If we've already processed it (ie, it is not greater than\n  // _lastProcessedTS), waitUntilCaughtUp immediately returns. Otherwise,\n  // waitUntilCaughtUp makes a new Future and inserts it along with the final\n  // timestamp entry that it read, into _catchingUpFutures. waitUntilCaughtUp\n  // then waits on that future, which is resolved once _lastProcessedTS is\n  // incremented to be past its timestamp by the worker fiber.\n  //\n  // XXX use a priority queue or something else that's faster than an array\n  self._catchingUpFutures = [];\n  self._lastProcessedTS = null;\n\n  self._onSkippedEntriesHook = new Hook({\n    debugPrintExceptions: \"onSkippedEntries callback\"\n  });\n\n  self._entryQueue = new Meteor._DoubleEndedQueue();\n  self._workerActive = false;\n\n  self._startTailing();\n};\n\n_.extend(OplogHandle.prototype, {\n  stop: function () {\n    var self = this;\n    if (self._stopped)\n      return;\n    self._stopped = true;\n    if (self._tailHandle)\n      self._tailHandle.stop();\n    // XXX should close connections too\n  },\n  onOplogEntry: function (trigger, callback) {\n    var self = this;\n    if (self._stopped)\n      throw new Error(\"Called onOplogEntry on stopped handle!\");\n\n    // Calling onOplogEntry requires us to wait for the tailing to be ready.\n    self._readyFuture.wait();\n\n    var originalCallback = callback;\n    callback = Meteor.bindEnvironment(function (notification) {\n      // XXX can we avoid this clone by making oplog.js careful?\n      originalCallback(EJSON.clone(notification));\n    }, function (err) {\n      Meteor._debug(\"Error in oplog callback\", err.stack);\n    });\n    var listenHandle = self._crossbar.listen(trigger, callback);\n    return {\n      stop: function () {\n        listenHandle.stop();\n      }\n    };\n  },\n  // Register a callback to be invoked any time we skip oplog entries (eg,\n  // because we are too far behind).\n  onSkippedEntries: function (callback) {\n    var self = this;\n    if (self._stopped)\n      throw new Error(\"Called onSkippedEntries on stopped handle!\");\n    return self._onSkippedEntriesHook.register(callback);\n  },\n  // Calls `callback` once the oplog has been processed up to a point that is\n  // roughly \"now\": specifically, once we've processed all ops that are\n  // currently visible.\n  // XXX become convinced that this is actually safe even if oplogConnection\n  // is some kind of pool\n  waitUntilCaughtUp: function () {\n    var self = this;\n    if (self._stopped)\n      throw new Error(\"Called waitUntilCaughtUp on stopped handle!\");\n\n    // Calling waitUntilCaughtUp requries us to wait for the oplog connection to\n    // be ready.\n    self._readyFuture.wait();\n    var lastEntry;\n\n    while (!self._stopped) {\n      // We need to make the selector at least as restrictive as the actual\n      // tailing selector (ie, we need to specify the DB name) or else we might\n      // find a TS that won't show up in the actual tail stream.\n      try {\n        lastEntry = self._oplogLastEntryConnection.findOne(\n          OPLOG_COLLECTION, self._baseOplogSelector,\n          {fields: {ts: 1}, sort: {$natural: -1}});\n        break;\n      } catch (e) {\n        // During failover (eg) if we get an exception we should log and retry\n        // instead of crashing.\n        Meteor._debug(\"Got exception while reading last entry: \" + e);\n        Meteor._sleepForMs(100);\n      }\n    }\n\n    if (self._stopped)\n      return;\n\n    if (!lastEntry) {\n      // Really, nothing in the oplog? Well, we've processed everything.\n      return;\n    }\n\n    var ts = lastEntry.ts;\n    if (!ts)\n      throw Error(\"oplog entry without ts: \" + EJSON.stringify(lastEntry));\n\n    if (self._lastProcessedTS && ts.lessThanOrEqual(self._lastProcessedTS)) {\n      // We've already caught up to here.\n      return;\n    }\n\n\n    // Insert the future into our list. Almost always, this will be at the end,\n    // but it's conceivable that if we fail over from one primary to another,\n    // the oplog entries we see will go backwards.\n    var insertAfter = self._catchingUpFutures.length;\n    while (insertAfter - 1 > 0 && self._catchingUpFutures[insertAfter - 1].ts.greaterThan(ts)) {\n      insertAfter--;\n    }\n    var f = new Future;\n    self._catchingUpFutures.splice(insertAfter, 0, {ts: ts, future: f});\n    f.wait();\n  },\n  _startTailing: function () {\n    var self = this;\n    // First, make sure that we're talking to the local database.\n    var mongodbUri = Npm.require('mongodb-uri');\n    if (mongodbUri.parse(self._oplogUrl).database !== 'local') {\n      throw Error(\"$MONGO_OPLOG_URL must be set to the 'local' database of \" +\n                  \"a Mongo replica set\");\n    }\n\n    // We make two separate connections to Mongo. The Node Mongo driver\n    // implements a naive round-robin connection pool: each \"connection\" is a\n    // pool of several (5 by default) TCP connections, and each request is\n    // rotated through the pools. Tailable cursor queries block on the server\n    // until there is some data to return (or until a few seconds have\n    // passed). So if the connection pool used for tailing cursors is the same\n    // pool used for other queries, the other queries will be delayed by seconds\n    // 1/5 of the time.\n    //\n    // The tail connection will only ever be running a single tail command, so\n    // it only needs to make one underlying TCP connection.\n    self._oplogTailConnection = new MongoConnection(\n      self._oplogUrl, {poolSize: 1});\n    // XXX better docs, but: it's to get monotonic results\n    // XXX is it safe to say \"if there's an in flight query, just use its\n    //     results\"? I don't think so but should consider that\n    self._oplogLastEntryConnection = new MongoConnection(\n      self._oplogUrl, {poolSize: 1});\n\n    // Now, make sure that there actually is a repl set here. If not, oplog\n    // tailing won't ever find anything!\n    // More on the isMasterDoc\n    // https://docs.mongodb.com/manual/reference/command/isMaster/\n    var f = new Future;\n    self._oplogLastEntryConnection.db.admin().command(\n      { ismaster: 1 }, f.resolver());\n    var isMasterDoc = f.wait();\n\n    if (!(isMasterDoc && isMasterDoc.setName)) {\n      throw Error(\"$MONGO_OPLOG_URL must be set to the 'local' database of \" +\n                  \"a Mongo replica set\");\n    }\n\n    // Find the last oplog entry.\n    var lastOplogEntry = self._oplogLastEntryConnection.findOne(\n      OPLOG_COLLECTION, {}, {sort: {$natural: -1}, fields: {ts: 1}});\n\n    var oplogSelector = _.clone(self._baseOplogSelector);\n    if (lastOplogEntry) {\n      // Start after the last entry that currently exists.\n      oplogSelector.ts = {$gt: lastOplogEntry.ts};\n      // If there are any calls to callWhenProcessedLatest before any other\n      // oplog entries show up, allow callWhenProcessedLatest to call its\n      // callback immediately.\n      self._lastProcessedTS = lastOplogEntry.ts;\n    }\n\n    var cursorDescription = new CursorDescription(\n      OPLOG_COLLECTION, oplogSelector, {tailable: true});\n\n    self._tailHandle = self._oplogTailConnection.tail(\n      cursorDescription, function (doc) {\n        self._entryQueue.push(doc);\n        self._maybeStartWorker();\n      }\n    );\n    self._readyFuture.return();\n  },\n\n  _maybeStartWorker: function () {\n    var self = this;\n    if (self._workerActive)\n      return;\n    self._workerActive = true;\n    Meteor.defer(function () {\n      try {\n        while (! self._stopped && ! self._entryQueue.isEmpty()) {\n          // Are we too far behind? Just tell our observers that they need to\n          // repoll, and drop our queue.\n          if (self._entryQueue.length > TOO_FAR_BEHIND) {\n            var lastEntry = self._entryQueue.pop();\n            self._entryQueue.clear();\n\n            self._onSkippedEntriesHook.each(function (callback) {\n              callback();\n              return true;\n            });\n\n            // Free any waitUntilCaughtUp() calls that were waiting for us to\n            // pass something that we just skipped.\n            self._setLastProcessedTS(lastEntry.ts);\n            continue;\n          }\n\n          var doc = self._entryQueue.shift();\n\n          if (!(doc.ns && doc.ns.length > self._dbName.length + 1 &&\n                doc.ns.substr(0, self._dbName.length + 1) ===\n                (self._dbName + '.'))) {\n            throw new Error(\"Unexpected ns\");\n          }\n\n          var trigger = {collection: doc.ns.substr(self._dbName.length + 1),\n                         dropCollection: false,\n                         dropDatabase: false,\n                         op: doc};\n\n          // Is it a special command and the collection name is hidden somewhere\n          // in operator?\n          if (trigger.collection === \"$cmd\") {\n            if (doc.o.dropDatabase) {\n              delete trigger.collection;\n              trigger.dropDatabase = true;\n            } else if (_.has(doc.o, 'drop')) {\n              trigger.collection = doc.o.drop;\n              trigger.dropCollection = true;\n              trigger.id = null;\n            } else {\n              throw Error(\"Unknown command \" + JSON.stringify(doc));\n            }\n          } else {\n            // All other ops have an id.\n            trigger.id = idForOp(doc);\n          }\n\n          self._crossbar.fire(trigger);\n\n          // Now that we've processed this operation, process pending\n          // sequencers.\n          if (!doc.ts)\n            throw Error(\"oplog entry without ts: \" + EJSON.stringify(doc));\n          self._setLastProcessedTS(doc.ts);\n        }\n      } finally {\n        self._workerActive = false;\n      }\n    });\n  },\n  _setLastProcessedTS: function (ts) {\n    var self = this;\n    self._lastProcessedTS = ts;\n    while (!_.isEmpty(self._catchingUpFutures) && self._catchingUpFutures[0].ts.lessThanOrEqual(self._lastProcessedTS)) {\n      var sequencer = self._catchingUpFutures.shift();\n      sequencer.future.return();\n    }\n  },\n\n  //Methods used on tests to dinamically change TOO_FAR_BEHIND\n  _defineTooFarBehind: function(value) {\n    TOO_FAR_BEHIND = value;\n  },\n  _resetTooFarBehind: function() {\n    TOO_FAR_BEHIND = process.env.METEOR_OPLOG_TOO_FAR_BEHIND || 2000;\n  }\n});\n","var Future = Npm.require('fibers/future');\n\nObserveMultiplexer = function (options) {\n  var self = this;\n\n  if (!options || !_.has(options, 'ordered'))\n    throw Error(\"must specified ordered\");\n\n  Package.facts && Package.facts.Facts.incrementServerFact(\n    \"mongo-livedata\", \"observe-multiplexers\", 1);\n\n  self._ordered = options.ordered;\n  self._onStop = options.onStop || function () {};\n  self._queue = new Meteor._SynchronousQueue();\n  self._handles = {};\n  self._readyFuture = new Future;\n  self._cache = new LocalCollection._CachingChangeObserver({\n    ordered: options.ordered});\n  // Number of addHandleAndSendInitialAdds tasks scheduled but not yet\n  // running. removeHandle uses this to know if it's time to call the onStop\n  // callback.\n  self._addHandleTasksScheduledButNotPerformed = 0;\n\n  _.each(self.callbackNames(), function (callbackName) {\n    self[callbackName] = function (/* ... */) {\n      self._applyCallback(callbackName, _.toArray(arguments));\n    };\n  });\n};\n\n_.extend(ObserveMultiplexer.prototype, {\n  addHandleAndSendInitialAdds: function (handle) {\n    var self = this;\n\n    // Check this before calling runTask (even though runTask does the same\n    // check) so that we don't leak an ObserveMultiplexer on error by\n    // incrementing _addHandleTasksScheduledButNotPerformed and never\n    // decrementing it.\n    if (!self._queue.safeToRunTask())\n      throw new Error(\"Can't call observeChanges from an observe callback on the same query\");\n    ++self._addHandleTasksScheduledButNotPerformed;\n\n    Package.facts && Package.facts.Facts.incrementServerFact(\n      \"mongo-livedata\", \"observe-handles\", 1);\n\n    self._queue.runTask(function () {\n      self._handles[handle._id] = handle;\n      // Send out whatever adds we have so far (whether or not we the\n      // multiplexer is ready).\n      self._sendAdds(handle);\n      --self._addHandleTasksScheduledButNotPerformed;\n    });\n    // *outside* the task, since otherwise we'd deadlock\n    self._readyFuture.wait();\n  },\n\n  // Remove an observe handle. If it was the last observe handle, call the\n  // onStop callback; you cannot add any more observe handles after this.\n  //\n  // This is not synchronized with polls and handle additions: this means that\n  // you can safely call it from within an observe callback, but it also means\n  // that we have to be careful when we iterate over _handles.\n  removeHandle: function (id) {\n    var self = this;\n\n    // This should not be possible: you can only call removeHandle by having\n    // access to the ObserveHandle, which isn't returned to user code until the\n    // multiplex is ready.\n    if (!self._ready())\n      throw new Error(\"Can't remove handles until the multiplex is ready\");\n\n    delete self._handles[id];\n\n    Package.facts && Package.facts.Facts.incrementServerFact(\n      \"mongo-livedata\", \"observe-handles\", -1);\n\n    if (_.isEmpty(self._handles) &&\n        self._addHandleTasksScheduledButNotPerformed === 0) {\n      self._stop();\n    }\n  },\n  _stop: function (options) {\n    var self = this;\n    options = options || {};\n\n    // It shouldn't be possible for us to stop when all our handles still\n    // haven't been returned from observeChanges!\n    if (! self._ready() && ! options.fromQueryError)\n      throw Error(\"surprising _stop: not ready\");\n\n    // Call stop callback (which kills the underlying process which sends us\n    // callbacks and removes us from the connection's dictionary).\n    self._onStop();\n    Package.facts && Package.facts.Facts.incrementServerFact(\n      \"mongo-livedata\", \"observe-multiplexers\", -1);\n\n    // Cause future addHandleAndSendInitialAdds calls to throw (but the onStop\n    // callback should make our connection forget about us).\n    self._handles = null;\n  },\n\n  // Allows all addHandleAndSendInitialAdds calls to return, once all preceding\n  // adds have been processed. Does not block.\n  ready: function () {\n    var self = this;\n    self._queue.queueTask(function () {\n      if (self._ready())\n        throw Error(\"can't make ObserveMultiplex ready twice!\");\n      self._readyFuture.return();\n    });\n  },\n\n  // If trying to execute the query results in an error, call this. This is\n  // intended for permanent errors, not transient network errors that could be\n  // fixed. It should only be called before ready(), because if you called ready\n  // that meant that you managed to run the query once. It will stop this\n  // ObserveMultiplex and cause addHandleAndSendInitialAdds calls (and thus\n  // observeChanges calls) to throw the error.\n  queryError: function (err) {\n    var self = this;\n    self._queue.runTask(function () {\n      if (self._ready())\n        throw Error(\"can't claim query has an error after it worked!\");\n      self._stop({fromQueryError: true});\n      self._readyFuture.throw(err);\n    });\n  },\n\n  // Calls \"cb\" once the effects of all \"ready\", \"addHandleAndSendInitialAdds\"\n  // and observe callbacks which came before this call have been propagated to\n  // all handles. \"ready\" must have already been called on this multiplexer.\n  onFlush: function (cb) {\n    var self = this;\n    self._queue.queueTask(function () {\n      if (!self._ready())\n        throw Error(\"only call onFlush on a multiplexer that will be ready\");\n      cb();\n    });\n  },\n  callbackNames: function () {\n    var self = this;\n    if (self._ordered)\n      return [\"addedBefore\", \"changed\", \"movedBefore\", \"removed\"];\n    else\n      return [\"added\", \"changed\", \"removed\"];\n  },\n  _ready: function () {\n    return this._readyFuture.isResolved();\n  },\n  _applyCallback: function (callbackName, args) {\n    var self = this;\n    self._queue.queueTask(function () {\n      // If we stopped in the meantime, do nothing.\n      if (!self._handles)\n        return;\n\n      // First, apply the change to the cache.\n      // XXX We could make applyChange callbacks promise not to hang on to any\n      // state from their arguments (assuming that their supplied callbacks\n      // don't) and skip this clone. Currently 'changed' hangs on to state\n      // though.\n      self._cache.applyChange[callbackName].apply(null, EJSON.clone(args));\n\n      // If we haven't finished the initial adds, then we should only be getting\n      // adds.\n      if (!self._ready() &&\n          (callbackName !== 'added' && callbackName !== 'addedBefore')) {\n        throw new Error(\"Got \" + callbackName + \" during initial adds\");\n      }\n\n      // Now multiplex the callbacks out to all observe handles. It's OK if\n      // these calls yield; since we're inside a task, no other use of our queue\n      // can continue until these are done. (But we do have to be careful to not\n      // use a handle that got removed, because removeHandle does not use the\n      // queue; thus, we iterate over an array of keys that we control.)\n      _.each(_.keys(self._handles), function (handleId) {\n        var handle = self._handles && self._handles[handleId];\n        if (!handle)\n          return;\n        var callback = handle['_' + callbackName];\n        // clone arguments so that callbacks can mutate their arguments\n        callback && callback.apply(null, EJSON.clone(args));\n      });\n    });\n  },\n\n  // Sends initial adds to a handle. It should only be called from within a task\n  // (the task that is processing the addHandleAndSendInitialAdds call). It\n  // synchronously invokes the handle's added or addedBefore; there's no need to\n  // flush the queue afterwards to ensure that the callbacks get out.\n  _sendAdds: function (handle) {\n    var self = this;\n    if (self._queue.safeToRunTask())\n      throw Error(\"_sendAdds may only be called from within a task!\");\n    var add = self._ordered ? handle._addedBefore : handle._added;\n    if (!add)\n      return;\n    // note: docs may be an _IdMap or an OrderedDict\n    self._cache.docs.forEach(function (doc, id) {\n      if (!_.has(self._handles, handle._id))\n        throw Error(\"handle got removed before sending initial adds!\");\n      var fields = EJSON.clone(doc);\n      delete fields._id;\n      if (self._ordered)\n        add(id, fields, null); // we're going in order, so add at end\n      else\n        add(id, fields);\n    });\n  }\n});\n\n\nvar nextObserveHandleId = 1;\nObserveHandle = function (multiplexer, callbacks) {\n  var self = this;\n  // The end user is only supposed to call stop().  The other fields are\n  // accessible to the multiplexer, though.\n  self._multiplexer = multiplexer;\n  _.each(multiplexer.callbackNames(), function (name) {\n    if (callbacks[name]) {\n      self['_' + name] = callbacks[name];\n    } else if (name === \"addedBefore\" && callbacks.added) {\n      // Special case: if you specify \"added\" and \"movedBefore\", you get an\n      // ordered observe where for some reason you don't get ordering data on\n      // the adds.  I dunno, we wrote tests for it, there must have been a\n      // reason.\n      self._addedBefore = function (id, fields, before) {\n        callbacks.added(id, fields);\n      };\n    }\n  });\n  self._stopped = false;\n  self._id = nextObserveHandleId++;\n};\nObserveHandle.prototype.stop = function () {\n  var self = this;\n  if (self._stopped)\n    return;\n  self._stopped = true;\n  self._multiplexer.removeHandle(self._id);\n};\n","var Fiber = Npm.require('fibers');\nvar Future = Npm.require('fibers/future');\n\nDocFetcher = function (mongoConnection) {\n  var self = this;\n  self._mongoConnection = mongoConnection;\n  // Map from cache key -> [callback]\n  self._callbacksForCacheKey = {};\n};\n\n_.extend(DocFetcher.prototype, {\n  // Fetches document \"id\" from collectionName, returning it or null if not\n  // found.\n  //\n  // If you make multiple calls to fetch() with the same cacheKey (a string),\n  // DocFetcher may assume that they all return the same document. (It does\n  // not check to see if collectionName/id match.)\n  //\n  // You may assume that callback is never called synchronously (and in fact\n  // OplogObserveDriver does so).\n  fetch: function (collectionName, id, cacheKey, callback) {\n    var self = this;\n\n    check(collectionName, String);\n    // id is some sort of scalar\n    check(cacheKey, String);\n\n    // If there's already an in-progress fetch for this cache key, yield until\n    // it's done and return whatever it returns.\n    if (_.has(self._callbacksForCacheKey, cacheKey)) {\n      self._callbacksForCacheKey[cacheKey].push(callback);\n      return;\n    }\n\n    var callbacks = self._callbacksForCacheKey[cacheKey] = [callback];\n\n    Fiber(function () {\n      try {\n        var doc = self._mongoConnection.findOne(\n          collectionName, {_id: id}) || null;\n        // Return doc to all relevant callbacks. Note that this array can\n        // continue to grow during callback excecution.\n        while (!_.isEmpty(callbacks)) {\n          // Clone the document so that the various calls to fetch don't return\n          // objects that are intertwingled with each other. Clone before\n          // popping the future, so that if clone throws, the error gets passed\n          // to the next callback.\n          var clonedDoc = EJSON.clone(doc);\n          callbacks.pop()(null, clonedDoc);\n        }\n      } catch (e) {\n        while (!_.isEmpty(callbacks)) {\n          callbacks.pop()(e);\n        }\n      } finally {\n        // XXX consider keeping the doc around for a period of time before\n        // removing from the cache\n        delete self._callbacksForCacheKey[cacheKey];\n      }\n    }).run();\n  }\n});\n\nMongoTest.DocFetcher = DocFetcher;\n","PollingObserveDriver = function (options) {\n  var self = this;\n\n  self._cursorDescription = options.cursorDescription;\n  self._mongoHandle = options.mongoHandle;\n  self._ordered = options.ordered;\n  self._multiplexer = options.multiplexer;\n  self._stopCallbacks = [];\n  self._stopped = false;\n\n  self._synchronousCursor = self._mongoHandle._createSynchronousCursor(\n    self._cursorDescription);\n\n  // previous results snapshot.  on each poll cycle, diffs against\n  // results drives the callbacks.\n  self._results = null;\n\n  // The number of _pollMongo calls that have been added to self._taskQueue but\n  // have not started running. Used to make sure we never schedule more than one\n  // _pollMongo (other than possibly the one that is currently running). It's\n  // also used by _suspendPolling to pretend there's a poll scheduled. Usually,\n  // it's either 0 (for \"no polls scheduled other than maybe one currently\n  // running\") or 1 (for \"a poll scheduled that isn't running yet\"), but it can\n  // also be 2 if incremented by _suspendPolling.\n  self._pollsScheduledButNotStarted = 0;\n  self._pendingWrites = []; // people to notify when polling completes\n\n  // Make sure to create a separately throttled function for each\n  // PollingObserveDriver object.\n  self._ensurePollIsScheduled = _.throttle(\n    self._unthrottledEnsurePollIsScheduled,\n    self._cursorDescription.options.pollingThrottleMs || 50 /* ms */);\n\n  // XXX figure out if we still need a queue\n  self._taskQueue = new Meteor._SynchronousQueue();\n\n  var listenersHandle = listenAll(\n    self._cursorDescription, function (notification) {\n      // When someone does a transaction that might affect us, schedule a poll\n      // of the database. If that transaction happens inside of a write fence,\n      // block the fence until we've polled and notified observers.\n      var fence = DDPServer._CurrentWriteFence.get();\n      if (fence)\n        self._pendingWrites.push(fence.beginWrite());\n      // Ensure a poll is scheduled... but if we already know that one is,\n      // don't hit the throttled _ensurePollIsScheduled function (which might\n      // lead to us calling it unnecessarily in <pollingThrottleMs> ms).\n      if (self._pollsScheduledButNotStarted === 0)\n        self._ensurePollIsScheduled();\n    }\n  );\n  self._stopCallbacks.push(function () { listenersHandle.stop(); });\n\n  // every once and a while, poll even if we don't think we're dirty, for\n  // eventual consistency with database writes from outside the Meteor\n  // universe.\n  //\n  // For testing, there's an undocumented callback argument to observeChanges\n  // which disables time-based polling and gets called at the beginning of each\n  // poll.\n  if (options._testOnlyPollCallback) {\n    self._testOnlyPollCallback = options._testOnlyPollCallback;\n  } else {\n    var pollingInterval =\n          self._cursorDescription.options.pollingIntervalMs ||\n          self._cursorDescription.options._pollingInterval || // COMPAT with 1.2\n          10 * 1000;\n    var intervalHandle = Meteor.setInterval(\n      _.bind(self._ensurePollIsScheduled, self), pollingInterval);\n    self._stopCallbacks.push(function () {\n      Meteor.clearInterval(intervalHandle);\n    });\n  }\n\n  // Make sure we actually poll soon!\n  self._unthrottledEnsurePollIsScheduled();\n\n  Package.facts && Package.facts.Facts.incrementServerFact(\n    \"mongo-livedata\", \"observe-drivers-polling\", 1);\n};\n\n_.extend(PollingObserveDriver.prototype, {\n  // This is always called through _.throttle (except once at startup).\n  _unthrottledEnsurePollIsScheduled: function () {\n    var self = this;\n    if (self._pollsScheduledButNotStarted > 0)\n      return;\n    ++self._pollsScheduledButNotStarted;\n    self._taskQueue.queueTask(function () {\n      self._pollMongo();\n    });\n  },\n\n  // test-only interface for controlling polling.\n  //\n  // _suspendPolling blocks until any currently running and scheduled polls are\n  // done, and prevents any further polls from being scheduled. (new\n  // ObserveHandles can be added and receive their initial added callbacks,\n  // though.)\n  //\n  // _resumePolling immediately polls, and allows further polls to occur.\n  _suspendPolling: function() {\n    var self = this;\n    // Pretend that there's another poll scheduled (which will prevent\n    // _ensurePollIsScheduled from queueing any more polls).\n    ++self._pollsScheduledButNotStarted;\n    // Now block until all currently running or scheduled polls are done.\n    self._taskQueue.runTask(function() {});\n\n    // Confirm that there is only one \"poll\" (the fake one we're pretending to\n    // have) scheduled.\n    if (self._pollsScheduledButNotStarted !== 1)\n      throw new Error(\"_pollsScheduledButNotStarted is \" +\n                      self._pollsScheduledButNotStarted);\n  },\n  _resumePolling: function() {\n    var self = this;\n    // We should be in the same state as in the end of _suspendPolling.\n    if (self._pollsScheduledButNotStarted !== 1)\n      throw new Error(\"_pollsScheduledButNotStarted is \" +\n                      self._pollsScheduledButNotStarted);\n    // Run a poll synchronously (which will counteract the\n    // ++_pollsScheduledButNotStarted from _suspendPolling).\n    self._taskQueue.runTask(function () {\n      self._pollMongo();\n    });\n  },\n\n  _pollMongo: function () {\n    var self = this;\n    --self._pollsScheduledButNotStarted;\n\n    if (self._stopped)\n      return;\n\n    var first = false;\n    var newResults;\n    var oldResults = self._results;\n    if (!oldResults) {\n      first = true;\n      // XXX maybe use OrderedDict instead?\n      oldResults = self._ordered ? [] : new LocalCollection._IdMap;\n    }\n\n    self._testOnlyPollCallback && self._testOnlyPollCallback();\n\n    // Save the list of pending writes which this round will commit.\n    var writesForCycle = self._pendingWrites;\n    self._pendingWrites = [];\n\n    // Get the new query results. (This yields.)\n    try {\n      newResults = self._synchronousCursor.getRawObjects(self._ordered);\n    } catch (e) {\n      if (first && typeof(e.code) === 'number') {\n        // This is an error document sent to us by mongod, not a connection\n        // error generated by the client. And we've never seen this query work\n        // successfully. Probably it's a bad selector or something, so we should\n        // NOT retry. Instead, we should halt the observe (which ends up calling\n        // `stop` on us).\n        self._multiplexer.queryError(\n          new Error(\n            \"Exception while polling query \" +\n              JSON.stringify(self._cursorDescription) + \": \" + e.message));\n        return;\n      }\n\n      // getRawObjects can throw if we're having trouble talking to the\n      // database.  That's fine --- we will repoll later anyway. But we should\n      // make sure not to lose track of this cycle's writes.\n      // (It also can throw if there's just something invalid about this query;\n      // unfortunately the ObserveDriver API doesn't provide a good way to\n      // \"cancel\" the observe from the inside in this case.\n      Array.prototype.push.apply(self._pendingWrites, writesForCycle);\n      Meteor._debug(\"Exception while polling query \" +\n                    JSON.stringify(self._cursorDescription) + \": \" + e.stack);\n      return;\n    }\n\n    // Run diffs.\n    if (!self._stopped) {\n      LocalCollection._diffQueryChanges(\n        self._ordered, oldResults, newResults, self._multiplexer);\n    }\n\n    // Signals the multiplexer to allow all observeChanges calls that share this\n    // multiplexer to return. (This happens asynchronously, via the\n    // multiplexer's queue.)\n    if (first)\n      self._multiplexer.ready();\n\n    // Replace self._results atomically.  (This assignment is what makes `first`\n    // stay through on the next cycle, so we've waited until after we've\n    // committed to ready-ing the multiplexer.)\n    self._results = newResults;\n\n    // Once the ObserveMultiplexer has processed everything we've done in this\n    // round, mark all the writes which existed before this call as\n    // commmitted. (If new writes have shown up in the meantime, there'll\n    // already be another _pollMongo task scheduled.)\n    self._multiplexer.onFlush(function () {\n      _.each(writesForCycle, function (w) {\n        w.committed();\n      });\n    });\n  },\n\n  stop: function () {\n    var self = this;\n    self._stopped = true;\n    _.each(self._stopCallbacks, function (c) { c(); });\n    // Release any write fences that are waiting on us.\n    _.each(self._pendingWrites, function (w) {\n      w.committed();\n    });\n    Package.facts && Package.facts.Facts.incrementServerFact(\n      \"mongo-livedata\", \"observe-drivers-polling\", -1);\n  }\n});\n","var Future = Npm.require('fibers/future');\n\nvar PHASE = {\n  QUERYING: \"QUERYING\",\n  FETCHING: \"FETCHING\",\n  STEADY: \"STEADY\"\n};\n\n// Exception thrown by _needToPollQuery which unrolls the stack up to the\n// enclosing call to finishIfNeedToPollQuery.\nvar SwitchedToQuery = function () {};\nvar finishIfNeedToPollQuery = function (f) {\n  return function () {\n    try {\n      f.apply(this, arguments);\n    } catch (e) {\n      if (!(e instanceof SwitchedToQuery))\n        throw e;\n    }\n  };\n};\n\nvar currentId = 0;\n\n// OplogObserveDriver is an alternative to PollingObserveDriver which follows\n// the Mongo operation log instead of just re-polling the query. It obeys the\n// same simple interface: constructing it starts sending observeChanges\n// callbacks (and a ready() invocation) to the ObserveMultiplexer, and you stop\n// it by calling the stop() method.\nOplogObserveDriver = function (options) {\n  var self = this;\n  self._usesOplog = true;  // tests look at this\n\n  self._id = currentId;\n  currentId++;\n\n  self._cursorDescription = options.cursorDescription;\n  self._mongoHandle = options.mongoHandle;\n  self._multiplexer = options.multiplexer;\n\n  if (options.ordered) {\n    throw Error(\"OplogObserveDriver only supports unordered observeChanges\");\n  }\n\n  var sorter = options.sorter;\n  // We don't support $near and other geo-queries so it's OK to initialize the\n  // comparator only once in the constructor.\n  var comparator = sorter && sorter.getComparator();\n\n  if (options.cursorDescription.options.limit) {\n    // There are several properties ordered driver implements:\n    // - _limit is a positive number\n    // - _comparator is a function-comparator by which the query is ordered\n    // - _unpublishedBuffer is non-null Min/Max Heap,\n    //                      the empty buffer in STEADY phase implies that the\n    //                      everything that matches the queries selector fits\n    //                      into published set.\n    // - _published - Min Heap (also implements IdMap methods)\n\n    var heapOptions = { IdMap: LocalCollection._IdMap };\n    self._limit = self._cursorDescription.options.limit;\n    self._comparator = comparator;\n    self._sorter = sorter;\n    self._unpublishedBuffer = new MinMaxHeap(comparator, heapOptions);\n    // We need something that can find Max value in addition to IdMap interface\n    self._published = new MaxHeap(comparator, heapOptions);\n  } else {\n    self._limit = 0;\n    self._comparator = null;\n    self._sorter = null;\n    self._unpublishedBuffer = null;\n    self._published = new LocalCollection._IdMap;\n  }\n\n  // Indicates if it is safe to insert a new document at the end of the buffer\n  // for this query. i.e. it is known that there are no documents matching the\n  // selector those are not in published or buffer.\n  self._safeAppendToBuffer = false;\n\n  self._stopped = false;\n  self._stopHandles = [];\n\n  Package.facts && Package.facts.Facts.incrementServerFact(\n    \"mongo-livedata\", \"observe-drivers-oplog\", 1);\n\n  self._registerPhaseChange(PHASE.QUERYING);\n\n  self._matcher = options.matcher;\n  var projection = self._cursorDescription.options.fields || {};\n  self._projectionFn = LocalCollection._compileProjection(projection);\n  // Projection function, result of combining important fields for selector and\n  // existing fields projection\n  self._sharedProjection = self._matcher.combineIntoProjection(projection);\n  if (sorter)\n    self._sharedProjection = sorter.combineIntoProjection(self._sharedProjection);\n  self._sharedProjectionFn = LocalCollection._compileProjection(\n    self._sharedProjection);\n\n  self._needToFetch = new LocalCollection._IdMap;\n  self._currentlyFetching = null;\n  self._fetchGeneration = 0;\n\n  self._requeryWhenDoneThisQuery = false;\n  self._writesToCommitWhenWeReachSteady = [];\n\n  // If the oplog handle tells us that it skipped some entries (because it got\n  // behind, say), re-poll.\n  self._stopHandles.push(self._mongoHandle._oplogHandle.onSkippedEntries(\n    finishIfNeedToPollQuery(function () {\n      self._needToPollQuery();\n    })\n  ));\n\n  forEachTrigger(self._cursorDescription, function (trigger) {\n    self._stopHandles.push(self._mongoHandle._oplogHandle.onOplogEntry(\n      trigger, function (notification) {\n        Meteor._noYieldsAllowed(finishIfNeedToPollQuery(function () {\n          var op = notification.op;\n          if (notification.dropCollection || notification.dropDatabase) {\n            // Note: this call is not allowed to block on anything (especially\n            // on waiting for oplog entries to catch up) because that will block\n            // onOplogEntry!\n            self._needToPollQuery();\n          } else {\n            // All other operators should be handled depending on phase\n            if (self._phase === PHASE.QUERYING) {\n              self._handleOplogEntryQuerying(op);\n            } else {\n              self._handleOplogEntrySteadyOrFetching(op);\n            }\n          }\n        }));\n      }\n    ));\n  });\n\n  // XXX ordering w.r.t. everything else?\n  self._stopHandles.push(listenAll(\n    self._cursorDescription, function (notification) {\n      // If we're not in a pre-fire write fence, we don't have to do anything.\n      var fence = DDPServer._CurrentWriteFence.get();\n      if (!fence || fence.fired)\n        return;\n\n      if (fence._oplogObserveDrivers) {\n        fence._oplogObserveDrivers[self._id] = self;\n        return;\n      }\n\n      fence._oplogObserveDrivers = {};\n      fence._oplogObserveDrivers[self._id] = self;\n\n      fence.onBeforeFire(function () {\n        var drivers = fence._oplogObserveDrivers;\n        delete fence._oplogObserveDrivers;\n\n        // This fence cannot fire until we've caught up to \"this point\" in the\n        // oplog, and all observers made it back to the steady state.\n        self._mongoHandle._oplogHandle.waitUntilCaughtUp();\n\n        _.each(drivers, function (driver) {\n          if (driver._stopped)\n            return;\n\n          var write = fence.beginWrite();\n          if (driver._phase === PHASE.STEADY) {\n            // Make sure that all of the callbacks have made it through the\n            // multiplexer and been delivered to ObserveHandles before committing\n            // writes.\n            driver._multiplexer.onFlush(function () {\n              write.committed();\n            });\n          } else {\n            driver._writesToCommitWhenWeReachSteady.push(write);\n          }\n        });\n      });\n    }\n  ));\n\n  // When Mongo fails over, we need to repoll the query, in case we processed an\n  // oplog entry that got rolled back.\n  self._stopHandles.push(self._mongoHandle._onFailover(finishIfNeedToPollQuery(\n    function () {\n      self._needToPollQuery();\n    })));\n\n  // Give _observeChanges a chance to add the new ObserveHandle to our\n  // multiplexer, so that the added calls get streamed.\n  Meteor.defer(finishIfNeedToPollQuery(function () {\n    self._runInitialQuery();\n  }));\n};\n\n_.extend(OplogObserveDriver.prototype, {\n  _addPublished: function (id, doc) {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      var fields = _.clone(doc);\n      delete fields._id;\n      self._published.set(id, self._sharedProjectionFn(doc));\n      self._multiplexer.added(id, self._projectionFn(fields));\n\n      // After adding this document, the published set might be overflowed\n      // (exceeding capacity specified by limit). If so, push the maximum\n      // element to the buffer, we might want to save it in memory to reduce the\n      // amount of Mongo lookups in the future.\n      if (self._limit && self._published.size() > self._limit) {\n        // XXX in theory the size of published is no more than limit+1\n        if (self._published.size() !== self._limit + 1) {\n          throw new Error(\"After adding to published, \" +\n                          (self._published.size() - self._limit) +\n                          \" documents are overflowing the set\");\n        }\n\n        var overflowingDocId = self._published.maxElementId();\n        var overflowingDoc = self._published.get(overflowingDocId);\n\n        if (EJSON.equals(overflowingDocId, id)) {\n          throw new Error(\"The document just added is overflowing the published set\");\n        }\n\n        self._published.remove(overflowingDocId);\n        self._multiplexer.removed(overflowingDocId);\n        self._addBuffered(overflowingDocId, overflowingDoc);\n      }\n    });\n  },\n  _removePublished: function (id) {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      self._published.remove(id);\n      self._multiplexer.removed(id);\n      if (! self._limit || self._published.size() === self._limit)\n        return;\n\n      if (self._published.size() > self._limit)\n        throw Error(\"self._published got too big\");\n\n      // OK, we are publishing less than the limit. Maybe we should look in the\n      // buffer to find the next element past what we were publishing before.\n\n      if (!self._unpublishedBuffer.empty()) {\n        // There's something in the buffer; move the first thing in it to\n        // _published.\n        var newDocId = self._unpublishedBuffer.minElementId();\n        var newDoc = self._unpublishedBuffer.get(newDocId);\n        self._removeBuffered(newDocId);\n        self._addPublished(newDocId, newDoc);\n        return;\n      }\n\n      // There's nothing in the buffer.  This could mean one of a few things.\n\n      // (a) We could be in the middle of re-running the query (specifically, we\n      // could be in _publishNewResults). In that case, _unpublishedBuffer is\n      // empty because we clear it at the beginning of _publishNewResults. In\n      // this case, our caller already knows the entire answer to the query and\n      // we don't need to do anything fancy here.  Just return.\n      if (self._phase === PHASE.QUERYING)\n        return;\n\n      // (b) We're pretty confident that the union of _published and\n      // _unpublishedBuffer contain all documents that match selector. Because\n      // _unpublishedBuffer is empty, that means we're confident that _published\n      // contains all documents that match selector. So we have nothing to do.\n      if (self._safeAppendToBuffer)\n        return;\n\n      // (c) Maybe there are other documents out there that should be in our\n      // buffer. But in that case, when we emptied _unpublishedBuffer in\n      // _removeBuffered, we should have called _needToPollQuery, which will\n      // either put something in _unpublishedBuffer or set _safeAppendToBuffer\n      // (or both), and it will put us in QUERYING for that whole time. So in\n      // fact, we shouldn't be able to get here.\n\n      throw new Error(\"Buffer inexplicably empty\");\n    });\n  },\n  _changePublished: function (id, oldDoc, newDoc) {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      self._published.set(id, self._sharedProjectionFn(newDoc));\n      var projectedNew = self._projectionFn(newDoc);\n      var projectedOld = self._projectionFn(oldDoc);\n      var changed = DiffSequence.makeChangedFields(\n        projectedNew, projectedOld);\n      if (!_.isEmpty(changed))\n        self._multiplexer.changed(id, changed);\n    });\n  },\n  _addBuffered: function (id, doc) {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      self._unpublishedBuffer.set(id, self._sharedProjectionFn(doc));\n\n      // If something is overflowing the buffer, we just remove it from cache\n      if (self._unpublishedBuffer.size() > self._limit) {\n        var maxBufferedId = self._unpublishedBuffer.maxElementId();\n\n        self._unpublishedBuffer.remove(maxBufferedId);\n\n        // Since something matching is removed from cache (both published set and\n        // buffer), set flag to false\n        self._safeAppendToBuffer = false;\n      }\n    });\n  },\n  // Is called either to remove the doc completely from matching set or to move\n  // it to the published set later.\n  _removeBuffered: function (id) {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      self._unpublishedBuffer.remove(id);\n      // To keep the contract \"buffer is never empty in STEADY phase unless the\n      // everything matching fits into published\" true, we poll everything as\n      // soon as we see the buffer becoming empty.\n      if (! self._unpublishedBuffer.size() && ! self._safeAppendToBuffer)\n        self._needToPollQuery();\n    });\n  },\n  // Called when a document has joined the \"Matching\" results set.\n  // Takes responsibility of keeping _unpublishedBuffer in sync with _published\n  // and the effect of limit enforced.\n  _addMatching: function (doc) {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      var id = doc._id;\n      if (self._published.has(id))\n        throw Error(\"tried to add something already published \" + id);\n      if (self._limit && self._unpublishedBuffer.has(id))\n        throw Error(\"tried to add something already existed in buffer \" + id);\n\n      var limit = self._limit;\n      var comparator = self._comparator;\n      var maxPublished = (limit && self._published.size() > 0) ?\n        self._published.get(self._published.maxElementId()) : null;\n      var maxBuffered = (limit && self._unpublishedBuffer.size() > 0)\n        ? self._unpublishedBuffer.get(self._unpublishedBuffer.maxElementId())\n        : null;\n      // The query is unlimited or didn't publish enough documents yet or the\n      // new document would fit into published set pushing the maximum element\n      // out, then we need to publish the doc.\n      var toPublish = ! limit || self._published.size() < limit ||\n        comparator(doc, maxPublished) < 0;\n\n      // Otherwise we might need to buffer it (only in case of limited query).\n      // Buffering is allowed if the buffer is not filled up yet and all\n      // matching docs are either in the published set or in the buffer.\n      var canAppendToBuffer = !toPublish && self._safeAppendToBuffer &&\n        self._unpublishedBuffer.size() < limit;\n\n      // Or if it is small enough to be safely inserted to the middle or the\n      // beginning of the buffer.\n      var canInsertIntoBuffer = !toPublish && maxBuffered &&\n        comparator(doc, maxBuffered) <= 0;\n\n      var toBuffer = canAppendToBuffer || canInsertIntoBuffer;\n\n      if (toPublish) {\n        self._addPublished(id, doc);\n      } else if (toBuffer) {\n        self._addBuffered(id, doc);\n      } else {\n        // dropping it and not saving to the cache\n        self._safeAppendToBuffer = false;\n      }\n    });\n  },\n  // Called when a document leaves the \"Matching\" results set.\n  // Takes responsibility of keeping _unpublishedBuffer in sync with _published\n  // and the effect of limit enforced.\n  _removeMatching: function (id) {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      if (! self._published.has(id) && ! self._limit)\n        throw Error(\"tried to remove something matching but not cached \" + id);\n\n      if (self._published.has(id)) {\n        self._removePublished(id);\n      } else if (self._unpublishedBuffer.has(id)) {\n        self._removeBuffered(id);\n      }\n    });\n  },\n  _handleDoc: function (id, newDoc) {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      var matchesNow = newDoc && self._matcher.documentMatches(newDoc).result;\n\n      var publishedBefore = self._published.has(id);\n      var bufferedBefore = self._limit && self._unpublishedBuffer.has(id);\n      var cachedBefore = publishedBefore || bufferedBefore;\n\n      if (matchesNow && !cachedBefore) {\n        self._addMatching(newDoc);\n      } else if (cachedBefore && !matchesNow) {\n        self._removeMatching(id);\n      } else if (cachedBefore && matchesNow) {\n        var oldDoc = self._published.get(id);\n        var comparator = self._comparator;\n        var minBuffered = self._limit && self._unpublishedBuffer.size() &&\n          self._unpublishedBuffer.get(self._unpublishedBuffer.minElementId());\n        var maxBuffered;\n\n        if (publishedBefore) {\n          // Unlimited case where the document stays in published once it\n          // matches or the case when we don't have enough matching docs to\n          // publish or the changed but matching doc will stay in published\n          // anyways.\n          //\n          // XXX: We rely on the emptiness of buffer. Be sure to maintain the\n          // fact that buffer can't be empty if there are matching documents not\n          // published. Notably, we don't want to schedule repoll and continue\n          // relying on this property.\n          var staysInPublished = ! self._limit ||\n            self._unpublishedBuffer.size() === 0 ||\n            comparator(newDoc, minBuffered) <= 0;\n\n          if (staysInPublished) {\n            self._changePublished(id, oldDoc, newDoc);\n          } else {\n            // after the change doc doesn't stay in the published, remove it\n            self._removePublished(id);\n            // but it can move into buffered now, check it\n            maxBuffered = self._unpublishedBuffer.get(\n              self._unpublishedBuffer.maxElementId());\n\n            var toBuffer = self._safeAppendToBuffer ||\n                  (maxBuffered && comparator(newDoc, maxBuffered) <= 0);\n\n            if (toBuffer) {\n              self._addBuffered(id, newDoc);\n            } else {\n              // Throw away from both published set and buffer\n              self._safeAppendToBuffer = false;\n            }\n          }\n        } else if (bufferedBefore) {\n          oldDoc = self._unpublishedBuffer.get(id);\n          // remove the old version manually instead of using _removeBuffered so\n          // we don't trigger the querying immediately.  if we end this block\n          // with the buffer empty, we will need to trigger the query poll\n          // manually too.\n          self._unpublishedBuffer.remove(id);\n\n          var maxPublished = self._published.get(\n            self._published.maxElementId());\n          maxBuffered = self._unpublishedBuffer.size() &&\n                self._unpublishedBuffer.get(\n                  self._unpublishedBuffer.maxElementId());\n\n          // the buffered doc was updated, it could move to published\n          var toPublish = comparator(newDoc, maxPublished) < 0;\n\n          // or stays in buffer even after the change\n          var staysInBuffer = (! toPublish && self._safeAppendToBuffer) ||\n                (!toPublish && maxBuffered &&\n                 comparator(newDoc, maxBuffered) <= 0);\n\n          if (toPublish) {\n            self._addPublished(id, newDoc);\n          } else if (staysInBuffer) {\n            // stays in buffer but changes\n            self._unpublishedBuffer.set(id, newDoc);\n          } else {\n            // Throw away from both published set and buffer\n            self._safeAppendToBuffer = false;\n            // Normally this check would have been done in _removeBuffered but\n            // we didn't use it, so we need to do it ourself now.\n            if (! self._unpublishedBuffer.size()) {\n              self._needToPollQuery();\n            }\n          }\n        } else {\n          throw new Error(\"cachedBefore implies either of publishedBefore or bufferedBefore is true.\");\n        }\n      }\n    });\n  },\n  _fetchModifiedDocuments: function () {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      self._registerPhaseChange(PHASE.FETCHING);\n      // Defer, because nothing called from the oplog entry handler may yield,\n      // but fetch() yields.\n      Meteor.defer(finishIfNeedToPollQuery(function () {\n        while (!self._stopped && !self._needToFetch.empty()) {\n          if (self._phase === PHASE.QUERYING) {\n            // While fetching, we decided to go into QUERYING mode, and then we\n            // saw another oplog entry, so _needToFetch is not empty. But we\n            // shouldn't fetch these documents until AFTER the query is done.\n            break;\n          }\n\n          // Being in steady phase here would be surprising.\n          if (self._phase !== PHASE.FETCHING)\n            throw new Error(\"phase in fetchModifiedDocuments: \" + self._phase);\n\n          self._currentlyFetching = self._needToFetch;\n          var thisGeneration = ++self._fetchGeneration;\n          self._needToFetch = new LocalCollection._IdMap;\n          var waiting = 0;\n          var fut = new Future;\n          // This loop is safe, because _currentlyFetching will not be updated\n          // during this loop (in fact, it is never mutated).\n          self._currentlyFetching.forEach(function (cacheKey, id) {\n            waiting++;\n            self._mongoHandle._docFetcher.fetch(\n              self._cursorDescription.collectionName, id, cacheKey,\n              finishIfNeedToPollQuery(function (err, doc) {\n                try {\n                  if (err) {\n                    Meteor._debug(\"Got exception while fetching documents: \" +\n                                  err);\n                    // If we get an error from the fetcher (eg, trouble\n                    // connecting to Mongo), let's just abandon the fetch phase\n                    // altogether and fall back to polling. It's not like we're\n                    // getting live updates anyway.\n                    if (self._phase !== PHASE.QUERYING) {\n                      self._needToPollQuery();\n                    }\n                  } else if (!self._stopped && self._phase === PHASE.FETCHING\n                             && self._fetchGeneration === thisGeneration) {\n                    // We re-check the generation in case we've had an explicit\n                    // _pollQuery call (eg, in another fiber) which should\n                    // effectively cancel this round of fetches.  (_pollQuery\n                    // increments the generation.)\n                    self._handleDoc(id, doc);\n                  }\n                } finally {\n                  waiting--;\n                  // Because fetch() never calls its callback synchronously,\n                  // this is safe (ie, we won't call fut.return() before the\n                  // forEach is done).\n                  if (waiting === 0)\n                    fut.return();\n                }\n              }));\n          });\n          fut.wait();\n          // Exit now if we've had a _pollQuery call (here or in another fiber).\n          if (self._phase === PHASE.QUERYING)\n            return;\n          self._currentlyFetching = null;\n        }\n        // We're done fetching, so we can be steady, unless we've had a\n        // _pollQuery call (here or in another fiber).\n        if (self._phase !== PHASE.QUERYING)\n          self._beSteady();\n      }));\n    });\n  },\n  _beSteady: function () {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      self._registerPhaseChange(PHASE.STEADY);\n      var writes = self._writesToCommitWhenWeReachSteady;\n      self._writesToCommitWhenWeReachSteady = [];\n      self._multiplexer.onFlush(function () {\n        _.each(writes, function (w) {\n          w.committed();\n        });\n      });\n    });\n  },\n  _handleOplogEntryQuerying: function (op) {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      self._needToFetch.set(idForOp(op), op.ts.toString());\n    });\n  },\n  _handleOplogEntrySteadyOrFetching: function (op) {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      var id = idForOp(op);\n      // If we're already fetching this one, or about to, we can't optimize;\n      // make sure that we fetch it again if necessary.\n      if (self._phase === PHASE.FETCHING &&\n          ((self._currentlyFetching && self._currentlyFetching.has(id)) ||\n           self._needToFetch.has(id))) {\n        self._needToFetch.set(id, op.ts.toString());\n        return;\n      }\n\n      if (op.op === 'd') {\n        if (self._published.has(id) ||\n            (self._limit && self._unpublishedBuffer.has(id)))\n          self._removeMatching(id);\n      } else if (op.op === 'i') {\n        if (self._published.has(id))\n          throw new Error(\"insert found for already-existing ID in published\");\n        if (self._unpublishedBuffer && self._unpublishedBuffer.has(id))\n          throw new Error(\"insert found for already-existing ID in buffer\");\n\n        // XXX what if selector yields?  for now it can't but later it could\n        // have $where\n        if (self._matcher.documentMatches(op.o).result)\n          self._addMatching(op.o);\n      } else if (op.op === 'u') {\n        // Is this a modifier ($set/$unset, which may require us to poll the\n        // database to figure out if the whole document matches the selector) or\n        // a replacement (in which case we can just directly re-evaluate the\n        // selector)?\n        var isReplace = !_.has(op.o, '$set') && !_.has(op.o, '$unset');\n        // If this modifier modifies something inside an EJSON custom type (ie,\n        // anything with EJSON$), then we can't try to use\n        // LocalCollection._modify, since that just mutates the EJSON encoding,\n        // not the actual object.\n        var canDirectlyModifyDoc =\n          !isReplace && modifierCanBeDirectlyApplied(op.o);\n\n        var publishedBefore = self._published.has(id);\n        var bufferedBefore = self._limit && self._unpublishedBuffer.has(id);\n\n        if (isReplace) {\n          self._handleDoc(id, _.extend({_id: id}, op.o));\n        } else if ((publishedBefore || bufferedBefore) &&\n                   canDirectlyModifyDoc) {\n          // Oh great, we actually know what the document is, so we can apply\n          // this directly.\n          var newDoc = self._published.has(id)\n            ? self._published.get(id) : self._unpublishedBuffer.get(id);\n          newDoc = EJSON.clone(newDoc);\n\n          newDoc._id = id;\n          try {\n            LocalCollection._modify(newDoc, op.o);\n          } catch (e) {\n            if (e.name !== \"MinimongoError\")\n              throw e;\n            // We didn't understand the modifier.  Re-fetch.\n            self._needToFetch.set(id, op.ts.toString());\n            if (self._phase === PHASE.STEADY) {\n              self._fetchModifiedDocuments();\n            }\n            return;\n          }\n          self._handleDoc(id, self._sharedProjectionFn(newDoc));\n        } else if (!canDirectlyModifyDoc ||\n                   self._matcher.canBecomeTrueByModifier(op.o) ||\n                   (self._sorter && self._sorter.affectedByModifier(op.o))) {\n          self._needToFetch.set(id, op.ts.toString());\n          if (self._phase === PHASE.STEADY)\n            self._fetchModifiedDocuments();\n        }\n      } else {\n        throw Error(\"XXX SURPRISING OPERATION: \" + op);\n      }\n    });\n  },\n  // Yields!\n  _runInitialQuery: function () {\n    var self = this;\n    if (self._stopped)\n      throw new Error(\"oplog stopped surprisingly early\");\n\n    self._runQuery({initial: true});  // yields\n\n    if (self._stopped)\n      return;  // can happen on queryError\n\n    // Allow observeChanges calls to return. (After this, it's possible for\n    // stop() to be called.)\n    self._multiplexer.ready();\n\n    self._doneQuerying();  // yields\n  },\n\n  // In various circumstances, we may just want to stop processing the oplog and\n  // re-run the initial query, just as if we were a PollingObserveDriver.\n  //\n  // This function may not block, because it is called from an oplog entry\n  // handler.\n  //\n  // XXX We should call this when we detect that we've been in FETCHING for \"too\n  // long\".\n  //\n  // XXX We should call this when we detect Mongo failover (since that might\n  // mean that some of the oplog entries we have processed have been rolled\n  // back). The Node Mongo driver is in the middle of a bunch of huge\n  // refactorings, including the way that it notifies you when primary\n  // changes. Will put off implementing this until driver 1.4 is out.\n  _pollQuery: function () {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      if (self._stopped)\n        return;\n\n      // Yay, we get to forget about all the things we thought we had to fetch.\n      self._needToFetch = new LocalCollection._IdMap;\n      self._currentlyFetching = null;\n      ++self._fetchGeneration;  // ignore any in-flight fetches\n      self._registerPhaseChange(PHASE.QUERYING);\n\n      // Defer so that we don't yield.  We don't need finishIfNeedToPollQuery\n      // here because SwitchedToQuery is not thrown in QUERYING mode.\n      Meteor.defer(function () {\n        self._runQuery();\n        self._doneQuerying();\n      });\n    });\n  },\n\n  // Yields!\n  _runQuery: function (options) {\n    var self = this;\n    options = options || {};\n    var newResults, newBuffer;\n\n    // This while loop is just to retry failures.\n    while (true) {\n      // If we've been stopped, we don't have to run anything any more.\n      if (self._stopped)\n        return;\n\n      newResults = new LocalCollection._IdMap;\n      newBuffer = new LocalCollection._IdMap;\n\n      // Query 2x documents as the half excluded from the original query will go\n      // into unpublished buffer to reduce additional Mongo lookups in cases\n      // when documents are removed from the published set and need a\n      // replacement.\n      // XXX needs more thought on non-zero skip\n      // XXX 2 is a \"magic number\" meaning there is an extra chunk of docs for\n      // buffer if such is needed.\n      var cursor = self._cursorForQuery({ limit: self._limit * 2 });\n      try {\n        cursor.forEach(function (doc, i) {  // yields\n          if (!self._limit || i < self._limit) {\n            newResults.set(doc._id, doc);\n          } else {\n            newBuffer.set(doc._id, doc);\n          }\n        });\n        break;\n      } catch (e) {\n        if (options.initial && typeof(e.code) === 'number') {\n          // This is an error document sent to us by mongod, not a connection\n          // error generated by the client. And we've never seen this query work\n          // successfully. Probably it's a bad selector or something, so we\n          // should NOT retry. Instead, we should halt the observe (which ends\n          // up calling `stop` on us).\n          self._multiplexer.queryError(e);\n          return;\n        }\n\n        // During failover (eg) if we get an exception we should log and retry\n        // instead of crashing.\n        Meteor._debug(\"Got exception while polling query: \" + e);\n        Meteor._sleepForMs(100);\n      }\n    }\n\n    if (self._stopped)\n      return;\n\n    self._publishNewResults(newResults, newBuffer);\n  },\n\n  // Transitions to QUERYING and runs another query, or (if already in QUERYING)\n  // ensures that we will query again later.\n  //\n  // This function may not block, because it is called from an oplog entry\n  // handler. However, if we were not already in the QUERYING phase, it throws\n  // an exception that is caught by the closest surrounding\n  // finishIfNeedToPollQuery call; this ensures that we don't continue running\n  // close that was designed for another phase inside PHASE.QUERYING.\n  //\n  // (It's also necessary whenever logic in this file yields to check that other\n  // phases haven't put us into QUERYING mode, though; eg,\n  // _fetchModifiedDocuments does this.)\n  _needToPollQuery: function () {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      if (self._stopped)\n        return;\n\n      // If we're not already in the middle of a query, we can query now\n      // (possibly pausing FETCHING).\n      if (self._phase !== PHASE.QUERYING) {\n        self._pollQuery();\n        throw new SwitchedToQuery;\n      }\n\n      // We're currently in QUERYING. Set a flag to ensure that we run another\n      // query when we're done.\n      self._requeryWhenDoneThisQuery = true;\n    });\n  },\n\n  // Yields!\n  _doneQuerying: function () {\n    var self = this;\n\n    if (self._stopped)\n      return;\n    self._mongoHandle._oplogHandle.waitUntilCaughtUp();  // yields\n    if (self._stopped)\n      return;\n    if (self._phase !== PHASE.QUERYING)\n      throw Error(\"Phase unexpectedly \" + self._phase);\n\n    Meteor._noYieldsAllowed(function () {\n      if (self._requeryWhenDoneThisQuery) {\n        self._requeryWhenDoneThisQuery = false;\n        self._pollQuery();\n      } else if (self._needToFetch.empty()) {\n        self._beSteady();\n      } else {\n        self._fetchModifiedDocuments();\n      }\n    });\n  },\n\n  _cursorForQuery: function (optionsOverwrite) {\n    var self = this;\n    return Meteor._noYieldsAllowed(function () {\n      // The query we run is almost the same as the cursor we are observing,\n      // with a few changes. We need to read all the fields that are relevant to\n      // the selector, not just the fields we are going to publish (that's the\n      // \"shared\" projection). And we don't want to apply any transform in the\n      // cursor, because observeChanges shouldn't use the transform.\n      var options = _.clone(self._cursorDescription.options);\n\n      // Allow the caller to modify the options. Useful to specify different\n      // skip and limit values.\n      _.extend(options, optionsOverwrite);\n\n      options.fields = self._sharedProjection;\n      delete options.transform;\n      // We are NOT deep cloning fields or selector here, which should be OK.\n      var description = new CursorDescription(\n        self._cursorDescription.collectionName,\n        self._cursorDescription.selector,\n        options);\n      return new Cursor(self._mongoHandle, description);\n    });\n  },\n\n\n  // Replace self._published with newResults (both are IdMaps), invoking observe\n  // callbacks on the multiplexer.\n  // Replace self._unpublishedBuffer with newBuffer.\n  //\n  // XXX This is very similar to LocalCollection._diffQueryUnorderedChanges. We\n  // should really: (a) Unify IdMap and OrderedDict into Unordered/OrderedDict\n  // (b) Rewrite diff.js to use these classes instead of arrays and objects.\n  _publishNewResults: function (newResults, newBuffer) {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n\n      // If the query is limited and there is a buffer, shut down so it doesn't\n      // stay in a way.\n      if (self._limit) {\n        self._unpublishedBuffer.clear();\n      }\n\n      // First remove anything that's gone. Be careful not to modify\n      // self._published while iterating over it.\n      var idsToRemove = [];\n      self._published.forEach(function (doc, id) {\n        if (!newResults.has(id))\n          idsToRemove.push(id);\n      });\n      _.each(idsToRemove, function (id) {\n        self._removePublished(id);\n      });\n\n      // Now do adds and changes.\n      // If self has a buffer and limit, the new fetched result will be\n      // limited correctly as the query has sort specifier.\n      newResults.forEach(function (doc, id) {\n        self._handleDoc(id, doc);\n      });\n\n      // Sanity-check that everything we tried to put into _published ended up\n      // there.\n      // XXX if this is slow, remove it later\n      if (self._published.size() !== newResults.size()) {\n        throw Error(\n          \"The Mongo server and the Meteor query disagree on how \" +\n            \"many documents match your query. Maybe it is hitting a Mongo \" +\n            \"edge case? The query is: \" +\n            EJSON.stringify(self._cursorDescription.selector));\n      }\n      self._published.forEach(function (doc, id) {\n        if (!newResults.has(id))\n          throw Error(\"_published has a doc that newResults doesn't; \" + id);\n      });\n\n      // Finally, replace the buffer\n      newBuffer.forEach(function (doc, id) {\n        self._addBuffered(id, doc);\n      });\n\n      self._safeAppendToBuffer = newBuffer.size() < self._limit;\n    });\n  },\n\n  // This stop function is invoked from the onStop of the ObserveMultiplexer, so\n  // it shouldn't actually be possible to call it until the multiplexer is\n  // ready.\n  //\n  // It's important to check self._stopped after every call in this file that\n  // can yield!\n  stop: function () {\n    var self = this;\n    if (self._stopped)\n      return;\n    self._stopped = true;\n    _.each(self._stopHandles, function (handle) {\n      handle.stop();\n    });\n\n    // Note: we *don't* use multiplexer.onFlush here because this stop\n    // callback is actually invoked by the multiplexer itself when it has\n    // determined that there are no handles left. So nothing is actually going\n    // to get flushed (and it's probably not valid to call methods on the\n    // dying multiplexer).\n    _.each(self._writesToCommitWhenWeReachSteady, function (w) {\n      w.committed();  // maybe yields?\n    });\n    self._writesToCommitWhenWeReachSteady = null;\n\n    // Proactively drop references to potentially big things.\n    self._published = null;\n    self._unpublishedBuffer = null;\n    self._needToFetch = null;\n    self._currentlyFetching = null;\n    self._oplogEntryHandle = null;\n    self._listenersHandle = null;\n\n    Package.facts && Package.facts.Facts.incrementServerFact(\n      \"mongo-livedata\", \"observe-drivers-oplog\", -1);\n  },\n\n  _registerPhaseChange: function (phase) {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      var now = new Date;\n\n      if (self._phase) {\n        var timeDiff = now - self._phaseStartTime;\n        Package.facts && Package.facts.Facts.incrementServerFact(\n          \"mongo-livedata\", \"time-spent-in-\" + self._phase + \"-phase\", timeDiff);\n      }\n\n      self._phase = phase;\n      self._phaseStartTime = now;\n    });\n  }\n});\n\n// Does our oplog tailing code support this cursor? For now, we are being very\n// conservative and allowing only simple queries with simple options.\n// (This is a \"static method\".)\nOplogObserveDriver.cursorSupported = function (cursorDescription, matcher) {\n  // First, check the options.\n  var options = cursorDescription.options;\n\n  // Did the user say no explicitly?\n  // underscored version of the option is COMPAT with 1.2\n  if (options.disableOplog || options._disableOplog)\n    return false;\n\n  // skip is not supported: to support it we would need to keep track of all\n  // \"skipped\" documents or at least their ids.\n  // limit w/o a sort specifier is not supported: current implementation needs a\n  // deterministic way to order documents.\n  if (options.skip || (options.limit && !options.sort)) return false;\n\n  // If a fields projection option is given check if it is supported by\n  // minimongo (some operators are not supported).\n  if (options.fields) {\n    try {\n      LocalCollection._checkSupportedProjection(options.fields);\n    } catch (e) {\n      if (e.name === \"MinimongoError\") {\n        return false;\n      } else {\n        throw e;\n      }\n    }\n  }\n\n  // We don't allow the following selectors:\n  //   - $where (not confident that we provide the same JS environment\n  //             as Mongo, and can yield!)\n  //   - $near (has \"interesting\" properties in MongoDB, like the possibility\n  //            of returning an ID multiple times, though even polling maybe\n  //            have a bug there)\n  //           XXX: once we support it, we would need to think more on how we\n  //           initialize the comparators when we create the driver.\n  return !matcher.hasWhere() && !matcher.hasGeoQuery();\n};\n\nvar modifierCanBeDirectlyApplied = function (modifier) {\n  return _.all(modifier, function (fields, operation) {\n    return _.all(fields, function (value, field) {\n      return !/EJSON\\$/.test(field);\n    });\n  });\n};\n\nMongoInternals.OplogObserveDriver = OplogObserveDriver;\n","LocalCollectionDriver = function () {\n  var self = this;\n  self.noConnCollections = {};\n};\n\nvar ensureCollection = function (name, collections) {\n  if (!(name in collections))\n    collections[name] = new LocalCollection(name);\n  return collections[name];\n};\n\n_.extend(LocalCollectionDriver.prototype, {\n  open: function (name, conn) {\n    var self = this;\n    if (!name)\n      return new LocalCollection;\n    if (! conn) {\n      return ensureCollection(name, self.noConnCollections);\n    }\n    if (! conn._mongo_livedata_collections)\n      conn._mongo_livedata_collections = {};\n    // XXX is there a way to keep track of a connection's collections without\n    // dangling it off the connection object?\n    return ensureCollection(name, conn._mongo_livedata_collections);\n  }\n});\n\n// singleton\nLocalCollectionDriver = new LocalCollectionDriver;\n","MongoInternals.RemoteCollectionDriver = function (\n  mongo_url, options) {\n  var self = this;\n  self.mongo = new MongoConnection(mongo_url, options);\n};\n\n_.extend(MongoInternals.RemoteCollectionDriver.prototype, {\n  open: function (name) {\n    var self = this;\n    var ret = {};\n    _.each(\n      ['find', 'findOne', 'insert', 'update', 'upsert',\n       'remove', '_ensureIndex', '_dropIndex', '_createCappedCollection',\n       'dropCollection', 'rawCollection'],\n      function (m) {\n        ret[m] = _.bind(self.mongo[m], self.mongo, name);\n      });\n    return ret;\n  }\n});\n\n\n// Create the singleton RemoteCollectionDriver only on demand, so we\n// only require Mongo configuration if it's actually used (eg, not if\n// you're only trying to receive data from a remote DDP server.)\nMongoInternals.defaultRemoteCollectionDriver = _.once(function () {\n  var connectionOptions = {};\n\n  var mongoUrl = process.env.MONGO_URL;\n\n  if (process.env.MONGO_OPLOG_URL) {\n    connectionOptions.oplogUrl = process.env.MONGO_OPLOG_URL;\n  }\n\n  if (! mongoUrl)\n    throw new Error(\"MONGO_URL must be set in environment\");\n\n  return new MongoInternals.RemoteCollectionDriver(mongoUrl, connectionOptions);\n});\n","// options.connection, if given, is a LivedataClient or LivedataServer\n// XXX presently there is no way to destroy/clean up a Collection\n\n/**\n * @summary Namespace for MongoDB-related items\n * @namespace\n */\nMongo = {};\n\n/**\n * @summary Constructor for a Collection\n * @locus Anywhere\n * @instancename collection\n * @class\n * @param {String} name The name of the collection.  If null, creates an unmanaged (unsynchronized) local collection.\n * @param {Object} [options]\n * @param {Object} options.connection The server connection that will manage this collection. Uses the default connection if not specified.  Pass the return value of calling [`DDP.connect`](#ddp_connect) to specify a different server. Pass `null` to specify no connection. Unmanaged (`name` is null) collections cannot specify a connection.\n * @param {String} options.idGeneration The method of generating the `_id` fields of new documents in this collection.  Possible values:\n\n - **`'STRING'`**: random strings\n - **`'MONGO'`**:  random [`Mongo.ObjectID`](#mongo_object_id) values\n\nThe default id generation technique is `'STRING'`.\n * @param {Function} options.transform An optional transformation function. Documents will be passed through this function before being returned from `fetch` or `findOne`, and before being passed to callbacks of `observe`, `map`, `forEach`, `allow`, and `deny`. Transforms are *not* applied for the callbacks of `observeChanges` or to cursors returned from publish functions.\n * @param {Boolean} options.defineMutationMethods Set to `false` to skip setting up the mutation methods that enable insert/update/remove from client code. Default `true`.\n */\nMongo.Collection = function (name, options) {\n  var self = this;\n  if (! (self instanceof Mongo.Collection))\n    throw new Error('use \"new\" to construct a Mongo.Collection');\n\n  if (!name && (name !== null)) {\n    Meteor._debug(\"Warning: creating anonymous collection. It will not be \" +\n                  \"saved or synchronized over the network. (Pass null for \" +\n                  \"the collection name to turn off this warning.)\");\n    name = null;\n  }\n\n  if (name !== null && typeof name !== \"string\") {\n    throw new Error(\n      \"First argument to new Mongo.Collection must be a string or null\");\n  }\n\n  if (options && options.methods) {\n    // Backwards compatibility hack with original signature (which passed\n    // \"connection\" directly instead of in options. (Connections must have a \"methods\"\n    // method.)\n    // XXX remove before 1.0\n    options = {connection: options};\n  }\n  // Backwards compatibility: \"connection\" used to be called \"manager\".\n  if (options && options.manager && !options.connection) {\n    options.connection = options.manager;\n  }\n  options = _.extend({\n    connection: undefined,\n    idGeneration: 'STRING',\n    transform: null,\n    _driver: undefined,\n    _preventAutopublish: false\n  }, options);\n\n  switch (options.idGeneration) {\n  case 'MONGO':\n    self._makeNewID = function () {\n      var src = name ? DDP.randomStream('/collection/' + name) : Random.insecure;\n      return new Mongo.ObjectID(src.hexString(24));\n    };\n    break;\n  case 'STRING':\n  default:\n    self._makeNewID = function () {\n      var src = name ? DDP.randomStream('/collection/' + name) : Random.insecure;\n      return src.id();\n    };\n    break;\n  }\n\n  self._transform = LocalCollection.wrapTransform(options.transform);\n\n  if (! name || options.connection === null)\n    // note: nameless collections never have a connection\n    self._connection = null;\n  else if (options.connection)\n    self._connection = options.connection;\n  else if (Meteor.isClient)\n    self._connection = Meteor.connection;\n  else\n    self._connection = Meteor.server;\n\n  if (!options._driver) {\n    // XXX This check assumes that webapp is loaded so that Meteor.server !==\n    // null. We should fully support the case of \"want to use a Mongo-backed\n    // collection from Node code without webapp\", but we don't yet.\n    // #MeteorServerNull\n    if (name && self._connection === Meteor.server &&\n        typeof MongoInternals !== \"undefined\" &&\n        MongoInternals.defaultRemoteCollectionDriver) {\n      options._driver = MongoInternals.defaultRemoteCollectionDriver();\n    } else {\n      options._driver = LocalCollectionDriver;\n    }\n  }\n\n  self._collection = options._driver.open(name, self._connection);\n  self._name = name;\n  self._driver = options._driver;\n\n  if (self._connection && self._connection.registerStore) {\n    // OK, we're going to be a slave, replicating some remote\n    // database, except possibly with some temporary divergence while\n    // we have unacknowledged RPC's.\n    var ok = self._connection.registerStore(name, {\n      // Called at the beginning of a batch of updates. batchSize is the number\n      // of update calls to expect.\n      //\n      // XXX This interface is pretty janky. reset probably ought to go back to\n      // being its own function, and callers shouldn't have to calculate\n      // batchSize. The optimization of not calling pause/remove should be\n      // delayed until later: the first call to update() should buffer its\n      // message, and then we can either directly apply it at endUpdate time if\n      // it was the only update, or do pauseObservers/apply/apply at the next\n      // update() if there's another one.\n      beginUpdate: function (batchSize, reset) {\n        // pause observers so users don't see flicker when updating several\n        // objects at once (including the post-reconnect reset-and-reapply\n        // stage), and so that a re-sorting of a query can take advantage of the\n        // full _diffQuery moved calculation instead of applying change one at a\n        // time.\n        if (batchSize > 1 || reset)\n          self._collection.pauseObservers();\n\n        if (reset)\n          self._collection.remove({});\n      },\n\n      // Apply an update.\n      // XXX better specify this interface (not in terms of a wire message)?\n      update: function (msg) {\n        var mongoId = MongoID.idParse(msg.id);\n        var doc = self._collection.findOne(mongoId);\n\n        // Is this a \"replace the whole doc\" message coming from the quiescence\n        // of method writes to an object? (Note that 'undefined' is a valid\n        // value meaning \"remove it\".)\n        if (msg.msg === 'replace') {\n          var replace = msg.replace;\n          if (!replace) {\n            if (doc)\n              self._collection.remove(mongoId);\n          } else if (!doc) {\n            self._collection.insert(replace);\n          } else {\n            // XXX check that replace has no $ ops\n            self._collection.update(mongoId, replace);\n          }\n          return;\n        } else if (msg.msg === 'added') {\n          if (doc) {\n            throw new Error(\"Expected not to find a document already present for an add\");\n          }\n          self._collection.insert(_.extend({_id: mongoId}, msg.fields));\n        } else if (msg.msg === 'removed') {\n          if (!doc)\n            throw new Error(\"Expected to find a document already present for removed\");\n          self._collection.remove(mongoId);\n        } else if (msg.msg === 'changed') {\n          if (!doc)\n            throw new Error(\"Expected to find a document to change\");\n          if (!_.isEmpty(msg.fields)) {\n            var modifier = {};\n            _.each(msg.fields, function (value, key) {\n              if (value === undefined) {\n                if (!modifier.$unset)\n                  modifier.$unset = {};\n                modifier.$unset[key] = 1;\n              } else {\n                if (!modifier.$set)\n                  modifier.$set = {};\n                modifier.$set[key] = value;\n              }\n            });\n            self._collection.update(mongoId, modifier);\n          }\n        } else {\n          throw new Error(\"I don't know how to deal with this message\");\n        }\n\n      },\n\n      // Called at the end of a batch of updates.\n      endUpdate: function () {\n        self._collection.resumeObservers();\n      },\n\n      // Called around method stub invocations to capture the original versions\n      // of modified documents.\n      saveOriginals: function () {\n        self._collection.saveOriginals();\n      },\n      retrieveOriginals: function () {\n        return self._collection.retrieveOriginals();\n      },\n\n      // Used to preserve current versions of documents across a store reset.\n      getDoc: function(id) {\n        return self.findOne(id);\n      },\n\n      // To be able to get back to the collection from the store.\n      _getCollection: function () {\n        return self;\n      }\n    });\n\n    if (!ok) {\n      const message = `There is already a collection named \"${name}\"`;\n      if (options._suppressSameNameError === true) {\n        // XXX In theory we do not have to throw when `ok` is falsy. The store is already defined\n        // for this collection name, but this will simply be another reference to it and everything\n        // should work. However, we have historically thrown an error here, so for now we will\n        // skip the error only when `_suppressSameNameError` is `true`, allowing people to opt in\n        // and give this some real world testing.\n        console.warn ? console.warn(message) : console.log(message);\n      } else {\n        throw new Error(message);\n      }\n    }\n  }\n\n  // XXX don't define these until allow or deny is actually used for this\n  // collection. Could be hard if the security rules are only defined on the\n  // server.\n  if (options.defineMutationMethods !== false) {\n    try {\n      self._defineMutationMethods({ useExisting: (options._suppressSameNameError === true) });\n    } catch (error) {\n      // Throw a more understandable error on the server for same collection name\n      if (error.message === `A method named '/${name}/insert' is already defined`)\n        throw new Error(`There is already a collection named \"${name}\"`);\n      throw error;\n    }\n  }\n\n  // autopublish\n  if (Package.autopublish && !options._preventAutopublish && self._connection && self._connection.publish) {\n    self._connection.publish(null, function () {\n      return self.find();\n    }, {is_auto: true});\n  }\n};\n\n///\n/// Main collection API\n///\n\n\n_.extend(Mongo.Collection.prototype, {\n\n  _getFindSelector: function (args) {\n    if (args.length == 0)\n      return {};\n    else\n      return args[0];\n  },\n\n  _getFindOptions: function (args) {\n    var self = this;\n    if (args.length < 2) {\n      return { transform: self._transform };\n    } else {\n      check(args[1], Match.Optional(Match.ObjectIncluding({\n        fields: Match.Optional(Match.OneOf(Object, undefined)),\n        sort: Match.Optional(Match.OneOf(Object, Array, Function, undefined)),\n        limit: Match.Optional(Match.OneOf(Number, undefined)),\n        skip: Match.Optional(Match.OneOf(Number, undefined))\n     })));\n\n      return _.extend({\n        transform: self._transform\n      }, args[1]);\n    }\n  },\n\n  /**\n   * @summary Find the documents in a collection that match the selector.\n   * @locus Anywhere\n   * @method find\n   * @memberOf Mongo.Collection\n   * @instance\n   * @param {MongoSelector} [selector] A query describing the documents to find\n   * @param {Object} [options]\n   * @param {MongoSortSpecifier} options.sort Sort order (default: natural order)\n   * @param {Number} options.skip Number of results to skip at the beginning\n   * @param {Number} options.limit Maximum number of results to return\n   * @param {MongoFieldSpecifier} options.fields Dictionary of fields to return or exclude.\n   * @param {Boolean} options.reactive (Client only) Default `true`; pass `false` to disable reactivity\n   * @param {Function} options.transform Overrides `transform` on the  [`Collection`](#collections) for this cursor.  Pass `null` to disable transformation.\n   * @param {Boolean} options.disableOplog (Server only) Pass true to disable oplog-tailing on this query. This affects the way server processes calls to `observe` on this query. Disabling the oplog can be useful when working with data that updates in large batches.\n   * @param {Number} options.pollingIntervalMs (Server only) When oplog is disabled (through the use of `disableOplog` or when otherwise not available), the frequency (in milliseconds) of how often to poll this query when observing on the server. Defaults to 10000ms (10 seconds).\n   * @param {Number} options.pollingThrottleMs (Server only) When oplog is disabled (through the use of `disableOplog` or when otherwise not available), the minimum time (in milliseconds) to allow between re-polling when observing on the server. Increasing this will save CPU and mongo load at the expense of slower updates to users. Decreasing this is not recommended. Defaults to 50ms.\n   * @returns {Mongo.Cursor}\n   */\n  find: function (/* selector, options */) {\n    // Collection.find() (return all docs) behaves differently\n    // from Collection.find(undefined) (return 0 docs).  so be\n    // careful about the length of arguments.\n    var self = this;\n    var argArray = _.toArray(arguments);\n    return self._collection.find(self._getFindSelector(argArray),\n                                 self._getFindOptions(argArray));\n  },\n\n  /**\n   * @summary Finds the first document that matches the selector, as ordered by sort and skip options. Returns `undefined` if no matching document is found.\n   * @locus Anywhere\n   * @method findOne\n   * @memberOf Mongo.Collection\n   * @instance\n   * @param {MongoSelector} [selector] A query describing the documents to find\n   * @param {Object} [options]\n   * @param {MongoSortSpecifier} options.sort Sort order (default: natural order)\n   * @param {Number} options.skip Number of results to skip at the beginning\n   * @param {MongoFieldSpecifier} options.fields Dictionary of fields to return or exclude.\n   * @param {Boolean} options.reactive (Client only) Default true; pass false to disable reactivity\n   * @param {Function} options.transform Overrides `transform` on the [`Collection`](#collections) for this cursor.  Pass `null` to disable transformation.\n   * @returns {Object}\n   */\n  findOne: function (/* selector, options */) {\n    var self = this;\n    var argArray = _.toArray(arguments);\n    return self._collection.findOne(self._getFindSelector(argArray),\n                                    self._getFindOptions(argArray));\n  }\n\n});\n\nMongo.Collection._publishCursor = function (cursor, sub, collection) {\n  var observeHandle = cursor.observeChanges({\n    added: function (id, fields) {\n      sub.added(collection, id, fields);\n    },\n    changed: function (id, fields) {\n      sub.changed(collection, id, fields);\n    },\n    removed: function (id) {\n      sub.removed(collection, id);\n    }\n  });\n\n  // We don't call sub.ready() here: it gets called in livedata_server, after\n  // possibly calling _publishCursor on multiple returned cursors.\n\n  // register stop callback (expects lambda w/ no args).\n  sub.onStop(function () {observeHandle.stop();});\n\n  // return the observeHandle in case it needs to be stopped early\n  return observeHandle;\n};\n\n// protect against dangerous selectors.  falsey and {_id: falsey} are both\n// likely programmer error, and not what you want, particularly for destructive\n// operations.  JS regexps don't serialize over DDP but can be trivially\n// replaced by $regex.\nMongo.Collection._rewriteSelector = function (selector) {\n  // shorthand -- scalars match _id\n  if (LocalCollection._selectorIsId(selector))\n    selector = {_id: selector};\n\n  if (_.isArray(selector)) {\n    // This is consistent with the Mongo console itself; if we don't do this\n    // check passing an empty array ends up selecting all items\n    throw new Error(\"Mongo selector can't be an array.\");\n  }\n\n  if (!selector || (('_id' in selector) && !selector._id))\n    // can't match anything\n    return {_id: Random.id()};\n\n  var ret = {};\n  _.each(selector, function (value, key) {\n    // Mongo supports both {field: /foo/} and {field: {$regex: /foo/}}\n    if (value instanceof RegExp) {\n      ret[key] = convertRegexpToMongoSelector(value);\n    } else if (value && value.$regex instanceof RegExp) {\n      ret[key] = convertRegexpToMongoSelector(value.$regex);\n      // if value is {$regex: /foo/, $options: ...} then $options\n      // override the ones set on $regex.\n      if (value.$options !== undefined)\n        ret[key].$options = value.$options;\n    }\n    else if (_.contains(['$or','$and','$nor'], key)) {\n      // Translate lower levels of $and/$or/$nor\n      ret[key] = _.map(value, function (v) {\n        return Mongo.Collection._rewriteSelector(v);\n      });\n    } else {\n      ret[key] = value;\n    }\n  });\n  return ret;\n};\n\n// convert a JS RegExp object to a Mongo {$regex: ..., $options: ...}\n// selector\nfunction convertRegexpToMongoSelector(regexp) {\n  check(regexp, RegExp); // safety belt\n\n  var selector = {$regex: regexp.source};\n  var regexOptions = '';\n  // JS RegExp objects support 'i', 'm', and 'g'. Mongo regex $options\n  // support 'i', 'm', 'x', and 's'. So we support 'i' and 'm' here.\n  if (regexp.ignoreCase)\n    regexOptions += 'i';\n  if (regexp.multiline)\n    regexOptions += 'm';\n  if (regexOptions)\n    selector.$options = regexOptions;\n\n  return selector;\n}\n\n// 'insert' immediately returns the inserted document's new _id.\n// The others return values immediately if you are in a stub, an in-memory\n// unmanaged collection, or a mongo-backed collection and you don't pass a\n// callback. 'update' and 'remove' return the number of affected\n// documents. 'upsert' returns an object with keys 'numberAffected' and, if an\n// insert happened, 'insertedId'.\n//\n// Otherwise, the semantics are exactly like other methods: they take\n// a callback as an optional last argument; if no callback is\n// provided, they block until the operation is complete, and throw an\n// exception if it fails; if a callback is provided, then they don't\n// necessarily block, and they call the callback when they finish with error and\n// result arguments.  (The insert method provides the document ID as its result;\n// update and remove provide the number of affected docs as the result; upsert\n// provides an object with numberAffected and maybe insertedId.)\n//\n// On the client, blocking is impossible, so if a callback\n// isn't provided, they just return immediately and any error\n// information is lost.\n//\n// There's one more tweak. On the client, if you don't provide a\n// callback, then if there is an error, a message will be logged with\n// Meteor._debug.\n//\n// The intent (though this is actually determined by the underlying\n// drivers) is that the operations should be done synchronously, not\n// generating their result until the database has acknowledged\n// them. In the future maybe we should provide a flag to turn this\n// off.\n\n/**\n * @summary Insert a document in the collection.  Returns its unique _id.\n * @locus Anywhere\n * @method  insert\n * @memberOf Mongo.Collection\n * @instance\n * @param {Object} doc The document to insert. May not yet have an _id attribute, in which case Meteor will generate one for you.\n * @param {Function} [callback] Optional.  If present, called with an error object as the first argument and, if no error, the _id as the second.\n */\nMongo.Collection.prototype.insert = function insert(doc, callback) {\n  // Make sure we were passed a document to insert\n  if (!doc) {\n    throw new Error(\"insert requires an argument\");\n  }\n\n  // Shallow-copy the document and possibly generate an ID\n  doc = _.extend({}, doc);\n\n  if ('_id' in doc) {\n    if (!doc._id || !(typeof doc._id === 'string' || doc._id instanceof Mongo.ObjectID)) {\n      throw new Error(\"Meteor requires document _id fields to be non-empty strings or ObjectIDs\");\n    }\n  } else {\n    let generateId = true;\n\n    // Don't generate the id if we're the client and the 'outermost' call\n    // This optimization saves us passing both the randomSeed and the id\n    // Passing both is redundant.\n    if (this._isRemoteCollection()) {\n      const enclosing = DDP._CurrentInvocation.get();\n      if (!enclosing) {\n        generateId = false;\n      }\n    }\n\n    if (generateId) {\n      doc._id = this._makeNewID();\n    }\n  }\n\n  // On inserts, always return the id that we generated; on all other\n  // operations, just return the result from the collection.\n  var chooseReturnValueFromCollectionResult = function (result) {\n    if (doc._id) {\n      return doc._id;\n    }\n\n    // XXX what is this for??\n    // It's some iteraction between the callback to _callMutatorMethod and\n    // the return value conversion\n    doc._id = result;\n\n    return result;\n  };\n\n  const wrappedCallback = wrapCallback(callback, chooseReturnValueFromCollectionResult);\n\n  if (this._isRemoteCollection()) {\n    const result = this._callMutatorMethod(\"insert\", [doc], wrappedCallback);\n    return chooseReturnValueFromCollectionResult(result);\n  }\n\n  // it's my collection.  descend into the collection object\n  // and propagate any exception.\n  try {\n    // If the user provided a callback and the collection implements this\n    // operation asynchronously, then queryRet will be undefined, and the\n    // result will be returned through the callback instead.\n    const result = this._collection.insert(doc, wrappedCallback);\n    return chooseReturnValueFromCollectionResult(result);\n  } catch (e) {\n    if (callback) {\n      callback(e);\n      return null;\n    }\n    throw e;\n  }\n};\n\n/**\n * @summary Modify one or more documents in the collection. Returns the number of matched documents.\n * @locus Anywhere\n * @method update\n * @memberOf Mongo.Collection\n * @instance\n * @param {MongoSelector} selector Specifies which documents to modify\n * @param {MongoModifier} modifier Specifies how to modify the documents\n * @param {Object} [options]\n * @param {Boolean} options.multi True to modify all matching documents; false to only modify one of the matching documents (the default).\n * @param {Boolean} options.upsert True to insert a document if no matching documents are found.\n * @param {Function} [callback] Optional.  If present, called with an error object as the first argument and, if no error, the number of affected documents as the second.\n */\nMongo.Collection.prototype.update = function update(selector, modifier, ...optionsAndCallback) {\n  const callback = popCallbackFromArgs(optionsAndCallback);\n\n  selector = Mongo.Collection._rewriteSelector(selector);\n\n  // We've already popped off the callback, so we are left with an array\n  // of one or zero items\n  const options = _.clone(optionsAndCallback[0]) || {};\n  if (options && options.upsert) {\n    // set `insertedId` if absent.  `insertedId` is a Meteor extension.\n    if (options.insertedId) {\n      if (!(typeof options.insertedId === 'string' || options.insertedId instanceof Mongo.ObjectID))\n        throw new Error(\"insertedId must be string or ObjectID\");\n    } else if (! selector._id) {\n      options.insertedId = this._makeNewID();\n    }\n  }\n\n  const wrappedCallback = wrapCallback(callback);\n\n  if (this._isRemoteCollection()) {\n    const args = [\n      selector,\n      modifier,\n      options\n    ];\n\n    return this._callMutatorMethod(\"update\", args, wrappedCallback);\n  }\n\n  // it's my collection.  descend into the collection object\n  // and propagate any exception.\n  try {\n    // If the user provided a callback and the collection implements this\n    // operation asynchronously, then queryRet will be undefined, and the\n    // result will be returned through the callback instead.\n    return this._collection.update(\n      selector, modifier, options, wrappedCallback);\n  } catch (e) {\n    if (callback) {\n      callback(e);\n      return null;\n    }\n    throw e;\n  }\n};\n\n/**\n * @summary Remove documents from the collection\n * @locus Anywhere\n * @method remove\n * @memberOf Mongo.Collection\n * @instance\n * @param {MongoSelector} selector Specifies which documents to remove\n * @param {Function} [callback] Optional.  If present, called with an error object as its argument.\n */\nMongo.Collection.prototype.remove = function remove(selector, callback) {\n  selector = Mongo.Collection._rewriteSelector(selector);\n\n  const wrappedCallback = wrapCallback(callback);\n\n  if (this._isRemoteCollection()) {\n    return this._callMutatorMethod(\"remove\", [selector], wrappedCallback);\n  }\n\n  // it's my collection.  descend into the collection object\n  // and propagate any exception.\n  try {\n    // If the user provided a callback and the collection implements this\n    // operation asynchronously, then queryRet will be undefined, and the\n    // result will be returned through the callback instead.\n    return this._collection.remove(selector, wrappedCallback);\n  } catch (e) {\n    if (callback) {\n      callback(e);\n      return null;\n    }\n    throw e;\n  }\n};\n\n// Determine if this collection is simply a minimongo representation of a real\n// database on another server\nMongo.Collection.prototype._isRemoteCollection = function _isRemoteCollection() {\n  // XXX see #MeteorServerNull\n  return this._connection && this._connection !== Meteor.server;\n};\n\n// Convert the callback to not return a result if there is an error\nfunction wrapCallback(callback, convertResult) {\n  if (!callback) {\n    return;\n  }\n\n  // If no convert function was passed in, just use a \"blank function\"\n  convertResult = convertResult || _.identity;\n\n  return (error, result) => {\n    callback(error, ! error && convertResult(result));\n  };\n}\n\n/**\n * @summary Modify one or more documents in the collection, or insert one if no matching documents were found. Returns an object with keys `numberAffected` (the number of documents modified)  and `insertedId` (the unique _id of the document that was inserted, if any).\n * @locus Anywhere\n * @param {MongoSelector} selector Specifies which documents to modify\n * @param {MongoModifier} modifier Specifies how to modify the documents\n * @param {Object} [options]\n * @param {Boolean} options.multi True to modify all matching documents; false to only modify one of the matching documents (the default).\n * @param {Function} [callback] Optional.  If present, called with an error object as the first argument and, if no error, the number of affected documents as the second.\n */\nMongo.Collection.prototype.upsert = function upsert(\n    selector, modifier, options, callback) {\n  if (! callback && typeof options === \"function\") {\n    callback = options;\n    options = {};\n  }\n\n  const updateOptions = _.extend({}, options, {\n    _returnObject: true,\n    upsert: true\n  });\n\n  return this.update(selector, modifier, updateOptions, callback);\n};\n\n// We'll actually design an index API later. For now, we just pass through to\n// Mongo's, but make it synchronous.\nMongo.Collection.prototype._ensureIndex = function (index, options) {\n  var self = this;\n  if (!self._collection._ensureIndex)\n    throw new Error(\"Can only call _ensureIndex on server collections\");\n  self._collection._ensureIndex(index, options);\n};\nMongo.Collection.prototype._dropIndex = function (index) {\n  var self = this;\n  if (!self._collection._dropIndex)\n    throw new Error(\"Can only call _dropIndex on server collections\");\n  self._collection._dropIndex(index);\n};\nMongo.Collection.prototype._dropCollection = function () {\n  var self = this;\n  if (!self._collection.dropCollection)\n    throw new Error(\"Can only call _dropCollection on server collections\");\n  self._collection.dropCollection();\n};\nMongo.Collection.prototype._createCappedCollection = function (byteSize, maxDocuments) {\n  var self = this;\n  if (!self._collection._createCappedCollection)\n    throw new Error(\"Can only call _createCappedCollection on server collections\");\n  self._collection._createCappedCollection(byteSize, maxDocuments);\n};\n\n/**\n * @summary Returns the [`Collection`](http://mongodb.github.io/node-mongodb-native/2.2/api/Collection.html) object corresponding to this collection from the [npm `mongodb` driver module](https://www.npmjs.com/package/mongodb) which is wrapped by `Mongo.Collection`.\n * @locus Server\n */\nMongo.Collection.prototype.rawCollection = function () {\n  var self = this;\n  if (! self._collection.rawCollection) {\n    throw new Error(\"Can only call rawCollection on server collections\");\n  }\n  return self._collection.rawCollection();\n};\n\n/**\n * @summary Returns the [`Db`](http://mongodb.github.io/node-mongodb-native/2.2/api/Db.html) object corresponding to this collection's database connection from the [npm `mongodb` driver module](https://www.npmjs.com/package/mongodb) which is wrapped by `Mongo.Collection`.\n * @locus Server\n */\nMongo.Collection.prototype.rawDatabase = function () {\n  var self = this;\n  if (! (self._driver.mongo && self._driver.mongo.db)) {\n    throw new Error(\"Can only call rawDatabase on server collections\");\n  }\n  return self._driver.mongo.db;\n};\n\n\n/**\n * @summary Create a Mongo-style `ObjectID`.  If you don't specify a `hexString`, the `ObjectID` will generated randomly (not using MongoDB's ID construction rules).\n * @locus Anywhere\n * @class\n * @param {String} [hexString] Optional.  The 24-character hexadecimal contents of the ObjectID to create\n */\nMongo.ObjectID = MongoID.ObjectID;\n\n/**\n * @summary To create a cursor, use find. To access the documents in a cursor, use forEach, map, or fetch.\n * @class\n * @instanceName cursor\n */\nMongo.Cursor = LocalCollection.Cursor;\n\n/**\n * @deprecated in 0.9.1\n */\nMongo.Collection.Cursor = Mongo.Cursor;\n\n/**\n * @deprecated in 0.9.1\n */\nMongo.Collection.ObjectID = Mongo.ObjectID;\n\n/**\n * @deprecated in 0.9.1\n */\nMeteor.Collection = Mongo.Collection;\n\n// Allow deny stuff is now in the allow-deny package\n_.extend(Meteor.Collection.prototype, AllowDeny.CollectionPrototype);\n\nfunction popCallbackFromArgs(args) {\n  // Pull off any callback (or perhaps a 'callback' variable that was passed\n  // in undefined, like how 'upsert' does it).\n  if (args.length &&\n      (args[args.length - 1] === undefined ||\n       args[args.length - 1] instanceof Function)) {\n    return args.pop();\n  }\n}\n","/**\n * @summary Allows for user specified connection options\n * @example http://mongodb.github.io/node-mongodb-native/2.2/reference/connecting/connection-settings/\n * @locus Server\n * @param {Object} options User specified Mongo connection options\n */\nMongo.setConnectionOptions = function setConnectionOptions (options) {\n  check(options, Object);\n  Mongo._connectionOptions = options;\n};"]}}]